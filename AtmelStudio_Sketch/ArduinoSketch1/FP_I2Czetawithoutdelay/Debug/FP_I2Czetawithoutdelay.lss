
FP_I2Czetawithoutdelay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004be  00800100  000034d2  00003566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020c  008005be  008005be  00003a24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a10  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a930  00000000  00000000  000044a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a9e  00000000  00000000  0001edd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000585b  00000000  00000000  00022872  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020c4  00000000  00000000  000280d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f34  00000000  00000000  0002a194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bc12  00000000  00000000  0002e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a48  00000000  00000000  00039cda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__dtors_end>
       4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
       8:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
       c:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_3>
      10:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_3>
      14:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_3>
      18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      40:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_16>
      44:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      48:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_18>
      4c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_19>
      50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      58:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      5c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      60:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__vector_24>
      64:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      68:	b3 0e       	add	r11, r19
      6a:	b8 0e       	add	r11, r24
      6c:	c3 0e       	add	r12, r19
      6e:	c3 0e       	add	r12, r19
      70:	c3 0e       	add	r12, r19
      72:	c3 0e       	add	r12, r19
      74:	c8 0e       	add	r12, r24
      76:	ca 0e       	add	r12, r26
      78:	cd 0e       	add	r12, r29

0000007a <__trampolines_end>:
      7a:	00 00       	nop
      7c:	00 08       	sbc	r0, r0
      7e:	00 02       	muls	r16, r16
      80:	01 00       	.word	0x0001	; ????
      82:	00 03       	mulsu	r16, r16
      84:	04 07       	cpc	r16, r20
	...

0000008e <digital_pin_to_bit_mask_PGM>:
      8e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      9e:	04 08 10 20                                         ... 

000000a2 <digital_pin_to_port_PGM>:
      a2:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b2:	03 03 03 03                                         ....

000000b6 <port_to_input_PGM>:
      b6:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000c0 <port_to_output_PGM>:
      c0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ca <port_to_mode_PGM>:
      ca:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d4 <__ctors_start>:
      d4:	55 01       	movw	r10, r10
      d6:	4e 08       	sbc	r4, r14
      d8:	b4 15       	cp	r27, r4

000000da <__ctors_end>:
      da:	75 01       	movw	r14, r10

000000dc <__dtors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	15 e0       	ldi	r17, 0x05	; 5
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e2 ed       	ldi	r30, 0xD2	; 210
      f0:	f4 e3       	ldi	r31, 0x34	; 52
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ae 3b       	cpi	r26, 0xBE	; 190
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	27 e0       	ldi	r18, 0x07	; 7
     100:	ae eb       	ldi	r26, 0xBE	; 190
     102:	b5 e0       	ldi	r27, 0x05	; 5
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	aa 3c       	cpi	r26, 0xCA	; 202
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>

0000010e <__do_global_ctors>:
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	cd e6       	ldi	r28, 0x6D	; 109
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	04 c0       	rjmp	.+8      	; 0x11e <__do_global_ctors+0x10>
     116:	21 97       	sbiw	r28, 0x01	; 1
     118:	fe 01       	movw	r30, r28
     11a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__tablejump2__>
     11e:	ca 36       	cpi	r28, 0x6A	; 106
     120:	d1 07       	cpc	r29, r17
     122:	c9 f7       	brne	.-14     	; 0x116 <__do_global_ctors+0x8>
     124:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <main>
     128:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__do_global_dtors>

0000012c <__bad_interrupt>:
     12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <setup>:
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.SETUP<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//............................................................................................................................................................................................................................................................


void setup()  
{ 
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
  
  pinMode(Lockpin,OUTPUT);  //Setting MOSFET pin as output
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Lockpin>
     13a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <pinMode>
  digitalWrite(Lockpin,LOW);//Default locked
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Lockpin>
     144:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>

  pinMode(Ledpin,OUTPUT);  //Setting MOSFET pin as output
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ledpin>
     14e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <pinMode>
  digitalWrite(Ledpin,LOW);
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ledpin>
     158:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     15c:	26 e0       	ldi	r18, 0x06	; 6
     15e:	40 e8       	ldi	r20, 0x80	; 128
     160:	55 e2       	ldi	r21, 0x25	; 37
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	88 e1       	ldi	r24, 0x18	; 24
     168:	96 e0       	ldi	r25, 0x06	; 6
     16a:	0e 94 83 07 	call	0xf06	; 0xf06 <_ZN14HardwareSerial5beginEmh>
  
  Serial.begin(9600);//Begining serial communication with pc at 9600 Bauds
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
     16e:	64 e6       	ldi	r22, 0x64	; 100
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
  Serial.println("\n\nAdafruit finger detect test");
     17a:	68 e1       	ldi	r22, 0x18	; 24
     17c:	71 e0       	ldi	r23, 0x01	; 1
     17e:	88 e1       	ldi	r24, 0x18	; 24
     180:	96 e0       	ldi	r25, 0x06	; 6
     182:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  lcd.begin();
     186:	8d ee       	ldi	r24, 0xED	; 237
     188:	95 e0       	ldi	r25, 0x05	; 5
     18a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <_ZN17LiquidCrystal_I2C5beginEv>
     18e:	c3 e0       	ldi	r28, 0x03	; 3
     190:	d0 e0       	ldi	r29, 0x00	; 0
 //lcd.begin(16,2); // initialize the lcd for 16 chars 2 lines, turn on backlight

// ------- Quick 3 blinks of backlight -------------
 for(int i = 0; i< 3; i++)
 {
 lcd.backlight();
     192:	8d ee       	ldi	r24, 0xED	; 237
     194:	95 e0       	ldi	r25, 0x05	; 5
     196:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN17LiquidCrystal_I2C9backlightEv>
 delay(250);
     19a:	6a ef       	ldi	r22, 0xFA	; 250
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
 lcd.noBacklight();
     1a6:	8d ee       	ldi	r24, 0xED	; 237
     1a8:	95 e0       	ldi	r25, 0x05	; 5
     1aa:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN17LiquidCrystal_I2C11noBacklightEv>
 delay(250);
     1ae:	6a ef       	ldi	r22, 0xFA	; 250
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     1ba:	21 97       	sbiw	r28, 0x01	; 1
  Serial.println("\n\nAdafruit finger detect test");
  lcd.begin();
 //lcd.begin(16,2); // initialize the lcd for 16 chars 2 lines, turn on backlight

// ------- Quick 3 blinks of backlight -------------
 for(int i = 0; i< 3; i++)
     1bc:	51 f7       	brne	.-44     	; 0x192 <setup+0x62>
 lcd.backlight();
 delay(250);
 lcd.noBacklight();
 delay(250);
 }
 lcd.backlight(); // finish with backlight on 
     1be:	8d ee       	ldi	r24, 0xED	; 237
     1c0:	95 e0       	ldi	r25, 0x05	; 5
     1c2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN17LiquidCrystal_I2C9backlightEv>
;
  // set the data rate for the Fingerprint sensor serial port
  finger.begin(9600);
     1c6:	40 e8       	ldi	r20, 0x80	; 128
     1c8:	55 e2       	ldi	r21, 0x25	; 37
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	8f eb       	ldi	r24, 0xBF	; 191
     1d0:	95 e0       	ldi	r25, 0x05	; 5
     1d2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <_ZN20Adafruit_Fingerprint5beginEm>
  
  if (finger.verifyPassword()) {
     1d6:	8f eb       	ldi	r24, 0xBF	; 191
     1d8:	95 e0       	ldi	r25, 0x05	; 5
     1da:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN20Adafruit_Fingerprint14verifyPasswordEv>
     1de:	88 23       	and	r24, r24
     1e0:	11 f1       	breq	.+68     	; 0x226 <setup+0xf6>
    Serial.println("Found fingerprint sensor!");
     1e2:	66 e3       	ldi	r22, 0x36	; 54
     1e4:	71 e0       	ldi	r23, 0x01	; 1
     1e6:	88 e1       	ldi	r24, 0x18	; 24
     1e8:	96 e0       	ldi	r25, 0x06	; 6
     1ea:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }

  finger.getTemplateCount();
     1ee:	8f eb       	ldi	r24, 0xBF	; 191
     1f0:	95 e0       	ldi	r25, 0x05	; 5
     1f2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <_ZN20Adafruit_Fingerprint16getTemplateCountEv>
  Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
     1f6:	60 e5       	ldi	r22, 0x50	; 80
     1f8:	71 e0       	ldi	r23, 0x01	; 1
     1fa:	88 e1       	ldi	r24, 0x18	; 24
     1fc:	96 e0       	ldi	r25, 0x06	; 6
     1fe:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     202:	60 91 c3 05 	lds	r22, 0x05C3	; 0x8005c3 <finger+0x4>
     206:	70 91 c4 05 	lds	r23, 0x05C4	; 0x8005c4 <finger+0x5>
     20a:	4a e0       	ldi	r20, 0x0A	; 10
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	88 e1       	ldi	r24, 0x18	; 24
     210:	96 e0       	ldi	r25, 0x06	; 6
     212:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN5Print5printEji>
     216:	61 e6       	ldi	r22, 0x61	; 97
     218:	71 e0       	ldi	r23, 0x01	; 1
     21a:	88 e1       	ldi	r24, 0x18	; 24
     21c:	96 e0       	ldi	r25, 0x06	; 6
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }

  finger.getTemplateCount();
  Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
     222:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  finger.begin(9600);
  
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
     226:	6c e6       	ldi	r22, 0x6C	; 108
     228:	71 e0       	ldi	r23, 0x01	; 1
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	96 e0       	ldi	r25, 0x06	; 6
     22e:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    while (1) { delay(1); }
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     23e:	f9 cf       	rjmp	.-14     	; 0x232 <setup+0x102>

00000240 <_Z17deleteFingerprinth>:

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DELETE A FIGERPRINT TEMPLATE by ID<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//............................................................................................................................................................................................................................................................


uint8_t deleteFingerprint(uint8_t id) {
     240:	cf 93       	push	r28
  uint8_t p = -1;

      
          p = finger.deleteModel(id);
     242:	68 2f       	mov	r22, r24
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	8f eb       	ldi	r24, 0xBF	; 191
     248:	95 e0       	ldi	r25, 0x05	; 5
     24a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN20Adafruit_Fingerprint11deleteModelEj>
     24e:	c8 2f       	mov	r28, r24

          if (p == FINGERPRINT_OK) {
     250:	81 11       	cpse	r24, r1
     252:	08 c0       	rjmp	.+16     	; 0x264 <_Z17deleteFingerprinth+0x24>
            Serial.println("Deleted!");
     254:	6f e8       	ldi	r22, 0x8F	; 143
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	88 e1       	ldi	r24, 0x18	; 24
     25a:	96 e0       	ldi	r25, 0x06	; 6
     25c:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	21 c0       	rjmp	.+66     	; 0x2a6 <_Z17deleteFingerprinth+0x66>
          } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	19 f4       	brne	.+6      	; 0x26e <_Z17deleteFingerprinth+0x2e>
            Serial.println("Communication error");
     268:	68 e9       	ldi	r22, 0x98	; 152
     26a:	71 e0       	ldi	r23, 0x01	; 1
     26c:	04 c0       	rjmp	.+8      	; 0x276 <_Z17deleteFingerprinth+0x36>
            return p;
          } else if (p == FINGERPRINT_BADLOCATION) {
     26e:	8b 30       	cpi	r24, 0x0B	; 11
     270:	39 f4       	brne	.+14     	; 0x280 <_Z17deleteFingerprinth+0x40>
            Serial.println("Could not delete in that location");
     272:	6c ea       	ldi	r22, 0xAC	; 172
     274:	71 e0       	ldi	r23, 0x01	; 1
     276:	88 e1       	ldi	r24, 0x18	; 24
     278:	96 e0       	ldi	r25, 0x06	; 6
     27a:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
            return p;
     27e:	12 c0       	rjmp	.+36     	; 0x2a4 <_Z17deleteFingerprinth+0x64>
          } else if (p == FINGERPRINT_FLASHERR) {
     280:	88 31       	cpi	r24, 0x18	; 24
     282:	19 f4       	brne	.+6      	; 0x28a <_Z17deleteFingerprinth+0x4a>
            Serial.println("Error writing to flash");
     284:	6e ec       	ldi	r22, 0xCE	; 206
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	f6 cf       	rjmp	.-20     	; 0x276 <_Z17deleteFingerprinth+0x36>
            return p;
          } else {
            Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
     28a:	65 ee       	ldi	r22, 0xE5	; 229
     28c:	71 e0       	ldi	r23, 0x01	; 1
     28e:	88 e1       	ldi	r24, 0x18	; 24
     290:	96 e0       	ldi	r25, 0x06	; 6
     292:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     296:	40 e1       	ldi	r20, 0x10	; 16
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	6c 2f       	mov	r22, r28
     29c:	88 e1       	ldi	r24, 0x18	; 24
     29e:	96 e0       	ldi	r25, 0x06	; 6
     2a0:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN5Print7printlnEhi>
     2a4:	8c 2f       	mov	r24, r28
            return p;
          }
  
}
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <_GLOBAL__sub_I_mySerial>:
     2aa:	0f 93       	push	r16
uint8_t deleteFingerprint(uint8_t id);
//End of Auto generated function prototypes by Atmel Studio



SoftwareSerial mySerial(2, 3);
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	43 e0       	ldi	r20, 0x03	; 3
     2b0:	62 e0       	ldi	r22, 0x02	; 2
     2b2:	89 ef       	ldi	r24, 0xF9	; 249
     2b4:	95 e0       	ldi	r25, 0x05	; 5
     2b6:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN14SoftwareSerialC1Ehhb>
LiquidCrystal_I2C lcd(0x27, 16, 2);
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	22 e0       	ldi	r18, 0x02	; 2
     2be:	40 e1       	ldi	r20, 0x10	; 16
     2c0:	67 e2       	ldi	r22, 0x27	; 39
     2c2:	8d ee       	ldi	r24, 0xED	; 237
     2c4:	95 e0       	ldi	r25, 0x05	; 5
     2c6:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN17LiquidCrystal_I2CC1Ehhhh>

//LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); // Set the LCD I2C address
String username;
     2ca:	61 e8       	ldi	r22, 0x81	; 129
     2cc:	75 e0       	ldi	r23, 0x05	; 5
     2ce:	87 ee       	ldi	r24, 0xE7	; 231
     2d0:	95 e0       	ldi	r25, 0x05	; 5
     2d2:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN6StringC1EPKc>
int Lockpin=6;//pin controlling relay(MOSFET) to lock
int Ledpin=7;//pin controlling led

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	69 ef       	ldi	r22, 0xF9	; 249
     2de:	75 e0       	ldi	r23, 0x05	; 5
     2e0:	8f eb       	ldi	r24, 0xBF	; 191
     2e2:	95 e0       	ldi	r25, 0x05	; 5
          } else {
            Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
            return p;
          }
  
}
     2e4:	0f 91       	pop	r16
//LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); // Set the LCD I2C address
String username;
int Lockpin=6;//pin controlling relay(MOSFET) to lock
int Ledpin=7;//pin controlling led

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
     2e6:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <_ZN20Adafruit_FingerprintC1EP14SoftwareSerialm>

000002ea <_GLOBAL__sub_D_mySerial>:

SoftwareSerial mySerial(2, 3);
LiquidCrystal_I2C lcd(0x27, 16, 2);

//LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); // Set the LCD I2C address
String username;
     2ea:	87 ee       	ldi	r24, 0xE7	; 231
     2ec:	95 e0       	ldi	r25, 0x05	; 5
     2ee:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN6StringD1Ev>
uint8_t deleteFingerprint(uint8_t id);
//End of Auto generated function prototypes by Atmel Studio



SoftwareSerial mySerial(2, 3);
     2f2:	89 ef       	ldi	r24, 0xF9	; 249
     2f4:	95 e0       	ldi	r25, 0x05	; 5
     2f6:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <_ZN14SoftwareSerialD1Ev>

000002fa <_Z10readnumberv>:

uint8_t readnumber(void) {
  uint8_t num = 0;
  
  while (num == 0) {
    while (! Serial.available());
     2fa:	88 e1       	ldi	r24, 0x18	; 24
     2fc:	96 e0       	ldi	r25, 0x06	; 6
     2fe:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN14HardwareSerial9availableEv>
     302:	89 2b       	or	r24, r25
     304:	d1 f3       	breq	.-12     	; 0x2fa <_Z10readnumberv>
    num = Serial.parseInt();
     306:	41 e0       	ldi	r20, 0x01	; 1
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	88 e1       	ldi	r24, 0x18	; 24
     30c:	96 e0       	ldi	r25, 0x06	; 6
     30e:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN6Stream8parseIntE13LookaheadModec>
     312:	86 2f       	mov	r24, r22
//............................................................................................................................................................................................................................................................

uint8_t readnumber(void) {
  uint8_t num = 0;
  
  while (num == 0) {
     314:	66 23       	and	r22, r22
     316:	89 f3       	breq	.-30     	; 0x2fa <_Z10readnumberv>
    while (! Serial.available());
    num = Serial.parseInt();
  }
  return num;
}
     318:	08 95       	ret

0000031a <_Z20getFingerprintEnrollv>:


//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ENROLL FUNCTION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//............................................................................................................................................................................................................................................................

uint8_t getFingerprintEnroll() {
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29

  int p = -1;
  Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
     31e:	67 ef       	ldi	r22, 0xF7	; 247
     320:	71 e0       	ldi	r23, 0x01	; 1
     322:	88 e1       	ldi	r24, 0x18	; 24
     324:	96 e0       	ldi	r25, 0x06	; 6
     326:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     32a:	4a e0       	ldi	r20, 0x0A	; 10
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	60 91 be 05 	lds	r22, 0x05BE	; 0x8005be <__data_end>
     332:	88 e1       	ldi	r24, 0x18	; 24
     334:	96 e0       	ldi	r25, 0x06	; 6
     336:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN5Print7printlnEhi>
  lcd.clear();
     33a:	8d ee       	ldi	r24, 0xED	; 237
     33c:	95 e0       	ldi	r25, 0x05	; 5
     33e:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
  lcd.setCursor(0,0);
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	8d ee       	ldi	r24, 0xED	; 237
     348:	95 e0       	ldi	r25, 0x05	; 5
     34a:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("Ready to enroll");delay(500);
     34e:	6f e1       	ldi	r22, 0x1F	; 31
     350:	72 e0       	ldi	r23, 0x02	; 2
     352:	8d ee       	ldi	r24, 0xED	; 237
     354:	95 e0       	ldi	r25, 0x05	; 5
     356:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     35a:	64 ef       	ldi	r22, 0xF4	; 244
     35c:	71 e0       	ldi	r23, 0x01	; 1
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
  lcd.clear();
     366:	8d ee       	ldi	r24, 0xED	; 237
     368:	95 e0       	ldi	r25, 0x05	; 5
     36a:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
  lcd.setCursor(0,0);
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	8d ee       	ldi	r24, 0xED	; 237
     374:	95 e0       	ldi	r25, 0x05	; 5
     376:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("Place your");lcd.setCursor(0, 1);lcd.print("  Right Thumb");
     37a:	6f e2       	ldi	r22, 0x2F	; 47
     37c:	72 e0       	ldi	r23, 0x02	; 2
     37e:	8d ee       	ldi	r24, 0xED	; 237
     380:	95 e0       	ldi	r25, 0x05	; 5
     382:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     386:	41 e0       	ldi	r20, 0x01	; 1
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	8d ee       	ldi	r24, 0xED	; 237
     38c:	95 e0       	ldi	r25, 0x05	; 5
     38e:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     392:	6a e3       	ldi	r22, 0x3A	; 58
     394:	72 e0       	ldi	r23, 0x02	; 2
     396:	8d ee       	ldi	r24, 0xED	; 237
     398:	95 e0       	ldi	r25, 0x05	; 5
     39a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ENROLL FUNCTION<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//............................................................................................................................................................................................................................................................

uint8_t getFingerprintEnroll() {

  int p = -1;
     39e:	cf ef       	ldi	r28, 0xFF	; 255
     3a0:	df ef       	ldi	r29, 0xFF	; 255
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Place your");lcd.setCursor(0, 1);lcd.print("  Right Thumb");
  
  while (p != FINGERPRINT_OK) {
    if(Serial.available()){return p;}
     3a2:	88 e1       	ldi	r24, 0x18	; 24
     3a4:	96 e0       	ldi	r25, 0x06	; 6
     3a6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN14HardwareSerial9availableEv>
     3aa:	89 2b       	or	r24, r25
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <_Z20getFingerprintEnrollv+0x96>
     3ae:	87 c2       	rjmp	.+1294   	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
    
    p = finger.getImage();
     3b0:	8f eb       	ldi	r24, 0xBF	; 191
     3b2:	95 e0       	ldi	r25, 0x05	; 5
     3b4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN20Adafruit_Fingerprint8getImageEv>
     3b8:	c8 2f       	mov	r28, r24
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
    switch (p) {
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	71 f0       	breq	.+28     	; 0x3dc <_Z20getFingerprintEnrollv+0xc2>
     3c0:	38 f0       	brcs	.+14     	; 0x3d0 <_Z20getFingerprintEnrollv+0xb6>
     3c2:	82 30       	cpi	r24, 0x02	; 2
     3c4:	41 f0       	breq	.+16     	; 0x3d6 <_Z20getFingerprintEnrollv+0xbc>
     3c6:	83 30       	cpi	r24, 0x03	; 3
     3c8:	61 f4       	brne	.+24     	; 0x3e2 <_Z20getFingerprintEnrollv+0xc8>
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
     3ca:	64 e5       	ldi	r22, 0x54	; 84
     3cc:	72 e0       	ldi	r23, 0x02	; 2
     3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <_Z20getFingerprintEnrollv+0xcc>
    if(Serial.available()){return p;}
    
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
     3d0:	68 e4       	ldi	r22, 0x48	; 72
     3d2:	72 e0       	ldi	r23, 0x02	; 2
     3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <_Z20getFingerprintEnrollv+0xcc>
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println(".");
     3d6:	64 e5       	ldi	r22, 0x54	; 84
     3d8:	75 e0       	ldi	r23, 0x05	; 5
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <_Z20getFingerprintEnrollv+0xcc>
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
     3dc:	68 e9       	ldi	r22, 0x98	; 152
     3de:	71 e0       	ldi	r23, 0x01	; 1
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <_Z20getFingerprintEnrollv+0xcc>
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
     3e2:	62 e6       	ldi	r22, 0x62	; 98
     3e4:	72 e0       	ldi	r23, 0x02	; 2
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
     3e6:	88 e1       	ldi	r24, 0x18	; 24
     3e8:	96 e0       	ldi	r25, 0x06	; 6
     3ea:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  lcd.print("Ready to enroll");delay(500);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Place your");lcd.setCursor(0, 1);lcd.print("  Right Thumb");
  
  while (p != FINGERPRINT_OK) {
     3ee:	20 97       	sbiw	r28, 0x00	; 0
     3f0:	c1 f6       	brne	.-80     	; 0x3a2 <_Z20getFingerprintEnrollv+0x88>
    }
  }

  // OK success!

  p = finger.image2Tz(1);
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	8f eb       	ldi	r24, 0xBF	; 191
     3f6:	95 e0       	ldi	r25, 0x05	; 5
     3f8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN20Adafruit_Fingerprint8image2TzEh>
     3fc:	c8 2f       	mov	r28, r24
  switch (p) {
     3fe:	86 30       	cpi	r24, 0x06	; 6
     400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	12 c1       	rjmp	.+548    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     404:	08 f0       	brcs	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	ee c0       	rjmp	.+476    	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     408:	81 11       	cpse	r24, r1
     40a:	e6 c0       	rjmp	.+460    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
    case FINGERPRINT_OK:
      Serial.println("Image converted");
     40c:	60 e7       	ldi	r22, 0x70	; 112
     40e:	72 e0       	ldi	r23, 0x02	; 2
     410:	88 e1       	ldi	r24, 0x18	; 24
     412:	96 e0       	ldi	r25, 0x06	; 6
     414:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
      Serial.println("Unknown error");Serial.println("errr");
      lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
      return p;
  }
  
  Serial.println("Remove finger");
     418:	60 e8       	ldi	r22, 0x80	; 128
     41a:	72 e0       	ldi	r23, 0x02	; 2
     41c:	88 e1       	ldi	r24, 0x18	; 24
     41e:	96 e0       	ldi	r25, 0x06	; 6
     420:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  lcd.clear();lcd.setCursor(0,0);lcd.print("Remove finger");
     424:	8d ee       	ldi	r24, 0xED	; 237
     426:	95 e0       	ldi	r25, 0x05	; 5
     428:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	8d ee       	ldi	r24, 0xED	; 237
     432:	95 e0       	ldi	r25, 0x05	; 5
     434:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     438:	60 e8       	ldi	r22, 0x80	; 128
     43a:	72 e0       	ldi	r23, 0x02	; 2
     43c:	8d ee       	ldi	r24, 0xED	; 237
     43e:	95 e0       	ldi	r25, 0x05	; 5
     440:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
  delay(2000);
     444:	60 ed       	ldi	r22, 0xD0	; 208
     446:	77 e0       	ldi	r23, 0x07	; 7
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
     450:	8f eb       	ldi	r24, 0xBF	; 191
     452:	95 e0       	ldi	r25, 0x05	; 5
     454:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN20Adafruit_Fingerprint8getImageEv>
  
  Serial.println("Remove finger");
  lcd.clear();lcd.setCursor(0,0);lcd.print("Remove finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	d1 f7       	brne	.-12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
     45c:	61 ee       	ldi	r22, 0xE1	; 225
     45e:	72 e0       	ldi	r23, 0x02	; 2
     460:	88 e1       	ldi	r24, 0x18	; 24
     462:	96 e0       	ldi	r25, 0x06	; 6
     464:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     468:	4a e0       	ldi	r20, 0x0A	; 10
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	60 91 be 05 	lds	r22, 0x05BE	; 0x8005be <__data_end>
     470:	88 e1       	ldi	r24, 0x18	; 24
     472:	96 e0       	ldi	r25, 0x06	; 6
     474:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN5Print7printlnEhi>
  p = -1;
  Serial.println("Place same finger again");
     478:	65 ee       	ldi	r22, 0xE5	; 229
     47a:	72 e0       	ldi	r23, 0x02	; 2
     47c:	88 e1       	ldi	r24, 0x18	; 24
     47e:	96 e0       	ldi	r25, 0x06	; 6
     480:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    lcd.clear();lcd.setCursor(0,0);lcd.print("Place your right");lcd.setCursor(0,1);lcd.print(" thumb again...");
     484:	8d ee       	ldi	r24, 0xED	; 237
     486:	95 e0       	ldi	r25, 0x05	; 5
     488:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	8d ee       	ldi	r24, 0xED	; 237
     492:	95 e0       	ldi	r25, 0x05	; 5
     494:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     498:	6d ef       	ldi	r22, 0xFD	; 253
     49a:	72 e0       	ldi	r23, 0x02	; 2
     49c:	8d ee       	ldi	r24, 0xED	; 237
     49e:	95 e0       	ldi	r25, 0x05	; 5
     4a0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     4a4:	41 e0       	ldi	r20, 0x01	; 1
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	8d ee       	ldi	r24, 0xED	; 237
     4aa:	95 e0       	ldi	r25, 0x05	; 5
     4ac:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     4b0:	6e e0       	ldi	r22, 0x0E	; 14
     4b2:	73 e0       	ldi	r23, 0x03	; 3
     4b4:	8d ee       	ldi	r24, 0xED	; 237
     4b6:	95 e0       	ldi	r25, 0x05	; 5
     4b8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>

  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
     4bc:	8f eb       	ldi	r24, 0xBF	; 191
     4be:	95 e0       	ldi	r25, 0x05	; 5
     4c0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN20Adafruit_Fingerprint8getImageEv>
     4c4:	c8 2f       	mov	r28, r24
    switch (p) {
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	a9 f0       	breq	.+42     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4ca:	40 f0       	brcs	.+16     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	69 f0       	breq	.+26     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4d0:	83 30       	cpi	r24, 0x03	; 3
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d4:	42 c0       	rjmp	.+132    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");Serial.println("errr");
      lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");Serial.println("errr");
     4d6:	64 e5       	ldi	r22, 0x54	; 84
     4d8:	72 e0       	ldi	r23, 0x02	; 2
     4da:	0e c0       	rjmp	.+28     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>

  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
     4dc:	68 e4       	ldi	r22, 0x48	; 72
     4de:	72 e0       	ldi	r23, 0x02	; 2
     4e0:	88 e1       	ldi	r24, 0x18	; 24
     4e2:	96 e0       	ldi	r25, 0x06	; 6
     4e4:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     4e8:	6c c0       	rjmp	.+216    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(".");
     4ea:	64 e5       	ldi	r22, 0x54	; 84
     4ec:	75 e0       	ldi	r23, 0x05	; 5
     4ee:	88 e1       	ldi	r24, 0x18	; 24
     4f0:	96 e0       	ldi	r25, 0x06	; 6
     4f2:	e2 cf       	rjmp	.-60     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");Serial.println("errr");
     4f4:	68 e9       	ldi	r22, 0x98	; 152
     4f6:	71 e0       	ldi	r23, 0x01	; 1
      lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");Serial.println("errr");
     4f8:	88 e1       	ldi	r24, 0x18	; 24
     4fa:	96 e0       	ldi	r25, 0x06	; 6
     4fc:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     500:	6e e9       	ldi	r22, 0x9E	; 158
     502:	72 e0       	ldi	r23, 0x02	; 2
     504:	88 e1       	ldi	r24, 0x18	; 24
     506:	96 e0       	ldi	r25, 0x06	; 6
     508:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
      lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
     50c:	8d ee       	ldi	r24, 0xED	; 237
     50e:	95 e0       	ldi	r25, 0x05	; 5
     510:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	8d ee       	ldi	r24, 0xED	; 237
     51a:	95 e0       	ldi	r25, 0x05	; 5
     51c:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     520:	63 ea       	ldi	r22, 0xA3	; 163
     522:	72 e0       	ldi	r23, 0x02	; 2
     524:	8d ee       	ldi	r24, 0xED	; 237
     526:	95 e0       	ldi	r25, 0x05	; 5
     528:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	8d ee       	ldi	r24, 0xED	; 237
     532:	95 e0       	ldi	r25, 0x05	; 5
     534:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     538:	61 eb       	ldi	r22, 0xB1	; 177
     53a:	72 e0       	ldi	r23, 0x02	; 2
     53c:	8d ee       	ldi	r24, 0xED	; 237
     53e:	95 e0       	ldi	r25, 0x05	; 5
     540:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     544:	60 ed       	ldi	r22, 0xD0	; 208
     546:	77 e0       	ldi	r23, 0x07	; 7
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     550:	8d ee       	ldi	r24, 0xED	; 237
     552:	95 e0       	ldi	r25, 0x05	; 5
     554:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
      break;
     558:	b1 cf       	rjmp	.-158    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
    default:
      Serial.println("Unknown error");Serial.println("errr");
     55a:	62 e6       	ldi	r22, 0x62	; 98
     55c:	72 e0       	ldi	r23, 0x02	; 2
     55e:	88 e1       	ldi	r24, 0x18	; 24
     560:	96 e0       	ldi	r25, 0x06	; 6
     562:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     566:	6e e9       	ldi	r22, 0x9E	; 158
     568:	72 e0       	ldi	r23, 0x02	; 2
     56a:	88 e1       	ldi	r24, 0x18	; 24
     56c:	96 e0       	ldi	r25, 0x06	; 6
     56e:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
      lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
     572:	8d ee       	ldi	r24, 0xED	; 237
     574:	95 e0       	ldi	r25, 0x05	; 5
     576:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	8d ee       	ldi	r24, 0xED	; 237
     580:	95 e0       	ldi	r25, 0x05	; 5
     582:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     586:	63 ea       	ldi	r22, 0xA3	; 163
     588:	72 e0       	ldi	r23, 0x02	; 2
     58a:	8d ee       	ldi	r24, 0xED	; 237
     58c:	95 e0       	ldi	r25, 0x05	; 5
     58e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	8d ee       	ldi	r24, 0xED	; 237
     598:	95 e0       	ldi	r25, 0x05	; 5
     59a:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     59e:	61 eb       	ldi	r22, 0xB1	; 177
     5a0:	72 e0       	ldi	r23, 0x02	; 2
     5a2:	8d ee       	ldi	r24, 0xED	; 237
     5a4:	95 e0       	ldi	r25, 0x05	; 5
     5a6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     5aa:	60 ed       	ldi	r22, 0xD0	; 208
     5ac:	77 e0       	ldi	r23, 0x07	; 7
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     5b6:	8d ee       	ldi	r24, 0xED	; 237
     5b8:	95 e0       	ldi	r25, 0x05	; 5
     5ba:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
  Serial.print("ID "); Serial.println(id);
  p = -1;
  Serial.println("Place same finger again");
    lcd.clear();lcd.setCursor(0,0);lcd.print("Place your right");lcd.setCursor(0,1);lcd.print(" thumb again...");

  while (p != FINGERPRINT_OK) {
     5be:	c1 11       	cpse	r28, r1
     5c0:	7d cf       	rjmp	.-262    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
    }
  }

  // OK success!

  p = finger.image2Tz(2);
     5c2:	62 e0       	ldi	r22, 0x02	; 2
     5c4:	8f eb       	ldi	r24, 0xBF	; 191
     5c6:	95 e0       	ldi	r25, 0x05	; 5
     5c8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN20Adafruit_Fingerprint8image2TzEh>
     5cc:	c8 2f       	mov	r28, r24
  switch (p) {
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	59 f1       	breq	.+86     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     5d2:	40 f4       	brcc	.+16     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5d4:	88 23       	and	r24, r24
     5d6:	59 f0       	breq	.+22     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
     5d8:	c1 30       	cpi	r28, 0x01	; 1
     5da:	09 f0       	breq	.+2      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5dc:	3e c1       	rjmp	.+636    	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");Serial.println("errr");
     lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");Serial.println("errr");
     5de:	68 e9       	ldi	r22, 0x98	; 152
     5e0:	71 e0       	ldi	r23, 0x01	; 1
     5e2:	3d c1       	rjmp	.+634    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
     5e4:	c7 30       	cpi	r28, 0x07	; 7
     5e6:	19 f1       	breq	.+70     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     5e8:	c5 31       	cpi	r28, 0x15	; 21
     5ea:	09 f1       	breq	.+66     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     5ec:	36 c1       	rjmp	.+620    	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
    case FINGERPRINT_OK:
      Serial.println("Image converted");
     5ee:	60 e7       	ldi	r22, 0x70	; 112
     5f0:	72 e0       	ldi	r23, 0x02	; 2
     5f2:	88 e1       	ldi	r24, 0x18	; 24
     5f4:	96 e0       	ldi	r25, 0x06	; 6
     5f6:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
      return p;
  }
  
  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);
     5fa:	6e e1       	ldi	r22, 0x1E	; 30
     5fc:	73 e0       	ldi	r23, 0x03	; 3
     5fe:	88 e1       	ldi	r24, 0x18	; 24
     600:	96 e0       	ldi	r25, 0x06	; 6
     602:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     606:	4a e0       	ldi	r20, 0x0A	; 10
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	60 91 be 05 	lds	r22, 0x05BE	; 0x8005be <__data_end>
     60e:	88 e1       	ldi	r24, 0x18	; 24
     610:	96 e0       	ldi	r25, 0x06	; 6
     612:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN5Print7printlnEhi>
  
  p = finger.createModel();
     616:	8f eb       	ldi	r24, 0xBF	; 191
     618:	95 e0       	ldi	r25, 0x05	; 5
     61a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_ZN20Adafruit_Fingerprint11createModelEv>
     61e:	c8 2f       	mov	r28, r24
     620:	90 e0       	ldi	r25, 0x00	; 0
  if (p == FINGERPRINT_OK) {
     622:	00 97       	sbiw	r24, 0x00	; 0
     624:	d1 f5       	brne	.+116    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     626:	06 c0       	rjmp	.+12     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");Serial.println("errr");
     628:	6e e8       	ldi	r22, 0x8E	; 142
     62a:	72 e0       	ldi	r23, 0x02	; 2
     62c:	18 c1       	rjmp	.+560    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");Serial.println("errr");
     lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");Serial.println("errr");
     62e:	6d eb       	ldi	r22, 0xBD	; 189
     630:	72 e0       	ldi	r23, 0x02	; 2
     632:	15 c1       	rjmp	.+554    	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
     634:	63 e3       	ldi	r22, 0x33	; 51
     636:	73 e0       	ldi	r23, 0x03	; 3
     638:	88 e1       	ldi	r24, 0x18	; 24
     63a:	96 e0       	ldi	r25, 0x06	; 6
     63c:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  } else {
    Serial.println("Unknown error");Serial.println("errr");
lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();    return p;
  }   
  
  Serial.print("ID "); Serial.println(id);
     640:	61 ee       	ldi	r22, 0xE1	; 225
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	88 e1       	ldi	r24, 0x18	; 24
     646:	96 e0       	ldi	r25, 0x06	; 6
     648:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     64c:	4a e0       	ldi	r20, 0x0A	; 10
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	60 91 be 05 	lds	r22, 0x05BE	; 0x8005be <__data_end>
     654:	88 e1       	ldi	r24, 0x18	; 24
     656:	96 e0       	ldi	r25, 0x06	; 6
     658:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN5Print7printlnEhi>
  p = finger.storeModel(id);
     65c:	60 91 be 05 	lds	r22, 0x05BE	; 0x8005be <__data_end>
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	8f eb       	ldi	r24, 0xBF	; 191
     664:	95 e0       	ldi	r25, 0x05	; 5
     666:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN20Adafruit_Fingerprint10storeModelEj>
     66a:	c8 2f       	mov	r28, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
  if (p == FINGERPRINT_OK) {
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	09 f0       	breq	.+2      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     672:	82 c0       	rjmp	.+260    	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
    Serial.println("Stored!");
     674:	6e e5       	ldi	r22, 0x5E	; 94
     676:	73 e0       	ldi	r23, 0x03	; 3
     678:	88 e1       	ldi	r24, 0x18	; 24
     67a:	96 e0       	ldi	r25, 0x06	; 6
     67c:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Success");delay(2000);lcd.clear();return true;
     680:	8d ee       	ldi	r24, 0xED	; 237
     682:	95 e0       	ldi	r25, 0x05	; 5
     684:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	8d ee       	ldi	r24, 0xED	; 237
     68e:	95 e0       	ldi	r25, 0x05	; 5
     690:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     694:	66 e6       	ldi	r22, 0x66	; 102
     696:	73 e0       	ldi	r23, 0x03	; 3
     698:	5f c0       	rjmp	.+190    	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
  Serial.print("Creating model for #");  Serial.println(id);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	91 05       	cpc	r25, r1
     69e:	29 f5       	brne	.+74     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
    Serial.println("Communication error");Serial.println("errr");
     6a0:	68 e9       	ldi	r22, 0x98	; 152
     6a2:	71 e0       	ldi	r23, 0x01	; 1
     6a4:	88 e1       	ldi	r24, 0x18	; 24
     6a6:	96 e0       	ldi	r25, 0x06	; 6
     6a8:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     6ac:	6e e9       	ldi	r22, 0x9E	; 158
     6ae:	72 e0       	ldi	r23, 0x02	; 2
     6b0:	88 e1       	ldi	r24, 0x18	; 24
     6b2:	96 e0       	ldi	r25, 0x06	; 6
     6b4:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
     6b8:	8d ee       	ldi	r24, 0xED	; 237
     6ba:	95 e0       	ldi	r25, 0x05	; 5
     6bc:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	8d ee       	ldi	r24, 0xED	; 237
     6c6:	95 e0       	ldi	r25, 0x05	; 5
     6c8:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     6cc:	63 ea       	ldi	r22, 0xA3	; 163
     6ce:	72 e0       	ldi	r23, 0x02	; 2
     6d0:	8d ee       	ldi	r24, 0xED	; 237
     6d2:	95 e0       	ldi	r25, 0x05	; 5
     6d4:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	8d ee       	ldi	r24, 0xED	; 237
     6de:	95 e0       	ldi	r25, 0x05	; 5
     6e0:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     6e4:	61 eb       	ldi	r22, 0xB1	; 177
     6e6:	72 e0       	ldi	r23, 0x02	; 2
     6e8:	37 c0       	rjmp	.+110    	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
     6ea:	0a 97       	sbiw	r24, 0x0a	; 10
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     6ee:	b5 c0       	rjmp	.+362    	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
    Serial.println("Fingerprints did not match");Serial.println("errr");
     6f0:	63 e4       	ldi	r22, 0x43	; 67
     6f2:	73 e0       	ldi	r23, 0x03	; 3
     6f4:	88 e1       	ldi	r24, 0x18	; 24
     6f6:	96 e0       	ldi	r25, 0x06	; 6
     6f8:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     6fc:	6e e9       	ldi	r22, 0x9E	; 158
     6fe:	72 e0       	ldi	r23, 0x02	; 2
     700:	88 e1       	ldi	r24, 0x18	; 24
     702:	96 e0       	ldi	r25, 0x06	; 6
     704:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();    return p;
     708:	8d ee       	ldi	r24, 0xED	; 237
     70a:	95 e0       	ldi	r25, 0x05	; 5
     70c:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	8d ee       	ldi	r24, 0xED	; 237
     716:	95 e0       	ldi	r25, 0x05	; 5
     718:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     71c:	63 ea       	ldi	r22, 0xA3	; 163
     71e:	72 e0       	ldi	r23, 0x02	; 2
     720:	8d ee       	ldi	r24, 0xED	; 237
     722:	95 e0       	ldi	r25, 0x05	; 5
     724:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	8d ee       	ldi	r24, 0xED	; 237
     72e:	95 e0       	ldi	r25, 0x05	; 5
     730:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     734:	61 eb       	ldi	r22, 0xB1	; 177
     736:	72 e0       	ldi	r23, 0x02	; 2
     738:	8d ee       	ldi	r24, 0xED	; 237
     73a:	95 e0       	ldi	r25, 0x05	; 5
     73c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     740:	60 ed       	ldi	r22, 0xD0	; 208
     742:	77 e0       	ldi	r23, 0x07	; 7
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     74c:	8d ee       	ldi	r24, 0xED	; 237
     74e:	95 e0       	ldi	r25, 0x05	; 5
     750:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     754:	ca e0       	ldi	r28, 0x0A	; 10
     756:	b3 c0       	rjmp	.+358    	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
  
  Serial.print("ID "); Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
    lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Success");delay(2000);lcd.clear();return true;
     758:	8d ee       	ldi	r24, 0xED	; 237
     75a:	95 e0       	ldi	r25, 0x05	; 5
     75c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     760:	60 ed       	ldi	r22, 0xD0	; 208
     762:	77 e0       	ldi	r23, 0x07	; 7
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     76c:	8d ee       	ldi	r24, 0xED	; 237
     76e:	95 e0       	ldi	r25, 0x05	; 5
     770:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     774:	c1 e0       	ldi	r28, 0x01	; 1
     776:	a3 c0       	rjmp	.+326    	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	91 05       	cpc	r25, r1
     77c:	09 f4       	brne	.+2      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
     77e:	90 cf       	rjmp	.-224    	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
    Serial.println("Communication error");Serial.println("errr");
    lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
     780:	8b 30       	cpi	r24, 0x0B	; 11
     782:	91 05       	cpc	r25, r1
     784:	a1 f5       	brne	.+104    	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
    Serial.println("Could not store in that location");Serial.println("errr");
     786:	65 e7       	ldi	r22, 0x75	; 117
     788:	73 e0       	ldi	r23, 0x03	; 3
     78a:	88 e1       	ldi	r24, 0x18	; 24
     78c:	96 e0       	ldi	r25, 0x06	; 6
     78e:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     792:	6e e9       	ldi	r22, 0x9E	; 158
     794:	72 e0       	ldi	r23, 0x02	; 2
     796:	88 e1       	ldi	r24, 0x18	; 24
     798:	96 e0       	ldi	r25, 0x06	; 6
     79a:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
     79e:	8d ee       	ldi	r24, 0xED	; 237
     7a0:	95 e0       	ldi	r25, 0x05	; 5
     7a2:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	8d ee       	ldi	r24, 0xED	; 237
     7ac:	95 e0       	ldi	r25, 0x05	; 5
     7ae:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7b2:	63 ea       	ldi	r22, 0xA3	; 163
     7b4:	72 e0       	ldi	r23, 0x02	; 2
     7b6:	8d ee       	ldi	r24, 0xED	; 237
     7b8:	95 e0       	ldi	r25, 0x05	; 5
     7ba:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     7be:	41 e0       	ldi	r20, 0x01	; 1
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	8d ee       	ldi	r24, 0xED	; 237
     7c4:	95 e0       	ldi	r25, 0x05	; 5
     7c6:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     7ca:	61 eb       	ldi	r22, 0xB1	; 177
     7cc:	72 e0       	ldi	r23, 0x02	; 2
     7ce:	8d ee       	ldi	r24, 0xED	; 237
     7d0:	95 e0       	ldi	r25, 0x05	; 5
     7d2:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     7d6:	60 ed       	ldi	r22, 0xD0	; 208
     7d8:	77 e0       	ldi	r23, 0x07	; 7
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     7e2:	8d ee       	ldi	r24, 0xED	; 237
     7e4:	95 e0       	ldi	r25, 0x05	; 5
     7e6:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
  return p;
     7ea:	cb e0       	ldi	r28, 0x0B	; 11
     7ec:	68 c0       	rjmp	.+208    	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
  } else if (p == FINGERPRINT_FLASHERR) {
     7ee:	48 97       	sbiw	r24, 0x18	; 24
     7f0:	a1 f5       	brne	.+104    	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
    Serial.println("Error writing to flash");Serial.println("errr");
     7f2:	6e ec       	ldi	r22, 0xCE	; 206
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	88 e1       	ldi	r24, 0x18	; 24
     7f8:	96 e0       	ldi	r25, 0x06	; 6
     7fa:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     7fe:	6e e9       	ldi	r22, 0x9E	; 158
     800:	72 e0       	ldi	r23, 0x02	; 2
     802:	88 e1       	ldi	r24, 0x18	; 24
     804:	96 e0       	ldi	r25, 0x06	; 6
     806:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();    
     80a:	8d ee       	ldi	r24, 0xED	; 237
     80c:	95 e0       	ldi	r25, 0x05	; 5
     80e:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	8d ee       	ldi	r24, 0xED	; 237
     818:	95 e0       	ldi	r25, 0x05	; 5
     81a:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     81e:	63 ea       	ldi	r22, 0xA3	; 163
     820:	72 e0       	ldi	r23, 0x02	; 2
     822:	8d ee       	ldi	r24, 0xED	; 237
     824:	95 e0       	ldi	r25, 0x05	; 5
     826:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     82a:	41 e0       	ldi	r20, 0x01	; 1
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	8d ee       	ldi	r24, 0xED	; 237
     830:	95 e0       	ldi	r25, 0x05	; 5
     832:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     836:	61 eb       	ldi	r22, 0xB1	; 177
     838:	72 e0       	ldi	r23, 0x02	; 2
     83a:	8d ee       	ldi	r24, 0xED	; 237
     83c:	95 e0       	ldi	r25, 0x05	; 5
     83e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     842:	60 ed       	ldi	r22, 0xD0	; 208
     844:	77 e0       	ldi	r23, 0x07	; 7
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     84e:	8d ee       	ldi	r24, 0xED	; 237
     850:	95 e0       	ldi	r25, 0x05	; 5
     852:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
    return p;
     856:	c8 e1       	ldi	r28, 0x18	; 24
     858:	32 c0       	rjmp	.+100    	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
  } else {
    Serial.println("Unknown error");Serial.println("errr");
     85a:	62 e6       	ldi	r22, 0x62	; 98
     85c:	72 e0       	ldi	r23, 0x02	; 2
     85e:	88 e1       	ldi	r24, 0x18	; 24
     860:	96 e0       	ldi	r25, 0x06	; 6
     862:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     866:	6e e9       	ldi	r22, 0x9E	; 158
     868:	72 e0       	ldi	r23, 0x02	; 2
     86a:	88 e1       	ldi	r24, 0x18	; 24
     86c:	96 e0       	ldi	r25, 0x06	; 6
     86e:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    lcd.clear();lcd.setCursor(0,0);lcd.print("Enroll Failed");lcd.setCursor(0, 1);lcd.print("  Try Again");delay(2000);lcd.clear();
     872:	8d ee       	ldi	r24, 0xED	; 237
     874:	95 e0       	ldi	r25, 0x05	; 5
     876:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	8d ee       	ldi	r24, 0xED	; 237
     880:	95 e0       	ldi	r25, 0x05	; 5
     882:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     886:	63 ea       	ldi	r22, 0xA3	; 163
     888:	72 e0       	ldi	r23, 0x02	; 2
     88a:	8d ee       	ldi	r24, 0xED	; 237
     88c:	95 e0       	ldi	r25, 0x05	; 5
     88e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	8d ee       	ldi	r24, 0xED	; 237
     898:	95 e0       	ldi	r25, 0x05	; 5
     89a:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     89e:	61 eb       	ldi	r22, 0xB1	; 177
     8a0:	72 e0       	ldi	r23, 0x02	; 2
     8a2:	8d ee       	ldi	r24, 0xED	; 237
     8a4:	95 e0       	ldi	r25, 0x05	; 5
     8a6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     8aa:	60 ed       	ldi	r22, 0xD0	; 208
     8ac:	77 e0       	ldi	r23, 0x07	; 7
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     8b6:	8d ee       	ldi	r24, 0xED	; 237
     8b8:	95 e0       	ldi	r25, 0x05	; 5
     8ba:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
    return p;
  }   
}
     8be:	8c 2f       	mov	r24, r28
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <_Z16getFingerprintIDv>:

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>SEARCH for PLACED FINGER<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//............................................................................................................................................................................................................................................................


uint8_t getFingerprintID() {
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <_Z16getFingerprintIDv+0xa>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <_Z16getFingerprintIDv+0xc>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <_Z16getFingerprintIDv+0xe>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
  uint8_t p = finger.getImage();
     8d8:	8f eb       	ldi	r24, 0xBF	; 191
     8da:	95 e0       	ldi	r25, 0x05	; 5
     8dc:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN20Adafruit_Fingerprint8getImageEv>
     8e0:	18 2f       	mov	r17, r24
  switch (p) {
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <_Z16getFingerprintIDv+0x22>
     8e6:	ab c0       	rjmp	.+342    	; 0xa3e <__stack+0x13f>
     8e8:	70 f0       	brcs	.+28     	; 0x906 <__stack+0x7>
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <_Z16getFingerprintIDv+0x2a>
     8ee:	9f c0       	rjmp	.+318    	; 0xa2e <__stack+0x12f>
     8f0:	83 30       	cpi	r24, 0x03	; 3
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <_Z16getFingerprintIDv+0x30>
     8f4:	ac c0       	rjmp	.+344    	; 0xa4e <__stack+0x14f>
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
     8f6:	64 e5       	ldi	r22, 0x54	; 84
     8f8:	72 e0       	ldi	r23, 0x02	; 2
     8fa:	88 e1       	ldi	r24, 0x18	; 24
     8fc:	96 e0       	ldi	r25, 0x06	; 6
     8fe:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
      return p;
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	24 c1       	rjmp	.+584    	; 0xb4e <__stack+0x24f>

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
     906:	68 e4       	ldi	r22, 0x48	; 72
     908:	72 e0       	ldi	r23, 0x02	; 2
     90a:	88 e1       	ldi	r24, 0x18	; 24
     90c:	96 e0       	ldi	r25, 0x06	; 6
     90e:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
      return p;
  }

  // OK success!

  p = finger.image2Tz();
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	8f eb       	ldi	r24, 0xBF	; 191
     916:	95 e0       	ldi	r25, 0x05	; 5
     918:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN20Adafruit_Fingerprint8image2TzEh>
     91c:	18 2f       	mov	r17, r24
  switch (p) {
     91e:	86 30       	cpi	r24, 0x06	; 6
     920:	09 f4       	brne	.+2      	; 0x924 <__stack+0x25>
     922:	45 c0       	rjmp	.+138    	; 0x9ae <__stack+0xaf>
     924:	30 f4       	brcc	.+12     	; 0x932 <__stack+0x33>
     926:	88 23       	and	r24, r24
     928:	91 f0       	breq	.+36     	; 0x94e <__stack+0x4f>
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	09 f4       	brne	.+2      	; 0x930 <__stack+0x31>
     92e:	87 c0       	rjmp	.+270    	; 0xa3e <__stack+0x13f>
     930:	8e c0       	rjmp	.+284    	; 0xa4e <__stack+0x14f>
     932:	87 30       	cpi	r24, 0x07	; 7
     934:	09 f4       	brne	.+2      	; 0x938 <__stack+0x39>
     936:	43 c0       	rjmp	.+134    	; 0x9be <__stack+0xbf>
     938:	85 31       	cpi	r24, 0x15	; 21
     93a:	09 f0       	breq	.+2      	; 0x93e <__stack+0x3f>
     93c:	88 c0       	rjmp	.+272    	; 0xa4e <__stack+0x14f>
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
     93e:	6d eb       	ldi	r22, 0xBD	; 189
     940:	72 e0       	ldi	r23, 0x02	; 2
     942:	88 e1       	ldi	r24, 0x18	; 24
     944:	96 e0       	ldi	r25, 0x06	; 6
     946:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     94a:	85 e1       	ldi	r24, 0x15	; 21
     94c:	00 c1       	rjmp	.+512    	; 0xb4e <__stack+0x24f>
  // OK success!

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
     94e:	60 e7       	ldi	r22, 0x70	; 112
     950:	72 e0       	ldi	r23, 0x02	; 2
     952:	88 e1       	ldi	r24, 0x18	; 24
     954:	96 e0       	ldi	r25, 0x06	; 6
     956:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
     95a:	8f eb       	ldi	r24, 0xBF	; 191
     95c:	95 e0       	ldi	r25, 0x05	; 5
     95e:	0e 94 99 10 	call	0x2132	; 0x2132 <_ZN20Adafruit_Fingerprint16fingerFastSearchEv>
     962:	18 2f       	mov	r17, r24
  if (p == FINGERPRINT_OK) {
     964:	81 11       	cpse	r24, r1
     966:	33 c0       	rjmp	.+102    	; 0x9ce <__stack+0xcf>
    Serial.println("Found a print match!");
     968:	66 e9       	ldi	r22, 0x96	; 150
     96a:	73 e0       	ldi	r23, 0x03	; 3
     96c:	88 e1       	ldi	r24, 0x18	; 24
     96e:	96 e0       	ldi	r25, 0x06	; 6
     970:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    Serial.println("Unknown error");
    return p;
  }   
  
  // found a match!
  Serial.println("Found ID #"); Serial.println(finger.fingerID);
     974:	6b ea       	ldi	r22, 0xAB	; 171
     976:	73 e0       	ldi	r23, 0x03	; 3
     978:	88 e1       	ldi	r24, 0x18	; 24
     97a:	96 e0       	ldi	r25, 0x06	; 6
     97c:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     980:	60 91 bf 05 	lds	r22, 0x05BF	; 0x8005bf <finger>
     984:	70 91 c0 05 	lds	r23, 0x05C0	; 0x8005c0 <finger+0x1>
     988:	4a e0       	ldi	r20, 0x0A	; 10
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	88 e1       	ldi	r24, 0x18	; 24
     98e:	96 e0       	ldi	r25, 0x06	; 6
     990:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN5Print7printlnEji>
  lcd.clear();
     994:	8d ee       	ldi	r24, 0xED	; 237
     996:	95 e0       	ldi	r25, 0x05	; 5
     998:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
  lcd.setCursor(0,0);
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	8d ee       	ldi	r24, 0xED	; 237
     9a2:	95 e0       	ldi	r25, 0x05	; 5
     9a4:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     9a8:	00 e1       	ldi	r16, 0x10	; 16
     9aa:	17 e2       	ldi	r17, 0x27	; 39
     9ac:	39 c0       	rjmp	.+114    	; 0xa20 <__stack+0x121>
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
     9ae:	6e e8       	ldi	r22, 0x8E	; 142
     9b0:	72 e0       	ldi	r23, 0x02	; 2
     9b2:	88 e1       	ldi	r24, 0x18	; 24
     9b4:	96 e0       	ldi	r25, 0x06	; 6
     9b6:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     9ba:	86 e0       	ldi	r24, 0x06	; 6
     9bc:	c8 c0       	rjmp	.+400    	; 0xb4e <__stack+0x24f>
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
     9be:	6d eb       	ldi	r22, 0xBD	; 189
     9c0:	72 e0       	ldi	r23, 0x02	; 2
     9c2:	88 e1       	ldi	r24, 0x18	; 24
     9c4:	96 e0       	ldi	r25, 0x06	; 6
     9c6:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     9ca:	87 e0       	ldi	r24, 0x07	; 7
     9cc:	c0 c0       	rjmp	.+384    	; 0xb4e <__stack+0x24f>
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	b1 f1       	breq	.+108    	; 0xa3e <__stack+0x13f>
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
     9d2:	89 30       	cpi	r24, 0x09	; 9
     9d4:	e1 f5       	brne	.+120    	; 0xa4e <__stack+0x14f>
    Serial.println("Did not find a match");
     9d6:	66 eb       	ldi	r22, 0xB6	; 182
     9d8:	73 e0       	ldi	r23, 0x03	; 3
     9da:	88 e1       	ldi	r24, 0x18	; 24
     9dc:	96 e0       	ldi	r25, 0x06	; 6
     9de:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
    lcd.clear();
     9e2:	8d ee       	ldi	r24, 0xED	; 237
     9e4:	95 e0       	ldi	r25, 0x05	; 5
     9e6:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
    lcd.setCursor(0,0);
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	8d ee       	ldi	r24, 0xED	; 237
     9f0:	95 e0       	ldi	r25, 0x05	; 5
     9f2:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd.print(" No Match found");
     9f6:	6b ec       	ldi	r22, 0xCB	; 203
     9f8:	73 e0       	ldi	r23, 0x03	; 3
     9fa:	8d ee       	ldi	r24, 0xED	; 237
     9fc:	95 e0       	ldi	r25, 0x05	; 5
     9fe:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
    delay(1000);lcd.clear(); 
     a02:	68 ee       	ldi	r22, 0xE8	; 232
     a04:	73 e0       	ldi	r23, 0x03	; 3
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     a0e:	8d ee       	ldi	r24, 0xED	; 237
     a10:	95 e0       	ldi	r25, 0x05	; 5
     a12:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     a16:	89 e0       	ldi	r24, 0x09	; 9
     a18:	9a c0       	rjmp	.+308    	; 0xb4e <__stack+0x24f>
     a1a:	01 50       	subi	r16, 0x01	; 1
     a1c:	11 09       	sbc	r17, r1
  
  // found a match!
  Serial.println("Found ID #"); Serial.println(finger.fingerID);
  lcd.clear();
  lcd.setCursor(0,0);
  for(int i=0;i<10000&&!Serial.available();i++);
     a1e:	f9 f0       	breq	.+62     	; 0xa5e <__stack+0x15f>
     a20:	88 e1       	ldi	r24, 0x18	; 24
     a22:	96 e0       	ldi	r25, 0x06	; 6
     a24:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN14HardwareSerial9availableEv>
     a28:	89 2b       	or	r24, r25
     a2a:	b9 f3       	breq	.-18     	; 0xa1a <__stack+0x11b>
     a2c:	18 c0       	rjmp	.+48     	; 0xa5e <__stack+0x15f>
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
     a2e:	6b ed       	ldi	r22, 0xDB	; 219
     a30:	73 e0       	ldi	r23, 0x03	; 3
     a32:	88 e1       	ldi	r24, 0x18	; 24
     a34:	96 e0       	ldi	r25, 0x06	; 6
     a36:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
      return p;
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	88 c0       	rjmp	.+272    	; 0xb4e <__stack+0x24f>
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
     a3e:	68 e9       	ldi	r22, 0x98	; 152
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	88 e1       	ldi	r24, 0x18	; 24
     a44:	96 e0       	ldi	r25, 0x06	; 6
     a46:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
      return p;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 c0       	rjmp	.+256    	; 0xb4e <__stack+0x24f>
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
     a4e:	62 e6       	ldi	r22, 0x62	; 98
     a50:	72 e0       	ldi	r23, 0x02	; 2
     a52:	88 e1       	ldi	r24, 0x18	; 24
     a54:	96 e0       	ldi	r25, 0x06	; 6
     a56:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>SEARCH for PLACED FINGER<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//............................................................................................................................................................................................................................................................


uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
     a5a:	81 2f       	mov	r24, r17
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
     a5c:	78 c0       	rjmp	.+240    	; 0xb4e <__stack+0x24f>
  // found a match!
  Serial.println("Found ID #"); Serial.println(finger.fingerID);
  lcd.clear();
  lcd.setCursor(0,0);
  for(int i=0;i<10000&&!Serial.available();i++);
  username = Serial.readString();
     a5e:	68 e1       	ldi	r22, 0x18	; 24
     a60:	76 e0       	ldi	r23, 0x06	; 6
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN6Stream10readStringEv>
     a6a:	be 01       	movw	r22, r28
     a6c:	6f 5f       	subi	r22, 0xFF	; 255
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	87 ee       	ldi	r24, 0xE7	; 231
     a72:	95 e0       	ldi	r25, 0x05	; 5
     a74:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN6StringaSEOS_>
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN6StringD1Ev>
  lcd.setCursor((16-(username.length()))/2,0);
     a80:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <username+0x4>
     a84:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <username+0x5>
     a88:	60 e1       	ldi	r22, 0x10	; 16
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	68 1b       	sub	r22, r24
     a8e:	79 0b       	sbc	r23, r25
     a90:	76 95       	lsr	r23
     a92:	67 95       	ror	r22
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	8d ee       	ldi	r24, 0xED	; 237
     a98:	95 e0       	ldi	r25, 0x05	; 5
     a9a:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(username);
     a9e:	67 ee       	ldi	r22, 0xE7	; 231
     aa0:	75 e0       	ldi	r23, 0x05	; 5
     aa2:	8d ee       	ldi	r24, 0xED	; 237
     aa4:	95 e0       	ldi	r25, 0x05	; 5
     aa6:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN5Print5printERK6String>
  lcd.setCursor(0,1);
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	8d ee       	ldi	r24, 0xED	; 237
     ab0:	95 e0       	ldi	r25, 0x05	; 5
     ab2:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(" ACCESS GRANTED");
     ab6:	6e ee       	ldi	r22, 0xEE	; 238
     ab8:	73 e0       	ldi	r23, 0x03	; 3
     aba:	8d ee       	ldi	r24, 0xED	; 237
     abc:	95 e0       	ldi	r25, 0x05	; 5
     abe:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
  digitalWrite(Lockpin,HIGH);  //Opening the relay to Lock
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Lockpin>
     ac8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
  digitalWrite(Ledpin,HIGH); //setting Led on
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ledpin>
     ad2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
  delay(1000);lcd.clear();lcd.setCursor(0,0);
     ad6:	68 ee       	ldi	r22, 0xE8	; 232
     ad8:	73 e0       	ldi	r23, 0x03	; 3
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     ae2:	8d ee       	ldi	r24, 0xED	; 237
     ae4:	95 e0       	ldi	r25, 0x05	; 5
     ae6:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	8d ee       	ldi	r24, 0xED	; 237
     af0:	95 e0       	ldi	r25, 0x05	; 5
     af2:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(" Door Unlocked");
     af6:	6e ef       	ldi	r22, 0xFE	; 254
     af8:	73 e0       	ldi	r23, 0x03	; 3
     afa:	8d ee       	ldi	r24, 0xED	; 237
     afc:	95 e0       	ldi	r25, 0x05	; 5
     afe:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
  delay(1000);digitalWrite(Lockpin,LOW);digitalWrite(Ledpin,LOW); //Relocking the door and led
     b02:	68 ee       	ldi	r22, 0xE8	; 232
     b04:	73 e0       	ldi	r23, 0x03	; 3
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Lockpin>
     b14:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ledpin>
     b1e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
  lcd.clear();
     b22:	8d ee       	ldi	r24, 0xED	; 237
     b24:	95 e0       	ldi	r25, 0x05	; 5
     b26:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
  Serial.print(" with confidence of "); Serial.println(finger.confidence); 
     b2a:	6d e0       	ldi	r22, 0x0D	; 13
     b2c:	74 e0       	ldi	r23, 0x04	; 4
     b2e:	88 e1       	ldi	r24, 0x18	; 24
     b30:	96 e0       	ldi	r25, 0x06	; 6
     b32:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     b36:	60 91 c1 05 	lds	r22, 0x05C1	; 0x8005c1 <finger+0x2>
     b3a:	70 91 c2 05 	lds	r23, 0x05C2	; 0x8005c2 <finger+0x3>
     b3e:	4a e0       	ldi	r20, 0x0A	; 10
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	96 e0       	ldi	r25, 0x06	; 6
     b46:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN5Print7printlnEji>

  return finger.fingerID;
     b4a:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <finger>
}
     b4e:	26 96       	adiw	r28, 0x06	; 6
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <loop>:
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MAIN LOOP<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//............................................................................................................................................................................................................................................................


void loop()         
{  
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <loop+0x8>
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <loop+0xa>
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <loop+0xc>
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
  if(! Serial.available())//SEARCH
     b74:	88 e1       	ldi	r24, 0x18	; 24
     b76:	96 e0       	ldi	r25, 0x06	; 6
     b78:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN14HardwareSerial9availableEv>
     b7c:	89 2b       	or	r24, r25
     b7e:	89 f5       	brne	.+98     	; 0xbe2 <loop+0x7e>
  {
  Serial.println("Waiting for valid finger...");
     b80:	62 e2       	ldi	r22, 0x22	; 34
     b82:	74 e0       	ldi	r23, 0x04	; 4
     b84:	88 e1       	ldi	r24, 0x18	; 24
     b86:	96 e0       	ldi	r25, 0x06	; 6
     b88:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  while(!Serial.available()){
     b8c:	88 e1       	ldi	r24, 0x18	; 24
     b8e:	96 e0       	ldi	r25, 0x06	; 6
     b90:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN14HardwareSerial9availableEv>
     b94:	89 2b       	or	r24, r25
     b96:	29 f5       	brne	.+74     	; 0xbe2 <loop+0x7e>
    lcd.clear();
     b98:	8d ee       	ldi	r24, 0xED	; 237
     b9a:	95 e0       	ldi	r25, 0x05	; 5
     b9c:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
    lcd.setCursor(0, 0);
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	8d ee       	ldi	r24, 0xED	; 237
     ba6:	95 e0       	ldi	r25, 0x05	; 5
     ba8:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd.print("   Place Your");lcd.setCursor(0, 1);lcd.print("  Right  Thumb");
     bac:	6e e3       	ldi	r22, 0x3E	; 62
     bae:	74 e0       	ldi	r23, 0x04	; 4
     bb0:	8d ee       	ldi	r24, 0xED	; 237
     bb2:	95 e0       	ldi	r25, 0x05	; 5
     bb4:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	8d ee       	ldi	r24, 0xED	; 237
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     bc4:	6c e4       	ldi	r22, 0x4C	; 76
     bc6:	74 e0       	ldi	r23, 0x04	; 4
     bc8:	8d ee       	ldi	r24, 0xED	; 237
     bca:	95 e0       	ldi	r25, 0x05	; 5
     bcc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
    getFingerprintID();
     bd0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_Z16getFingerprintIDv>
    delay(50);  //don't ned to run this at full speed.
     bd4:	62 e3       	ldi	r22, 0x32	; 50
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
void loop()         
{  
  if(! Serial.available())//SEARCH
  {
  Serial.println("Waiting for valid finger...");
  while(!Serial.available()){
     be0:	d5 cf       	rjmp	.-86     	; 0xb8c <loop+0x28>
    lcd.print("   Place Your");lcd.setCursor(0, 1);lcd.print("  Right  Thumb");
    getFingerprintID();
    delay(50);  //don't ned to run this at full speed.
  }
  }
  String command=Serial.readString();
     be2:	68 e1       	ldi	r22, 0x18	; 24
     be4:	76 e0       	ldi	r23, 0x06	; 6
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN6Stream10readStringEv>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     bee:	68 e2       	ldi	r22, 0x28	; 40
     bf0:	72 e0       	ldi	r23, 0x02	; 2
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZNK6String6equalsEPKc>
  
  
  //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ENROLL DELETE <<<<<<<<<<<<<<<
  
  
  if(command=="enroll")//ENROLL
     bfa:	88 23       	and	r24, r24
     bfc:	09 f4       	brne	.+2      	; 0xc00 <loop+0x9c>
     bfe:	64 c0       	rjmp	.+200    	; 0xcc8 <loop+0x164>
  {
  lcd.clear();lcd.setCursor(0,0);lcd.print("Enrolling begun");delay(10);
     c00:	8d ee       	ldi	r24, 0xED	; 237
     c02:	95 e0       	ldi	r25, 0x05	; 5
     c04:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	8d ee       	ldi	r24, 0xED	; 237
     c0e:	95 e0       	ldi	r25, 0x05	; 5
     c10:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     c14:	6b e5       	ldi	r22, 0x5B	; 91
     c16:	74 e0       	ldi	r23, 0x04	; 4
     c18:	8d ee       	ldi	r24, 0xED	; 237
     c1a:	95 e0       	ldi	r25, 0x05	; 5
     c1c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     c20:	6a e0       	ldi	r22, 0x0A	; 10
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
  Serial.println("backclose");delay(100);//////////////////////////////////??????????????????????????????
     c2c:	6b e6       	ldi	r22, 0x6B	; 107
     c2e:	74 e0       	ldi	r23, 0x04	; 4
     c30:	88 e1       	ldi	r24, 0x18	; 24
     c32:	96 e0       	ldi	r25, 0x06	; 6
     c34:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     c38:	64 e6       	ldi	r22, 0x64	; 100
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
  lcd.clear();lcd.setCursor(0,0);lcd.print("Entering details");delay(10);
     c44:	8d ee       	ldi	r24, 0xED	; 237
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	8d ee       	ldi	r24, 0xED	; 237
     c52:	95 e0       	ldi	r25, 0x05	; 5
     c54:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     c58:	65 e7       	ldi	r22, 0x75	; 117
     c5a:	74 e0       	ldi	r23, 0x04	; 4
     c5c:	8d ee       	ldi	r24, 0xED	; 237
     c5e:	95 e0       	ldi	r25, 0x05	; 5
     c60:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
     c64:	6a e0       	ldi	r22, 0x0A	; 10
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
  Serial.println("Ready to enroll a fingerprint!");
     c70:	66 e8       	ldi	r22, 0x86	; 134
     c72:	74 e0       	ldi	r23, 0x04	; 4
     c74:	88 e1       	ldi	r24, 0x18	; 24
     c76:	96 e0       	ldi	r25, 0x06	; 6
     c78:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  Serial.println("Please type in the ID # (from 1 to 127) you want to save this finger as...");
     c7c:	65 ea       	ldi	r22, 0xA5	; 165
     c7e:	74 e0       	ldi	r23, 0x04	; 4
     c80:	88 e1       	ldi	r24, 0x18	; 24
     c82:	96 e0       	ldi	r25, 0x06	; 6
     c84:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  Serial.println("typeid");
     c88:	60 ef       	ldi	r22, 0xF0	; 240
     c8a:	74 e0       	ldi	r23, 0x04	; 4
     c8c:	88 e1       	ldi	r24, 0x18	; 24
     c8e:	96 e0       	ldi	r25, 0x06	; 6
     c90:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  id = readnumber();
     c94:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_Z10readnumberv>
     c98:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <__data_end>
  if (id == 0) {// ID #0 not allowed, try again!
     c9c:	88 23       	and	r24, r24
     c9e:	09 f4       	brne	.+2      	; 0xca2 <loop+0x13e>
     ca0:	48 c0       	rjmp	.+144    	; 0xd32 <loop+0x1ce>
     return;
  }
  if(id==1313){return;}
  Serial.print("Enrolling ID #");
     ca2:	67 ef       	ldi	r22, 0xF7	; 247
     ca4:	74 e0       	ldi	r23, 0x04	; 4
     ca6:	88 e1       	ldi	r24, 0x18	; 24
     ca8:	96 e0       	ldi	r25, 0x06	; 6
     caa:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
  Serial.println(id);
     cae:	4a e0       	ldi	r20, 0x0A	; 10
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 91 be 05 	lds	r22, 0x05BE	; 0x8005be <__data_end>
     cb6:	88 e1       	ldi	r24, 0x18	; 24
     cb8:	96 e0       	ldi	r25, 0x06	; 6
     cba:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN5Print7printlnEhi>
  
  while (!  getFingerprintEnroll() );
     cbe:	0e 94 8d 01 	call	0x31a	; 0x31a <_Z20getFingerprintEnrollv>
     cc2:	88 23       	and	r24, r24
     cc4:	e1 f3       	breq	.-8      	; 0xcbe <loop+0x15a>
     cc6:	35 c0       	rjmp	.+106    	; 0xd32 <loop+0x1ce>
     cc8:	66 e0       	ldi	r22, 0x06	; 6
     cca:	75 e0       	ldi	r23, 0x05	; 5
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZNK6String6equalsEPKc>
  }
  //--------------------------------------------------------------------------------------------------------------
  
  
  else if(command=="delete")//DELETE
     cd4:	88 23       	and	r24, r24
     cd6:	69 f1       	breq	.+90     	; 0xd32 <loop+0x1ce>
  {
  Serial.println("backclose2");delay(1000);
     cd8:	6d e0       	ldi	r22, 0x0D	; 13
     cda:	75 e0       	ldi	r23, 0x05	; 5
     cdc:	88 e1       	ldi	r24, 0x18	; 24
     cde:	96 e0       	ldi	r25, 0x06	; 6
     ce0:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
     ce4:	68 ee       	ldi	r22, 0xE8	; 232
     ce6:	73 e0       	ldi	r23, 0x03	; 3
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
  Serial.println("Please type in the ID # (from 1 to 127) you want to delete...");
     cf0:	68 e1       	ldi	r22, 0x18	; 24
     cf2:	75 e0       	ldi	r23, 0x05	; 5
     cf4:	88 e1       	ldi	r24, 0x18	; 24
     cf6:	96 e0       	ldi	r25, 0x06	; 6
     cf8:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>
  Serial.println("deleteid");
     cfc:	66 e5       	ldi	r22, 0x56	; 86
     cfe:	75 e0       	ldi	r23, 0x05	; 5
     d00:	88 e1       	ldi	r24, 0x18	; 24
     d02:	96 e0       	ldi	r25, 0x06	; 6
     d04:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN5Print7printlnEPKc>

  uint8_t id = readnumber();
     d08:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_Z10readnumberv>
     d0c:	18 2f       	mov	r17, r24
  if (id == 0) {// ID #0 not allowed, try again!
     d0e:	88 23       	and	r24, r24
     d10:	81 f0       	breq	.+32     	; 0xd32 <loop+0x1ce>
     return;
  } if(id==1313){return;}

  Serial.print("Deleting ID #");
     d12:	6f e5       	ldi	r22, 0x5F	; 95
     d14:	75 e0       	ldi	r23, 0x05	; 5
     d16:	88 e1       	ldi	r24, 0x18	; 24
     d18:	96 e0       	ldi	r25, 0x06	; 6
     d1a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN5Print5printEPKc>
  Serial.println(id);
     d1e:	4a e0       	ldi	r20, 0x0A	; 10
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	61 2f       	mov	r22, r17
     d24:	88 e1       	ldi	r24, 0x18	; 24
     d26:	96 e0       	ldi	r25, 0x06	; 6
     d28:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN5Print7printlnEhi>
  
  deleteFingerprint(id);
     d2c:	81 2f       	mov	r24, r17
     d2e:	0e 94 20 01 	call	0x240	; 0x240 <_Z17deleteFingerprinth>
  Serial.println("Ready to enroll a fingerprint!");
  Serial.println("Please type in the ID # (from 1 to 127) you want to save this finger as...");
  Serial.println("typeid");
  id = readnumber();
  if (id == 0) {// ID #0 not allowed, try again!
     return;
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN6StringD1Ev>
  Serial.println(id);
  
  deleteFingerprint(id);
  }
    
}
     d3a:	26 96       	adiw	r28, 0x06	; 6
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	08 95       	ret

00000d4e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d4e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d50:	91 8d       	ldd	r25, Z+25	; 0x19
     d52:	22 8d       	ldd	r18, Z+26	; 0x1a
     d54:	89 2f       	mov	r24, r25
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	80 5c       	subi	r24, 0xC0	; 192
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	82 1b       	sub	r24, r18
     d5e:	91 09       	sbc	r25, r1
}
     d60:	8f 73       	andi	r24, 0x3F	; 63
     d62:	99 27       	eor	r25, r25
     d64:	08 95       	ret

00000d66 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d66:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d68:	91 8d       	ldd	r25, Z+25	; 0x19
     d6a:	82 8d       	ldd	r24, Z+26	; 0x1a
     d6c:	98 17       	cp	r25, r24
     d6e:	31 f0       	breq	.+12     	; 0xd7c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d70:	82 8d       	ldd	r24, Z+26	; 0x1a
     d72:	e8 0f       	add	r30, r24
     d74:	f1 1d       	adc	r31, r1
     d76:	85 8d       	ldd	r24, Z+29	; 0x1d
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d80:	08 95       	ret

00000d82 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d82:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d84:	91 8d       	ldd	r25, Z+25	; 0x19
     d86:	82 8d       	ldd	r24, Z+26	; 0x1a
     d88:	98 17       	cp	r25, r24
     d8a:	61 f0       	breq	.+24     	; 0xda4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d8c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d8e:	df 01       	movw	r26, r30
     d90:	a8 0f       	add	r26, r24
     d92:	b1 1d       	adc	r27, r1
     d94:	5d 96       	adiw	r26, 0x1d	; 29
     d96:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     d98:	92 8d       	ldd	r25, Z+26	; 0x1a
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	9f 73       	andi	r25, 0x3F	; 63
     d9e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     da8:	08 95       	ret

00000daa <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     daa:	fc 01       	movw	r30, r24
     dac:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     dae:	44 8d       	ldd	r20, Z+28	; 0x1c
     db0:	25 2f       	mov	r18, r21
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	84 2f       	mov	r24, r20
     db6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     db8:	82 1b       	sub	r24, r18
     dba:	93 0b       	sbc	r25, r19
     dbc:	54 17       	cp	r21, r20
     dbe:	10 f0       	brcs	.+4      	; 0xdc4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     dc0:	cf 96       	adiw	r24, 0x3f	; 63
     dc2:	08 95       	ret
  return tail - head - 1;
     dc4:	01 97       	sbiw	r24, 0x01	; 1
}
     dc6:	08 95       	ret

00000dc8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     dc8:	84 e4       	ldi	r24, 0x44	; 68
     dca:	98 e0       	ldi	r25, 0x08	; 8
     dcc:	89 2b       	or	r24, r25
     dce:	49 f0       	breq	.+18     	; 0xde2 <_Z14serialEventRunv+0x1a>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	89 2b       	or	r24, r25
     dd6:	29 f0       	breq	.+10     	; 0xde2 <_Z14serialEventRunv+0x1a>
     dd8:	0e 94 44 08 	call	0x1088	; 0x1088 <_Z17Serial0_availablev>
     ddc:	81 11       	cpse	r24, r1
     dde:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     de2:	08 95       	ret

00000de4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     de4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     de6:	84 8d       	ldd	r24, Z+28	; 0x1c
     de8:	df 01       	movw	r26, r30
     dea:	a8 0f       	add	r26, r24
     dec:	b1 1d       	adc	r27, r1
     dee:	a3 5a       	subi	r26, 0xA3	; 163
     df0:	bf 4f       	sbci	r27, 0xFF	; 255
     df2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     df4:	84 8d       	ldd	r24, Z+28	; 0x1c
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	8f 73       	andi	r24, 0x3F	; 63
     dfc:	99 27       	eor	r25, r25
     dfe:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     e00:	a6 89       	ldd	r26, Z+22	; 0x16
     e02:	b7 89       	ldd	r27, Z+23	; 0x17
     e04:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     e06:	a0 89       	ldd	r26, Z+16	; 0x10
     e08:	b1 89       	ldd	r27, Z+17	; 0x11
     e0a:	8c 91       	ld	r24, X
     e0c:	83 70       	andi	r24, 0x03	; 3
     e0e:	80 64       	ori	r24, 0x40	; 64
     e10:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     e12:	93 8d       	ldd	r25, Z+27	; 0x1b
     e14:	84 8d       	ldd	r24, Z+28	; 0x1c
     e16:	98 13       	cpse	r25, r24
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     e1a:	02 88       	ldd	r0, Z+18	; 0x12
     e1c:	f3 89       	ldd	r31, Z+19	; 0x13
     e1e:	e0 2d       	mov	r30, r0
     e20:	80 81       	ld	r24, Z
     e22:	8f 7d       	andi	r24, 0xDF	; 223
     e24:	80 83       	st	Z, r24
     e26:	08 95       	ret

00000e28 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ec 01       	movw	r28, r24
  _written = true;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e3a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e3e:	98 13       	cpse	r25, r24
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <_ZN14HardwareSerial5writeEh+0x24>
     e42:	e8 89       	ldd	r30, Y+16	; 0x10
     e44:	f9 89       	ldd	r31, Y+17	; 0x11
     e46:	80 81       	ld	r24, Z
     e48:	85 fd       	sbrc	r24, 5
     e4a:	26 c0       	rjmp	.+76     	; 0xe98 <_ZN14HardwareSerial5writeEh+0x70>
     e4c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e4e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     e50:	10 e0       	ldi	r17, 0x00	; 0
     e52:	0f 5f       	subi	r16, 0xFF	; 255
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	0f 73       	andi	r16, 0x3F	; 63
     e58:	11 27       	eor	r17, r17
     e5a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e5e:	e8 12       	cpse	r14, r24
     e60:	0c c0       	rjmp	.+24     	; 0xe7a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	07 fc       	sbrc	r0, 7
     e66:	fa cf       	rjmp	.-12     	; 0xe5c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e68:	e8 89       	ldd	r30, Y+16	; 0x10
     e6a:	f9 89       	ldd	r31, Y+17	; 0x11
     e6c:	80 81       	ld	r24, Z
     e6e:	85 ff       	sbrs	r24, 5
     e70:	f5 cf       	rjmp	.-22     	; 0xe5c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     e72:	ce 01       	movw	r24, r28
     e74:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e78:	f1 cf       	rjmp	.-30     	; 0xe5c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e7c:	fe 01       	movw	r30, r28
     e7e:	e8 0f       	add	r30, r24
     e80:	f1 1d       	adc	r31, r1
     e82:	e3 5a       	subi	r30, 0xA3	; 163
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e88:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e8a:	f8 94       	cli
    _tx_buffer_head = i;
     e8c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     e8e:	ea 89       	ldd	r30, Y+18	; 0x12
     e90:	fb 89       	ldd	r31, Y+19	; 0x13
     e92:	80 81       	ld	r24, Z
     e94:	80 62       	ori	r24, 0x20	; 32
     e96:	0a c0       	rjmp	.+20     	; 0xeac <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e98:	9f b7       	in	r25, 0x3f	; 63
     e9a:	f8 94       	cli
      *_udr = c;
     e9c:	ee 89       	ldd	r30, Y+22	; 0x16
     e9e:	ff 89       	ldd	r31, Y+23	; 0x17
     ea0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     ea2:	e8 89       	ldd	r30, Y+16	; 0x10
     ea4:	f9 89       	ldd	r31, Y+17	; 0x11
     ea6:	80 81       	ld	r24, Z
     ea8:	83 70       	andi	r24, 0x03	; 3
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     eae:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	08 95       	ret

00000ec2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     ec8:	88 8d       	ldd	r24, Y+24	; 0x18
     eca:	88 23       	and	r24, r24
     ecc:	c9 f0       	breq	.+50     	; 0xf00 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     ece:	ea 89       	ldd	r30, Y+18	; 0x12
     ed0:	fb 89       	ldd	r31, Y+19	; 0x13
     ed2:	80 81       	ld	r24, Z
     ed4:	85 fd       	sbrc	r24, 5
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <_ZN14HardwareSerial5flushEv+0x20>
     ed8:	a8 89       	ldd	r26, Y+16	; 0x10
     eda:	b9 89       	ldd	r27, Y+17	; 0x11
     edc:	8c 91       	ld	r24, X
     ede:	86 fd       	sbrc	r24, 6
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	07 fc       	sbrc	r0, 7
     ee6:	f5 cf       	rjmp	.-22     	; 0xed2 <_ZN14HardwareSerial5flushEv+0x10>
     ee8:	80 81       	ld	r24, Z
     eea:	85 ff       	sbrs	r24, 5
     eec:	f2 cf       	rjmp	.-28     	; 0xed2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     eee:	a8 89       	ldd	r26, Y+16	; 0x10
     ef0:	b9 89       	ldd	r27, Y+17	; 0x11
     ef2:	8c 91       	ld	r24, X
     ef4:	85 ff       	sbrs	r24, 5
     ef6:	ed cf       	rjmp	.-38     	; 0xed2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ef8:	ce 01       	movw	r24, r28
     efa:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     efe:	e7 cf       	rjmp	.-50     	; 0xece <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	ec 01       	movw	r28, r24
     f16:	6a 01       	movw	r12, r20
     f18:	7b 01       	movw	r14, r22
     f1a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f1c:	e8 89       	ldd	r30, Y+16	; 0x10
     f1e:	f9 89       	ldd	r31, Y+17	; 0x11
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f24:	41 15       	cp	r20, r1
     f26:	51 4e       	sbci	r21, 0xE1	; 225
     f28:	61 05       	cpc	r22, r1
     f2a:	71 05       	cpc	r23, r1
     f2c:	b1 f0       	breq	.+44     	; 0xf5a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	79 e0       	ldi	r23, 0x09	; 9
     f32:	8d e3       	ldi	r24, 0x3D	; 61
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a7 01       	movw	r20, r14
     f38:	96 01       	movw	r18, r12
     f3a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__udivmodsi4>
     f3e:	da 01       	movw	r26, r20
     f40:	c9 01       	movw	r24, r18
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	a1 09       	sbc	r26, r1
     f46:	b1 09       	sbc	r27, r1
     f48:	b6 95       	lsr	r27
     f4a:	a7 95       	ror	r26
     f4c:	97 95       	ror	r25
     f4e:	87 95       	ror	r24
     f50:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f52:	21 15       	cp	r18, r1
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	38 07       	cpc	r19, r24
     f58:	a8 f0       	brcs	.+42     	; 0xf84 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     f5a:	e8 89       	ldd	r30, Y+16	; 0x10
     f5c:	f9 89       	ldd	r31, Y+17	; 0x11
     f5e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f60:	60 e8       	ldi	r22, 0x80	; 128
     f62:	74 e8       	ldi	r23, 0x84	; 132
     f64:	8e e1       	ldi	r24, 0x1E	; 30
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a7 01       	movw	r20, r14
     f6a:	96 01       	movw	r18, r12
     f6c:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__udivmodsi4>
     f70:	da 01       	movw	r26, r20
     f72:	c9 01       	movw	r24, r18
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	b6 95       	lsr	r27
     f7c:	a7 95       	ror	r26
     f7e:	97 95       	ror	r25
     f80:	87 95       	ror	r24
     f82:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f84:	ec 85       	ldd	r30, Y+12	; 0x0c
     f86:	fd 85       	ldd	r31, Y+13	; 0x0d
     f88:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     f8a:	ee 85       	ldd	r30, Y+14	; 0x0e
     f8c:	ff 85       	ldd	r31, Y+15	; 0x0f
     f8e:	20 83       	st	Z, r18

  _written = false;
     f90:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f92:	ec 89       	ldd	r30, Y+20	; 0x14
     f94:	fd 89       	ldd	r31, Y+21	; 0x15
     f96:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     f98:	ea 89       	ldd	r30, Y+18	; 0x12
     f9a:	fb 89       	ldd	r31, Y+19	; 0x13
     f9c:	80 81       	ld	r24, Z
     f9e:	80 61       	ori	r24, 0x10	; 16
     fa0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     fa2:	ea 89       	ldd	r30, Y+18	; 0x12
     fa4:	fb 89       	ldd	r31, Y+19	; 0x13
     fa6:	80 81       	ld	r24, Z
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     fac:	ea 89       	ldd	r30, Y+18	; 0x12
     fae:	fb 89       	ldd	r31, Y+19	; 0x13
     fb0:	80 81       	ld	r24, Z
     fb2:	80 68       	ori	r24, 0x80	; 128
     fb4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     fb6:	ea 89       	ldd	r30, Y+18	; 0x12
     fb8:	fb 89       	ldd	r31, Y+19	; 0x13
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	80 83       	st	Z, r24
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	08 95       	ret

00000fd0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	08 95       	ret

00000fd6 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     fd6:	08 95       	ret

00000fd8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	ef 93       	push	r30
     fea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     fec:	e0 91 28 06 	lds	r30, 0x0628	; 0x800628 <Serial+0x10>
     ff0:	f0 91 29 06 	lds	r31, 0x0629	; 0x800629 <Serial+0x11>
     ff4:	80 81       	ld	r24, Z
     ff6:	e0 91 2e 06 	lds	r30, 0x062E	; 0x80062e <Serial+0x16>
     ffa:	f0 91 2f 06 	lds	r31, 0x062F	; 0x80062f <Serial+0x17>
     ffe:	82 fd       	sbrc	r24, 2
    1000:	12 c0       	rjmp	.+36     	; 0x1026 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1002:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1004:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <Serial+0x19>
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    100c:	20 91 32 06 	lds	r18, 0x0632	; 0x800632 <Serial+0x1a>
    1010:	82 17       	cp	r24, r18
    1012:	51 f0       	breq	.+20     	; 0x1028 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1014:	e0 91 31 06 	lds	r30, 0x0631	; 0x800631 <Serial+0x19>
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	e8 5e       	subi	r30, 0xE8	; 232
    101c:	f9 4f       	sbci	r31, 0xF9	; 249
    101e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1020:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <Serial+0x19>
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1026:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1028:	ff 91       	pop	r31
    102a:	ef 91       	pop	r30
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

0000103c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    105e:	88 e1       	ldi	r24, 0x18	; 24
    1060:	96 e0       	ldi	r25, 0x06	; 6
    1062:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1088:	88 e1       	ldi	r24, 0x18	; 24
    108a:	96 e0       	ldi	r25, 0x06	; 6
    108c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN14HardwareSerial9availableEv>
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	89 2b       	or	r24, r25
    1094:	09 f4       	brne	.+2      	; 0x1098 <_Z17Serial0_availablev+0x10>
    1096:	20 e0       	ldi	r18, 0x00	; 0
}
    1098:	82 2f       	mov	r24, r18
    109a:	08 95       	ret

0000109c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    109c:	e8 e1       	ldi	r30, 0x18	; 24
    109e:	f6 e0       	ldi	r31, 0x06	; 6
    10a0:	13 82       	std	Z+3, r1	; 0x03
    10a2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    10a4:	88 ee       	ldi	r24, 0xE8	; 232
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	84 83       	std	Z+4, r24	; 0x04
    10ae:	95 83       	std	Z+5, r25	; 0x05
    10b0:	a6 83       	std	Z+6, r26	; 0x06
    10b2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    10b4:	81 e7       	ldi	r24, 0x71	; 113
    10b6:	95 e0       	ldi	r25, 0x05	; 5
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
    10bc:	85 ec       	ldi	r24, 0xC5	; 197
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	95 87       	std	Z+13, r25	; 0x0d
    10c2:	84 87       	std	Z+12, r24	; 0x0c
    10c4:	84 ec       	ldi	r24, 0xC4	; 196
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	97 87       	std	Z+15, r25	; 0x0f
    10ca:	86 87       	std	Z+14, r24	; 0x0e
    10cc:	80 ec       	ldi	r24, 0xC0	; 192
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	91 8b       	std	Z+17, r25	; 0x11
    10d2:	80 8b       	std	Z+16, r24	; 0x10
    10d4:	81 ec       	ldi	r24, 0xC1	; 193
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	93 8b       	std	Z+19, r25	; 0x13
    10da:	82 8b       	std	Z+18, r24	; 0x12
    10dc:	82 ec       	ldi	r24, 0xC2	; 194
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	95 8b       	std	Z+21, r25	; 0x15
    10e2:	84 8b       	std	Z+20, r24	; 0x14
    10e4:	86 ec       	ldi	r24, 0xC6	; 198
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	97 8b       	std	Z+23, r25	; 0x17
    10ea:	86 8b       	std	Z+22, r24	; 0x16
    10ec:	11 8e       	std	Z+25, r1	; 0x19
    10ee:	12 8e       	std	Z+26, r1	; 0x1a
    10f0:	13 8e       	std	Z+27, r1	; 0x1b
    10f2:	14 8e       	std	Z+28, r1	; 0x1c
    10f4:	08 95       	ret

000010f6 <initVariant>:
    10f6:	08 95       	ret

000010f8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    10f8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <init>

	initVariant();
    10fc:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1100:	0e 94 98 00 	call	0x130	; 0x130 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1104:	c4 ee       	ldi	r28, 0xE4	; 228
    1106:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1108:	0e 94 b2 05 	call	0xb64	; 0xb64 <loop>
		if (serialEventRun) serialEventRun();
    110c:	20 97       	sbiw	r28, 0x00	; 0
    110e:	e1 f3       	breq	.-8      	; 0x1108 <main+0x10>
    1110:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z14serialEventRunv>
    1114:	f9 cf       	rjmp	.-14     	; 0x1108 <main+0x10>

00001116 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	6c 01       	movw	r12, r24
    1128:	7a 01       	movw	r14, r20
    112a:	8b 01       	movw	r16, r22
    112c:	c0 e0       	ldi	r28, 0x00	; 0
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	ce 15       	cp	r28, r14
    1132:	df 05       	cpc	r29, r15
    1134:	81 f0       	breq	.+32     	; 0x1156 <_ZN5Print5writeEPKhj+0x40>
    1136:	d8 01       	movw	r26, r16
    1138:	6d 91       	ld	r22, X+
    113a:	8d 01       	movw	r16, r26
    113c:	d6 01       	movw	r26, r12
    113e:	ed 91       	ld	r30, X+
    1140:	fc 91       	ld	r31, X
    1142:	01 90       	ld	r0, Z+
    1144:	f0 81       	ld	r31, Z
    1146:	e0 2d       	mov	r30, r0
    1148:	c6 01       	movw	r24, r12
    114a:	09 95       	icall
    114c:	89 2b       	or	r24, r25
    114e:	11 f0       	breq	.+4      	; 0x1154 <_ZN5Print5writeEPKhj+0x3e>
    1150:	21 96       	adiw	r28, 0x01	; 1
    1152:	ee cf       	rjmp	.-36     	; 0x1130 <_ZN5Print5writeEPKhj+0x1a>
    1154:	7e 01       	movw	r14, r28
    1156:	c7 01       	movw	r24, r14
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	08 95       	ret

0000116a <_ZN5Print5writeEPKc>:
    116a:	61 15       	cp	r22, r1
    116c:	71 05       	cpc	r23, r1
    116e:	79 f0       	breq	.+30     	; 0x118e <_ZN5Print5writeEPKc+0x24>
    1170:	fb 01       	movw	r30, r22
    1172:	01 90       	ld	r0, Z+
    1174:	00 20       	and	r0, r0
    1176:	e9 f7       	brne	.-6      	; 0x1172 <_ZN5Print5writeEPKc+0x8>
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	af 01       	movw	r20, r30
    117c:	46 1b       	sub	r20, r22
    117e:	57 0b       	sbc	r21, r23
    1180:	dc 01       	movw	r26, r24
    1182:	ed 91       	ld	r30, X+
    1184:	fc 91       	ld	r31, X
    1186:	02 80       	ldd	r0, Z+2	; 0x02
    1188:	f3 81       	ldd	r31, Z+3	; 0x03
    118a:	e0 2d       	mov	r30, r0
    118c:	09 94       	ijmp
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	08 95       	ret

00001194 <_ZN5Print5printERK6String>:
    1194:	db 01       	movw	r26, r22
    1196:	14 96       	adiw	r26, 0x04	; 4
    1198:	4d 91       	ld	r20, X+
    119a:	5c 91       	ld	r21, X
    119c:	15 97       	sbiw	r26, 0x05	; 5
    119e:	6d 91       	ld	r22, X+
    11a0:	7c 91       	ld	r23, X
    11a2:	dc 01       	movw	r26, r24
    11a4:	ed 91       	ld	r30, X+
    11a6:	fc 91       	ld	r31, X
    11a8:	02 80       	ldd	r0, Z+2	; 0x02
    11aa:	f3 81       	ldd	r31, Z+3	; 0x03
    11ac:	e0 2d       	mov	r30, r0
    11ae:	09 94       	ijmp

000011b0 <_ZN5Print5printEPKc>:
    11b0:	0c 94 b5 08 	jmp	0x116a	; 0x116a <_ZN5Print5writeEPKc>

000011b4 <_ZN5Print7printlnEv>:
    11b4:	6f e7       	ldi	r22, 0x7F	; 127
    11b6:	75 e0       	ldi	r23, 0x05	; 5
    11b8:	0c 94 b5 08 	jmp	0x116a	; 0x116a <_ZN5Print5writeEPKc>

000011bc <_ZN5Print7printlnEPKc>:
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
    11c6:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN5Print5writeEPKc>
    11ca:	8c 01       	movw	r16, r24
    11cc:	ce 01       	movw	r24, r28
    11ce:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN5Print7printlnEv>
    11d2:	80 0f       	add	r24, r16
    11d4:	91 1f       	adc	r25, r17
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    11e0:	8f 92       	push	r8
    11e2:	9f 92       	push	r9
    11e4:	af 92       	push	r10
    11e6:	bf 92       	push	r11
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	a1 97       	sbiw	r28, 0x21	; 33
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	7c 01       	movw	r14, r24
    1206:	fa 01       	movw	r30, r20
    1208:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    120a:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	08 f4       	brcc	.+2      	; 0x1212 <_ZN5Print11printNumberEmh+0x32>
    1210:	2a e0       	ldi	r18, 0x0A	; 10
    1212:	8e 01       	movw	r16, r28
    1214:	0f 5d       	subi	r16, 0xDF	; 223
    1216:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    1218:	82 2e       	mov	r8, r18
    121a:	91 2c       	mov	r9, r1
    121c:	a1 2c       	mov	r10, r1
    121e:	b1 2c       	mov	r11, r1
    1220:	bf 01       	movw	r22, r30
    1222:	a5 01       	movw	r20, r10
    1224:	94 01       	movw	r18, r8
    1226:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__udivmodsi4>
    n /= base;
    122a:	f9 01       	movw	r30, r18
    122c:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    122e:	01 50       	subi	r16, 0x01	; 1
    1230:	11 09       	sbc	r17, r1
    1232:	6a 30       	cpi	r22, 0x0A	; 10
    1234:	10 f4       	brcc	.+4      	; 0x123a <_ZN5Print11printNumberEmh+0x5a>
    1236:	60 5d       	subi	r22, 0xD0	; 208
    1238:	01 c0       	rjmp	.+2      	; 0x123c <_ZN5Print11printNumberEmh+0x5c>
    123a:	69 5c       	subi	r22, 0xC9	; 201
    123c:	d8 01       	movw	r26, r16
    123e:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1240:	23 2b       	or	r18, r19
    1242:	24 2b       	or	r18, r20
    1244:	25 2b       	or	r18, r21
    1246:	61 f7       	brne	.-40     	; 0x1220 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1248:	b8 01       	movw	r22, r16
    124a:	c7 01       	movw	r24, r14
    124c:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN5Print5writeEPKc>
}
    1250:	a1 96       	adiw	r28, 0x21	; 33
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	08 95       	ret

00001272 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1272:	21 15       	cp	r18, r1
    1274:	31 05       	cpc	r19, r1
    1276:	41 f4       	brne	.+16     	; 0x1288 <_ZN5Print5printEmi+0x16>
    1278:	dc 01       	movw	r26, r24
    127a:	ed 91       	ld	r30, X+
    127c:	fc 91       	ld	r31, X
    127e:	01 90       	ld	r0, Z+
    1280:	f0 81       	ld	r31, Z
    1282:	e0 2d       	mov	r30, r0
    1284:	64 2f       	mov	r22, r20
    1286:	09 94       	ijmp
  else return printNumber(n, base);
    1288:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <_ZN5Print11printNumberEmh>

0000128c <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    128c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    128e:	46 2f       	mov	r20, r22
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	0c 94 39 09 	jmp	0x1272	; 0x1272 <_ZN5Print5printEmi>

0000129a <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    12a4:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN5Print5printEhi>
    12a8:	8c 01       	movw	r16, r24
  n += println();
    12aa:	ce 01       	movw	r24, r28
    12ac:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN5Print7printlnEv>
  return n;
}
    12b0:	80 0f       	add	r24, r16
    12b2:	91 1f       	adc	r25, r17
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    12be:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    12c0:	ab 01       	movw	r20, r22
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	0c 94 39 09 	jmp	0x1272	; 0x1272 <_ZN5Print5printEmi>

000012ca <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    12d4:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN5Print5printEji>
    12d8:	8c 01       	movw	r16, r24
  n += println();
    12da:	ce 01       	movw	r24, r28
    12dc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN5Print7printlnEv>
  return n;
}
    12e0:	80 0f       	add	r24, r16
    12e2:	91 1f       	adc	r25, r17
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <_ZN6Stream9timedReadEv>:
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	ec 01       	movw	r28, r24
    12f8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <millis>
    12fc:	68 87       	std	Y+8, r22	; 0x08
    12fe:	79 87       	std	Y+9, r23	; 0x09
    1300:	8a 87       	std	Y+10, r24	; 0x0a
    1302:	9b 87       	std	Y+11, r25	; 0x0b
    1304:	e8 81       	ld	r30, Y
    1306:	f9 81       	ldd	r31, Y+1	; 0x01
    1308:	02 84       	ldd	r0, Z+10	; 0x0a
    130a:	f3 85       	ldd	r31, Z+11	; 0x0b
    130c:	e0 2d       	mov	r30, r0
    130e:	ce 01       	movw	r24, r28
    1310:	09 95       	icall
    1312:	97 ff       	sbrs	r25, 7
    1314:	17 c0       	rjmp	.+46     	; 0x1344 <_ZN6Stream9timedReadEv+0x56>
    1316:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <millis>
    131a:	08 85       	ldd	r16, Y+8	; 0x08
    131c:	19 85       	ldd	r17, Y+9	; 0x09
    131e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1320:	3b 85       	ldd	r19, Y+11	; 0x0b
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	80 1b       	sub	r24, r16
    1328:	91 0b       	sbc	r25, r17
    132a:	a2 0b       	sbc	r26, r18
    132c:	b3 0b       	sbc	r27, r19
    132e:	0c 81       	ldd	r16, Y+4	; 0x04
    1330:	1d 81       	ldd	r17, Y+5	; 0x05
    1332:	2e 81       	ldd	r18, Y+6	; 0x06
    1334:	3f 81       	ldd	r19, Y+7	; 0x07
    1336:	80 17       	cp	r24, r16
    1338:	91 07       	cpc	r25, r17
    133a:	a2 07       	cpc	r26, r18
    133c:	b3 07       	cpc	r27, r19
    133e:	10 f3       	brcs	.-60     	; 0x1304 <_ZN6Stream9timedReadEv+0x16>
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	9f ef       	ldi	r25, 0xFF	; 255
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <_ZN6Stream9timedPeekEv>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	ec 01       	movw	r28, r24
    1358:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <millis>
    135c:	68 87       	std	Y+8, r22	; 0x08
    135e:	79 87       	std	Y+9, r23	; 0x09
    1360:	8a 87       	std	Y+10, r24	; 0x0a
    1362:	9b 87       	std	Y+11, r25	; 0x0b
    1364:	e8 81       	ld	r30, Y
    1366:	f9 81       	ldd	r31, Y+1	; 0x01
    1368:	04 84       	ldd	r0, Z+12	; 0x0c
    136a:	f5 85       	ldd	r31, Z+13	; 0x0d
    136c:	e0 2d       	mov	r30, r0
    136e:	ce 01       	movw	r24, r28
    1370:	09 95       	icall
    1372:	97 ff       	sbrs	r25, 7
    1374:	17 c0       	rjmp	.+46     	; 0x13a4 <_ZN6Stream9timedPeekEv+0x56>
    1376:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <millis>
    137a:	08 85       	ldd	r16, Y+8	; 0x08
    137c:	19 85       	ldd	r17, Y+9	; 0x09
    137e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1380:	3b 85       	ldd	r19, Y+11	; 0x0b
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	80 1b       	sub	r24, r16
    1388:	91 0b       	sbc	r25, r17
    138a:	a2 0b       	sbc	r26, r18
    138c:	b3 0b       	sbc	r27, r19
    138e:	0c 81       	ldd	r16, Y+4	; 0x04
    1390:	1d 81       	ldd	r17, Y+5	; 0x05
    1392:	2e 81       	ldd	r18, Y+6	; 0x06
    1394:	3f 81       	ldd	r19, Y+7	; 0x07
    1396:	80 17       	cp	r24, r16
    1398:	91 07       	cpc	r25, r17
    139a:	a2 07       	cpc	r26, r18
    139c:	b3 07       	cpc	r27, r19
    139e:	10 f3       	brcs	.-60     	; 0x1364 <_ZN6Stream9timedPeekEv+0x16>
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	9f ef       	ldi	r25, 0xFF	; 255
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	08 95       	ret

000013ae <_ZN6Stream13peekNextDigitE13LookaheadModeb>:
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
    13b8:	16 2f       	mov	r17, r22
    13ba:	04 2f       	mov	r16, r20
    13bc:	ce 01       	movw	r24, r28
    13be:	0e 94 a7 09 	call	0x134e	; 0x134e <_ZN6Stream9timedPeekEv>
    13c2:	97 fd       	sbrc	r25, 7
    13c4:	2b c0       	rjmp	.+86     	; 0x141c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
    13c6:	8d 32       	cpi	r24, 0x2D	; 45
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f1       	breq	.+66     	; 0x140e <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x60>
    13cc:	9c 01       	movw	r18, r24
    13ce:	20 53       	subi	r18, 0x30	; 48
    13d0:	31 09       	sbc	r19, r1
    13d2:	2a 30       	cpi	r18, 0x0A	; 10
    13d4:	31 05       	cpc	r19, r1
    13d6:	10 f1       	brcs	.+68     	; 0x141c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
    13d8:	00 23       	and	r16, r16
    13da:	19 f0       	breq	.+6      	; 0x13e2 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x34>
    13dc:	8e 32       	cpi	r24, 0x2E	; 46
    13de:	91 05       	cpc	r25, r1
    13e0:	c1 f0       	breq	.+48     	; 0x1412 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x64>
    13e2:	11 30       	cpi	r17, 0x01	; 1
    13e4:	c9 f0       	breq	.+50     	; 0x1418 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
    13e6:	12 30       	cpi	r17, 0x02	; 2
    13e8:	51 f4       	brne	.+20     	; 0x13fe <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
    13ea:	8d 30       	cpi	r24, 0x0D	; 13
    13ec:	91 05       	cpc	r25, r1
    13ee:	39 f0       	breq	.+14     	; 0x13fe <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
    13f0:	24 f4       	brge	.+8      	; 0x13fa <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x4c>
    13f2:	09 97       	sbiw	r24, 0x09	; 9
    13f4:	02 97       	sbiw	r24, 0x02	; 2
    13f6:	18 f0       	brcs	.+6      	; 0x13fe <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x50>
    13f8:	0f c0       	rjmp	.+30     	; 0x1418 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
    13fa:	80 97       	sbiw	r24, 0x20	; 32
    13fc:	69 f4       	brne	.+26     	; 0x1418 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6a>
    13fe:	e8 81       	ld	r30, Y
    1400:	f9 81       	ldd	r31, Y+1	; 0x01
    1402:	02 84       	ldd	r0, Z+10	; 0x0a
    1404:	f3 85       	ldd	r31, Z+11	; 0x0b
    1406:	e0 2d       	mov	r30, r0
    1408:	ce 01       	movw	r24, r28
    140a:	09 95       	icall
    140c:	d7 cf       	rjmp	.-82     	; 0x13bc <_ZN6Stream13peekNextDigitE13LookaheadModeb+0xe>
    140e:	8d e2       	ldi	r24, 0x2D	; 45
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x66>
    1412:	8e e2       	ldi	r24, 0x2E	; 46
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6e>
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	9f ef       	ldi	r25, 0xFF	; 255
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <_ZN6Stream8parseIntE13LookaheadModec>:
    1426:	bf 92       	push	r11
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	8c 01       	movw	r16, r24
    143a:	c4 2f       	mov	r28, r20
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <_ZN6Stream13peekNextDigitE13LookaheadModeb>
    1442:	fc 01       	movw	r30, r24
    1444:	97 fd       	sbrc	r25, 7
    1446:	45 c0       	rjmp	.+138    	; 0x14d2 <_ZN6Stream8parseIntE13LookaheadModec+0xac>
    1448:	c1 2c       	mov	r12, r1
    144a:	d1 2c       	mov	r13, r1
    144c:	76 01       	movw	r14, r12
    144e:	b1 2c       	mov	r11, r1
    1450:	d0 e0       	ldi	r29, 0x00	; 0
    1452:	ec 17       	cp	r30, r28
    1454:	fd 07       	cpc	r31, r29
    1456:	09 f1       	breq	.+66     	; 0x149a <_ZN6Stream8parseIntE13LookaheadModec+0x74>
    1458:	ed 32       	cpi	r30, 0x2D	; 45
    145a:	f1 05       	cpc	r31, r1
    145c:	e1 f0       	breq	.+56     	; 0x1496 <_ZN6Stream8parseIntE13LookaheadModec+0x70>
    145e:	cf 01       	movw	r24, r30
    1460:	c0 97       	sbiw	r24, 0x30	; 48
    1462:	0a 97       	sbiw	r24, 0x0a	; 10
    1464:	d0 f4       	brcc	.+52     	; 0x149a <_ZN6Stream8parseIntE13LookaheadModec+0x74>
    1466:	aa e0       	ldi	r26, 0x0A	; 10
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	a7 01       	movw	r20, r14
    146c:	96 01       	movw	r18, r12
    146e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__muluhisi3>
    1472:	6f 01       	movw	r12, r30
    1474:	ff 0f       	add	r31, r31
    1476:	ee 08       	sbc	r14, r14
    1478:	ff 08       	sbc	r15, r15
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	8c 0d       	add	r24, r12
    1480:	9d 1d       	adc	r25, r13
    1482:	ae 1d       	adc	r26, r14
    1484:	bf 1d       	adc	r27, r15
    1486:	6c 01       	movw	r12, r24
    1488:	7d 01       	movw	r14, r26
    148a:	20 e3       	ldi	r18, 0x30	; 48
    148c:	c2 1a       	sub	r12, r18
    148e:	d1 08       	sbc	r13, r1
    1490:	e1 08       	sbc	r14, r1
    1492:	f1 08       	sbc	r15, r1
    1494:	02 c0       	rjmp	.+4      	; 0x149a <_ZN6Stream8parseIntE13LookaheadModec+0x74>
    1496:	bb 24       	eor	r11, r11
    1498:	b3 94       	inc	r11
    149a:	d8 01       	movw	r26, r16
    149c:	ed 91       	ld	r30, X+
    149e:	fc 91       	ld	r31, X
    14a0:	02 84       	ldd	r0, Z+10	; 0x0a
    14a2:	f3 85       	ldd	r31, Z+11	; 0x0b
    14a4:	e0 2d       	mov	r30, r0
    14a6:	c8 01       	movw	r24, r16
    14a8:	09 95       	icall
    14aa:	c8 01       	movw	r24, r16
    14ac:	0e 94 a7 09 	call	0x134e	; 0x134e <_ZN6Stream9timedPeekEv>
    14b0:	fc 01       	movw	r30, r24
    14b2:	c0 97       	sbiw	r24, 0x30	; 48
    14b4:	0a 97       	sbiw	r24, 0x0a	; 10
    14b6:	68 f2       	brcs	.-102    	; 0x1452 <_ZN6Stream8parseIntE13LookaheadModec+0x2c>
    14b8:	ce 17       	cp	r28, r30
    14ba:	df 07       	cpc	r29, r31
    14bc:	51 f2       	breq	.-108    	; 0x1452 <_ZN6Stream8parseIntE13LookaheadModec+0x2c>
    14be:	bb 20       	and	r11, r11
    14c0:	61 f0       	breq	.+24     	; 0x14da <_ZN6Stream8parseIntE13LookaheadModec+0xb4>
    14c2:	66 27       	eor	r22, r22
    14c4:	77 27       	eor	r23, r23
    14c6:	cb 01       	movw	r24, r22
    14c8:	6c 19       	sub	r22, r12
    14ca:	7d 09       	sbc	r23, r13
    14cc:	8e 09       	sbc	r24, r14
    14ce:	9f 09       	sbc	r25, r15
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <_ZN6Stream8parseIntE13LookaheadModec+0xb8>
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	cb 01       	movw	r24, r22
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <_ZN6Stream8parseIntE13LookaheadModec+0xb8>
    14da:	c7 01       	movw	r24, r14
    14dc:	b6 01       	movw	r22, r12
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	08 95       	ret

000014f2 <_ZN6Stream10readStringEv>:

String Stream::readString()
{
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	ec 01       	movw	r28, r24
    14fc:	8b 01       	movw	r16, r22
  String ret;
    14fe:	61 e8       	ldi	r22, 0x81	; 129
    1500:	75 e0       	ldi	r23, 0x05	; 5
    1502:	0e 94 93 0c 	call	0x1926	; 0x1926 <_ZN6StringC1EPKc>
  int c = timedRead();
    1506:	c8 01       	movw	r24, r16
    1508:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN6Stream9timedReadEv>
  while (c >= 0)
    150c:	97 fd       	sbrc	r25, 7
    150e:	05 c0       	rjmp	.+10     	; 0x151a <_ZN6Stream10readStringEv+0x28>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    1510:	68 2f       	mov	r22, r24
    1512:	ce 01       	movw	r24, r28
    1514:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_ZN6String6concatEc>
    1518:	f6 cf       	rjmp	.-20     	; 0x1506 <_ZN6Stream10readStringEv+0x14>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    151a:	ce 01       	movw	r24, r28
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	08 95       	ret

00001526 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	8f 93       	push	r24
    1536:	9f 93       	push	r25
    1538:	af 93       	push	r26
    153a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    153c:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <timer0_millis>
    1540:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <timer0_millis+0x1>
    1544:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <timer0_millis+0x2>
    1548:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    154c:	30 91 b5 06 	lds	r19, 0x06B5	; 0x8006b5 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1550:	23 e0       	ldi	r18, 0x03	; 3
    1552:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1554:	2d 37       	cpi	r18, 0x7D	; 125
    1556:	20 f4       	brcc	.+8      	; 0x1560 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	a1 1d       	adc	r26, r1
    155c:	b1 1d       	adc	r27, r1
    155e:	05 c0       	rjmp	.+10     	; 0x156a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1560:	26 e8       	ldi	r18, 0x86	; 134
    1562:	23 0f       	add	r18, r19
		m += 1;
    1564:	02 96       	adiw	r24, 0x02	; 2
    1566:	a1 1d       	adc	r26, r1
    1568:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    156a:	20 93 b5 06 	sts	0x06B5, r18	; 0x8006b5 <timer0_fract>
	timer0_millis = m;
    156e:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <timer0_millis>
    1572:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <timer0_millis+0x1>
    1576:	a0 93 b8 06 	sts	0x06B8, r26	; 0x8006b8 <timer0_millis+0x2>
    157a:	b0 93 b9 06 	sts	0x06B9, r27	; 0x8006b9 <timer0_millis+0x3>
	timer0_overflow_count++;
    157e:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <timer0_overflow_count>
    1582:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <timer0_overflow_count+0x1>
    1586:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <timer0_overflow_count+0x2>
    158a:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <timer0_overflow_count+0x3>
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	a1 1d       	adc	r26, r1
    1592:	b1 1d       	adc	r27, r1
    1594:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <timer0_overflow_count>
    1598:	90 93 bb 06 	sts	0x06BB, r25	; 0x8006bb <timer0_overflow_count+0x1>
    159c:	a0 93 bc 06 	sts	0x06BC, r26	; 0x8006bc <timer0_overflow_count+0x2>
    15a0:	b0 93 bd 06 	sts	0x06BD, r27	; 0x8006bd <timer0_overflow_count+0x3>
}
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    15ba:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    15bc:	f8 94       	cli
	m = timer0_millis;
    15be:	60 91 b6 06 	lds	r22, 0x06B6	; 0x8006b6 <timer0_millis>
    15c2:	70 91 b7 06 	lds	r23, 0x06B7	; 0x8006b7 <timer0_millis+0x1>
    15c6:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <timer0_millis+0x2>
    15ca:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <timer0_millis+0x3>
	SREG = oldSREG;
    15ce:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    15d0:	08 95       	ret

000015d2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    15d2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    15d4:	f8 94       	cli
	m = timer0_overflow_count;
    15d6:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <timer0_overflow_count>
    15da:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <timer0_overflow_count+0x1>
    15de:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <timer0_overflow_count+0x2>
    15e2:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    15e6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    15e8:	a8 9b       	sbis	0x15, 0	; 21
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <micros+0x24>
    15ec:	2f 3f       	cpi	r18, 0xFF	; 255
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <micros+0x24>
		m++;
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	a1 1d       	adc	r26, r1
    15f4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    15f6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    15f8:	ba 2f       	mov	r27, r26
    15fa:	a9 2f       	mov	r26, r25
    15fc:	98 2f       	mov	r25, r24
    15fe:	88 27       	eor	r24, r24
    1600:	82 0f       	add	r24, r18
    1602:	91 1d       	adc	r25, r1
    1604:	a1 1d       	adc	r26, r1
    1606:	b1 1d       	adc	r27, r1
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	42 e0       	ldi	r20, 0x02	; 2
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	4a 95       	dec	r20
    1618:	d1 f7       	brne	.-12     	; 0x160e <micros+0x3c>
}
    161a:	08 95       	ret

0000161c <delay>:

void delay(unsigned long ms)
{
    161c:	8f 92       	push	r8
    161e:	9f 92       	push	r9
    1620:	af 92       	push	r10
    1622:	bf 92       	push	r11
    1624:	cf 92       	push	r12
    1626:	df 92       	push	r13
    1628:	ef 92       	push	r14
    162a:	ff 92       	push	r15
    162c:	6b 01       	movw	r12, r22
    162e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1630:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <micros>
    1634:	4b 01       	movw	r8, r22
    1636:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1638:	c1 14       	cp	r12, r1
    163a:	d1 04       	cpc	r13, r1
    163c:	e1 04       	cpc	r14, r1
    163e:	f1 04       	cpc	r15, r1
    1640:	01 f1       	breq	.+64     	; 0x1682 <delay+0x66>
		yield();
    1642:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1646:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <micros>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	88 19       	sub	r24, r8
    1650:	99 09       	sbc	r25, r9
    1652:	aa 09       	sbc	r26, r10
    1654:	bb 09       	sbc	r27, r11
    1656:	88 3e       	cpi	r24, 0xE8	; 232
    1658:	93 40       	sbci	r25, 0x03	; 3
    165a:	a1 05       	cpc	r26, r1
    165c:	b1 05       	cpc	r27, r1
    165e:	60 f3       	brcs	.-40     	; 0x1638 <delay+0x1c>
			ms--;
    1660:	21 e0       	ldi	r18, 0x01	; 1
    1662:	c2 1a       	sub	r12, r18
    1664:	d1 08       	sbc	r13, r1
    1666:	e1 08       	sbc	r14, r1
    1668:	f1 08       	sbc	r15, r1
			start += 1000;
    166a:	88 ee       	ldi	r24, 0xE8	; 232
    166c:	88 0e       	add	r8, r24
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	98 1e       	adc	r9, r24
    1672:	a1 1c       	adc	r10, r1
    1674:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1676:	c1 14       	cp	r12, r1
    1678:	d1 04       	cpc	r13, r1
    167a:	e1 04       	cpc	r14, r1
    167c:	f1 04       	cpc	r15, r1
    167e:	19 f7       	brne	.-58     	; 0x1646 <delay+0x2a>
    1680:	db cf       	rjmp	.-74     	; 0x1638 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	bf 90       	pop	r11
    168c:	af 90       	pop	r10
    168e:	9f 90       	pop	r9
    1690:	8f 90       	pop	r8
    1692:	08 95       	ret

00001694 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	38 f0       	brcs	.+14     	; 0x16a8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    16a2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <delayMicroseconds+0x10>
    16a8:	08 95       	ret

000016aa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    16aa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    16ac:	84 b5       	in	r24, 0x24	; 36
    16ae:	82 60       	ori	r24, 0x02	; 2
    16b0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    16b2:	84 b5       	in	r24, 0x24	; 36
    16b4:	81 60       	ori	r24, 0x01	; 1
    16b6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    16b8:	85 b5       	in	r24, 0x25	; 37
    16ba:	82 60       	ori	r24, 0x02	; 2
    16bc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    16be:	85 b5       	in	r24, 0x25	; 37
    16c0:	81 60       	ori	r24, 0x01	; 1
    16c2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    16c4:	ee e6       	ldi	r30, 0x6E	; 110
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	81 60       	ori	r24, 0x01	; 1
    16cc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    16ce:	e1 e8       	ldi	r30, 0x81	; 129
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    16d4:	80 81       	ld	r24, Z
    16d6:	82 60       	ori	r24, 0x02	; 2
    16d8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    16da:	80 81       	ld	r24, Z
    16dc:	81 60       	ori	r24, 0x01	; 1
    16de:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    16e0:	e0 e8       	ldi	r30, 0x80	; 128
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	81 60       	ori	r24, 0x01	; 1
    16e8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    16ea:	e1 eb       	ldi	r30, 0xB1	; 177
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	84 60       	ori	r24, 0x04	; 4
    16f2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    16f4:	e0 eb       	ldi	r30, 0xB0	; 176
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	81 60       	ori	r24, 0x01	; 1
    16fc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    16fe:	ea e7       	ldi	r30, 0x7A	; 122
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	84 60       	ori	r24, 0x04	; 4
    1706:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1708:	80 81       	ld	r24, Z
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    170e:	80 81       	ld	r24, Z
    1710:	81 60       	ori	r24, 0x01	; 1
    1712:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1714:	80 81       	ld	r24, Z
    1716:	80 68       	ori	r24, 0x80	; 128
    1718:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    171a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    171e:	08 95       	ret

00001720 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	81 f0       	breq	.+32     	; 0x1744 <turnOffPWM+0x24>
    1724:	28 f4       	brcc	.+10     	; 0x1730 <turnOffPWM+0x10>
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	99 f0       	breq	.+38     	; 0x1750 <turnOffPWM+0x30>
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	a1 f0       	breq	.+40     	; 0x1756 <turnOffPWM+0x36>
    172e:	08 95       	ret
    1730:	87 30       	cpi	r24, 0x07	; 7
    1732:	a9 f0       	breq	.+42     	; 0x175e <turnOffPWM+0x3e>
    1734:	88 30       	cpi	r24, 0x08	; 8
    1736:	b9 f0       	breq	.+46     	; 0x1766 <turnOffPWM+0x46>
    1738:	84 30       	cpi	r24, 0x04	; 4
    173a:	d1 f4       	brne	.+52     	; 0x1770 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    173c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1740:	8f 7d       	andi	r24, 0xDF	; 223
    1742:	03 c0       	rjmp	.+6      	; 0x174a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1744:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1748:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    174a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    174e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1750:	84 b5       	in	r24, 0x24	; 36
    1752:	8f 77       	andi	r24, 0x7F	; 127
    1754:	02 c0       	rjmp	.+4      	; 0x175a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1756:	84 b5       	in	r24, 0x24	; 36
    1758:	8f 7d       	andi	r24, 0xDF	; 223
    175a:	84 bd       	out	0x24, r24	; 36
    175c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    175e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1762:	8f 77       	andi	r24, 0x7F	; 127
    1764:	03 c0       	rjmp	.+6      	; 0x176c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1766:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    176a:	8f 7d       	andi	r24, 0xDF	; 223
    176c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1770:	08 95       	ret

00001772 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	fc 01       	movw	r30, r24
    177a:	e2 57       	subi	r30, 0x72	; 114
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1780:	fc 01       	movw	r30, r24
    1782:	ee 55       	subi	r30, 0x5E	; 94
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1788:	88 23       	and	r24, r24
    178a:	61 f1       	breq	.+88     	; 0x17e4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	fc 01       	movw	r30, r24
    1794:	e6 53       	subi	r30, 0x36	; 54
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	c5 91       	lpm	r28, Z+
    179a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    179c:	fc 01       	movw	r30, r24
    179e:	e0 54       	subi	r30, 0x40	; 64
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	a5 91       	lpm	r26, Z+
    17a4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    17a6:	61 11       	cpse	r22, r1
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    17aa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17ac:	f8 94       	cli
		*reg &= ~bit;
    17ae:	88 81       	ld	r24, Y
    17b0:	20 95       	com	r18
    17b2:	82 23       	and	r24, r18
    17b4:	88 83       	st	Y, r24
		*out &= ~bit;
    17b6:	ec 91       	ld	r30, X
    17b8:	2e 23       	and	r18, r30
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17bc:	62 30       	cpi	r22, 0x02	; 2
    17be:	61 f4       	brne	.+24     	; 0x17d8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    17c0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17c2:	f8 94       	cli
		*reg &= ~bit;
    17c4:	88 81       	ld	r24, Y
    17c6:	32 2f       	mov	r19, r18
    17c8:	30 95       	com	r19
    17ca:	83 23       	and	r24, r19
    17cc:	88 83       	st	Y, r24
		*out |= bit;
    17ce:	ec 91       	ld	r30, X
    17d0:	2e 2b       	or	r18, r30
    17d2:	2c 93       	st	X, r18
		SREG = oldSREG;
    17d4:	9f bf       	out	0x3f, r25	; 63
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    17d8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    17da:	f8 94       	cli
		*reg |= bit;
    17dc:	e8 81       	ld	r30, Y
    17de:	2e 2b       	or	r18, r30
    17e0:	28 83       	st	Y, r18
		SREG = oldSREG;
    17e2:	8f bf       	out	0x3f, r24	; 63
	}
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	f9 01       	movw	r30, r18
    17f6:	e6 58       	subi	r30, 0x86	; 134
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    17fc:	f9 01       	movw	r30, r18
    17fe:	e2 57       	subi	r30, 0x72	; 114
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1804:	f9 01       	movw	r30, r18
    1806:	ee 55       	subi	r30, 0x5E	; 94
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    180c:	cc 23       	and	r28, r28
    180e:	c1 f0       	breq	.+48     	; 0x1840 <digitalWrite+0x56>
    1810:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1812:	81 11       	cpse	r24, r1
    1814:	0e 94 90 0b 	call	0x1720	; 0x1720 <turnOffPWM>

	out = portOutputRegister(port);
    1818:	ec 2f       	mov	r30, r28
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	e0 54       	subi	r30, 0x40	; 64
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	a5 91       	lpm	r26, Z+
    1826:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1828:	9f b7       	in	r25, 0x3f	; 63
	cli();
    182a:	f8 94       	cli

	if (val == LOW) {
    182c:	11 11       	cpse	r17, r1
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <digitalWrite+0x4e>
		*out &= ~bit;
    1830:	8c 91       	ld	r24, X
    1832:	d0 95       	com	r29
    1834:	d8 23       	and	r29, r24
    1836:	02 c0       	rjmp	.+4      	; 0x183c <digitalWrite+0x52>
	} else {
		*out |= bit;
    1838:	ec 91       	ld	r30, X
    183a:	de 2b       	or	r29, r30
    183c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    183e:	9f bf       	out	0x3f, r25	; 63
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	08 95       	ret

00001848 <_ZNK6String14StringIfHelperEv>:
}

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}
    1848:	08 95       	ret

0000184a <_ZN6StringD1Ev>:
    184a:	fc 01       	movw	r30, r24
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	0c 94 bd 18 	jmp	0x317a	; 0x317a <free>

00001854 <_ZN6String10invalidateEv>:
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ec 01       	movw	r28, r24
    185a:	88 81       	ld	r24, Y
    185c:	99 81       	ldd	r25, Y+1	; 0x01
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	11 f0       	breq	.+4      	; 0x1866 <_ZN6String10invalidateEv+0x12>
    1862:	0e 94 bd 18 	call	0x317a	; 0x317a <free>
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	18 82       	st	Y, r1
    186a:	1d 82       	std	Y+5, r1	; 0x05
    186c:	1c 82       	std	Y+4, r1	; 0x04
    186e:	1b 82       	std	Y+3, r1	; 0x03
    1870:	1a 82       	std	Y+2, r1	; 0x02
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <_ZN6String12changeBufferEj>:
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
    1882:	8b 01       	movw	r16, r22
    1884:	6f 5f       	subi	r22, 0xFF	; 255
    1886:	7f 4f       	sbci	r23, 0xFF	; 255
    1888:	88 81       	ld	r24, Y
    188a:	99 81       	ldd	r25, Y+1	; 0x01
    188c:	0e 94 46 19 	call	0x328c	; 0x328c <realloc>
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	31 f0       	breq	.+12     	; 0x18a0 <_ZN6String12changeBufferEj+0x28>
    1894:	99 83       	std	Y+1, r25	; 0x01
    1896:	88 83       	st	Y, r24
    1898:	1b 83       	std	Y+3, r17	; 0x03
    189a:	0a 83       	std	Y+2, r16	; 0x02
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <_ZN6String12changeBufferEj+0x2a>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret

000018ac <_ZN6String7reserveEj>:
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ec 01       	movw	r28, r24
    18b2:	88 81       	ld	r24, Y
    18b4:	99 81       	ldd	r25, Y+1	; 0x01
    18b6:	89 2b       	or	r24, r25
    18b8:	29 f0       	breq	.+10     	; 0x18c4 <_ZN6String7reserveEj+0x18>
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	86 17       	cp	r24, r22
    18c0:	97 07       	cpc	r25, r23
    18c2:	60 f4       	brcc	.+24     	; 0x18dc <_ZN6String7reserveEj+0x30>
    18c4:	ce 01       	movw	r24, r28
    18c6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <_ZN6String12changeBufferEj>
    18ca:	88 23       	and	r24, r24
    18cc:	41 f0       	breq	.+16     	; 0x18de <_ZN6String7reserveEj+0x32>
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	89 2b       	or	r24, r25
    18d4:	19 f4       	brne	.+6      	; 0x18dc <_ZN6String7reserveEj+0x30>
    18d6:	e8 81       	ld	r30, Y
    18d8:	f9 81       	ldd	r31, Y+1	; 0x01
    18da:	10 82       	st	Z, r1
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	08 95       	ret

000018e4 <_ZN6String4copyEPKcj>:
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	ec 01       	movw	r28, r24
    18f2:	7b 01       	movw	r14, r22
    18f4:	8a 01       	movw	r16, r20
    18f6:	ba 01       	movw	r22, r20
    18f8:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN6String7reserveEj>
    18fc:	81 11       	cpse	r24, r1
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <_ZN6String4copyEPKcj+0x24>
    1900:	ce 01       	movw	r24, r28
    1902:	0e 94 2a 0c 	call	0x1854	; 0x1854 <_ZN6String10invalidateEv>
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <_ZN6String4copyEPKcj+0x32>
    1908:	1d 83       	std	Y+5, r17	; 0x05
    190a:	0c 83       	std	Y+4, r16	; 0x04
    190c:	b7 01       	movw	r22, r14
    190e:	88 81       	ld	r24, Y
    1910:	99 81       	ldd	r25, Y+1	; 0x01
    1912:	0e 94 1e 1a 	call	0x343c	; 0x343c <strcpy>
    1916:	ce 01       	movw	r24, r28
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	08 95       	ret

00001926 <_ZN6StringC1EPKc>:
    1926:	fc 01       	movw	r30, r24
    1928:	11 82       	std	Z+1, r1	; 0x01
    192a:	10 82       	st	Z, r1
    192c:	13 82       	std	Z+3, r1	; 0x03
    192e:	12 82       	std	Z+2, r1	; 0x02
    1930:	15 82       	std	Z+5, r1	; 0x05
    1932:	14 82       	std	Z+4, r1	; 0x04
    1934:	61 15       	cp	r22, r1
    1936:	71 05       	cpc	r23, r1
    1938:	51 f0       	breq	.+20     	; 0x194e <_ZN6StringC1EPKc+0x28>
    193a:	fb 01       	movw	r30, r22
    193c:	01 90       	ld	r0, Z+
    193e:	00 20       	and	r0, r0
    1940:	e9 f7       	brne	.-6      	; 0x193c <_ZN6StringC1EPKc+0x16>
    1942:	31 97       	sbiw	r30, 0x01	; 1
    1944:	af 01       	movw	r20, r30
    1946:	46 1b       	sub	r20, r22
    1948:	57 0b       	sbc	r21, r23
    194a:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <_ZN6String4copyEPKcj>
    194e:	08 95       	ret

00001950 <_ZN6String4moveERS_>:
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	8c 01       	movw	r16, r24
    195a:	eb 01       	movw	r28, r22
    195c:	fc 01       	movw	r30, r24
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	d1 f0       	breq	.+52     	; 0x199a <_ZN6String4moveERS_+0x4a>
    1966:	68 81       	ld	r22, Y
    1968:	79 81       	ldd	r23, Y+1	; 0x01
    196a:	61 15       	cp	r22, r1
    196c:	71 05       	cpc	r23, r1
    196e:	99 f0       	breq	.+38     	; 0x1996 <_ZN6String4moveERS_+0x46>
    1970:	24 e2       	ldi	r18, 0x24	; 36
    1972:	3c e0       	ldi	r19, 0x0C	; 12
    1974:	23 2b       	or	r18, r19
    1976:	79 f0       	breq	.+30     	; 0x1996 <_ZN6String4moveERS_+0x46>
    1978:	42 81       	ldd	r20, Z+2	; 0x02
    197a:	53 81       	ldd	r21, Z+3	; 0x03
    197c:	2c 81       	ldd	r18, Y+4	; 0x04
    197e:	3d 81       	ldd	r19, Y+5	; 0x05
    1980:	42 17       	cp	r20, r18
    1982:	53 07       	cpc	r21, r19
    1984:	40 f0       	brcs	.+16     	; 0x1996 <_ZN6String4moveERS_+0x46>
    1986:	0e 94 1e 1a 	call	0x343c	; 0x343c <strcpy>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	f8 01       	movw	r30, r16
    1990:	95 83       	std	Z+5, r25	; 0x05
    1992:	84 83       	std	Z+4, r24	; 0x04
    1994:	13 c0       	rjmp	.+38     	; 0x19bc <_ZN6String4moveERS_+0x6c>
    1996:	0e 94 bd 18 	call	0x317a	; 0x317a <free>
    199a:	88 81       	ld	r24, Y
    199c:	99 81       	ldd	r25, Y+1	; 0x01
    199e:	f8 01       	movw	r30, r16
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	93 83       	std	Z+3, r25	; 0x03
    19aa:	82 83       	std	Z+2, r24	; 0x02
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	95 83       	std	Z+5, r25	; 0x05
    19b2:	84 83       	std	Z+4, r24	; 0x04
    19b4:	19 82       	std	Y+1, r1	; 0x01
    19b6:	18 82       	st	Y, r1
    19b8:	1b 82       	std	Y+3, r1	; 0x03
    19ba:	1a 82       	std	Y+2, r1	; 0x02
    19bc:	1d 82       	std	Y+5, r1	; 0x05
    19be:	1c 82       	std	Y+4, r1	; 0x04
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <_ZN6StringaSEOS_>:
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
    19d0:	86 17       	cp	r24, r22
    19d2:	97 07       	cpc	r25, r23
    19d4:	11 f0       	breq	.+4      	; 0x19da <_ZN6StringaSEOS_+0x10>
    19d6:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN6String4moveERS_>
    19da:	ce 01       	movw	r24, r28
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <_ZN6String6concatEPKcj>:
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	61 15       	cp	r22, r1
    19f0:	71 05       	cpc	r23, r1
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <_ZN6String6concatEPKcj+0x16>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	1c c0       	rjmp	.+56     	; 0x1a30 <_ZN6String6concatEPKcj+0x4e>
    19f8:	41 15       	cp	r20, r1
    19fa:	51 05       	cpc	r21, r1
    19fc:	c1 f0       	breq	.+48     	; 0x1a2e <_ZN6String6concatEPKcj+0x4c>
    19fe:	7b 01       	movw	r14, r22
    1a00:	ec 01       	movw	r28, r24
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	9d 81       	ldd	r25, Y+5	; 0x05
    1a06:	8a 01       	movw	r16, r20
    1a08:	08 0f       	add	r16, r24
    1a0a:	19 1f       	adc	r17, r25
    1a0c:	b8 01       	movw	r22, r16
    1a0e:	ce 01       	movw	r24, r28
    1a10:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN6String7reserveEj>
    1a14:	88 23       	and	r24, r24
    1a16:	71 f3       	breq	.-36     	; 0x19f4 <_ZN6String6concatEPKcj+0x12>
    1a18:	28 81       	ld	r18, Y
    1a1a:	39 81       	ldd	r19, Y+1	; 0x01
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	b7 01       	movw	r22, r14
    1a22:	82 0f       	add	r24, r18
    1a24:	93 1f       	adc	r25, r19
    1a26:	0e 94 1e 1a 	call	0x343c	; 0x343c <strcpy>
    1a2a:	1d 83       	std	Y+5, r17	; 0x05
    1a2c:	0c 83       	std	Y+4, r16	; 0x04
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	08 95       	ret

00001a3e <_ZN6String6concatEc>:
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <_ZN6String6concatEc+0x6>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	69 83       	std	Y+1, r22	; 0x01
    1a4a:	1a 82       	std	Y+2, r1	; 0x02
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	be 01       	movw	r22, r28
    1a52:	6f 5f       	subi	r22, 0xFF	; 255
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_ZN6String6concatEPKcj>
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    1a64:	fc 01       	movw	r30, r24
    1a66:	24 81       	ldd	r18, Z+4	; 0x04
    1a68:	35 81       	ldd	r19, Z+5	; 0x05
    1a6a:	23 2b       	or	r18, r19
    1a6c:	31 f4       	brne	.+12     	; 0x1a7a <_ZNK6String6equalsEPKc+0x16>
    1a6e:	21 e0       	ldi	r18, 0x01	; 1
    1a70:	61 15       	cp	r22, r1
    1a72:	71 05       	cpc	r23, r1
    1a74:	a1 f0       	breq	.+40     	; 0x1a9e <_ZNK6String6equalsEPKc+0x3a>
    1a76:	fb 01       	movw	r30, r22
    1a78:	08 c0       	rjmp	.+16     	; 0x1a8a <_ZNK6String6equalsEPKc+0x26>
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
	if (cstr == NULL) return buffer[0] == 0;
    1a80:	61 15       	cp	r22, r1
    1a82:	71 05       	cpc	r23, r1
    1a84:	31 f4       	brne	.+12     	; 0x1a92 <_ZNK6String6equalsEPKc+0x2e>
    1a86:	21 e0       	ldi	r18, 0x01	; 1
    1a88:	fc 01       	movw	r30, r24
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 23       	and	r24, r24
    1a8e:	39 f0       	breq	.+14     	; 0x1a9e <_ZNK6String6equalsEPKc+0x3a>
    1a90:	05 c0       	rjmp	.+10     	; 0x1a9c <_ZNK6String6equalsEPKc+0x38>
	return strcmp(buffer, cstr) == 0;
    1a92:	0e 94 15 1a 	call	0x342a	; 0x342a <strcmp>
    1a96:	21 e0       	ldi	r18, 0x01	; 1
    1a98:	89 2b       	or	r24, r25
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <_ZNK6String6equalsEPKc+0x3a>
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
}
    1a9e:	82 2f       	mov	r24, r18
    1aa0:	08 95       	ret

00001aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>:
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
*/
uint8_t Adafruit_Fingerprint::emptyDatabase(void) {
  SEND_CMD_PACKET(FINGERPRINT_EMPTY);
}
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	9f ee       	ldi	r25, 0xEF	; 239
    1aa8:	11 96       	adiw	r26, 0x01	; 1
    1aaa:	9c 93       	st	X, r25
    1aac:	8e 93       	st	-X, r24
    1aae:	16 96       	adiw	r26, 0x06	; 6
    1ab0:	6c 93       	st	X, r22
    1ab2:	16 97       	sbiw	r26, 0x06	; 6
    1ab4:	18 96       	adiw	r26, 0x08	; 8
    1ab6:	5c 93       	st	X, r21
    1ab8:	4e 93       	st	-X, r20
    1aba:	17 97       	sbiw	r26, 0x07	; 7
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	12 96       	adiw	r26, 0x02	; 2
    1ac0:	8c 93       	st	X, r24
    1ac2:	12 97       	sbiw	r26, 0x02	; 2
    1ac4:	13 96       	adiw	r26, 0x03	; 3
    1ac6:	8c 93       	st	X, r24
    1ac8:	13 97       	sbiw	r26, 0x03	; 3
    1aca:	14 96       	adiw	r26, 0x04	; 4
    1acc:	8c 93       	st	X, r24
    1ace:	14 97       	sbiw	r26, 0x04	; 4
    1ad0:	15 96       	adiw	r26, 0x05	; 5
    1ad2:	8c 93       	st	X, r24
    1ad4:	15 97       	sbiw	r26, 0x05	; 5
    1ad6:	19 96       	adiw	r26, 0x09	; 9
    1ad8:	40 34       	cpi	r20, 0x40	; 64
    1ada:	51 05       	cpc	r21, r1
    1adc:	20 f4       	brcc	.+8      	; 0x1ae6 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh+0x44>
    1ade:	b9 01       	movw	r22, r18
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <memcpy>
    1ae6:	80 e4       	ldi	r24, 0x40	; 64
    1ae8:	f9 01       	movw	r30, r18
    1aea:	01 90       	ld	r0, Z+
    1aec:	0d 92       	st	X+, r0
    1aee:	8a 95       	dec	r24
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <_ZN27Adafruit_Fingerprint_PacketC1EhjPh+0x48>
    1af2:	08 95       	ret

00001af4 <_ZN20Adafruit_FingerprintC1EP14SoftwareSerialm>:
    1af4:	fc 01       	movw	r30, r24
    1af6:	26 83       	std	Z+6, r18	; 0x06
    1af8:	37 83       	std	Z+7, r19	; 0x07
    1afa:	40 87       	std	Z+8, r20	; 0x08
    1afc:	51 87       	std	Z+9, r21	; 0x09
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    1b00:	9f ef       	ldi	r25, 0xFF	; 255
    1b02:	dc 01       	movw	r26, r24
    1b04:	82 87       	std	Z+10, r24	; 0x0a
    1b06:	93 87       	std	Z+11, r25	; 0x0b
    1b08:	a4 87       	std	Z+12, r26	; 0x0c
    1b0a:	b5 87       	std	Z+13, r27	; 0x0d
    1b0c:	17 a2       	std	Z+39, r1	; 0x27
    1b0e:	16 a2       	std	Z+38, r1	; 0x26
    1b10:	75 a3       	std	Z+37, r23	; 0x25
    1b12:	64 a3       	std	Z+36, r22	; 0x24
    1b14:	73 a3       	std	Z+35, r23	; 0x23
    1b16:	62 a3       	std	Z+34, r22	; 0x22
    1b18:	08 95       	ret

00001b1a <_ZN20Adafruit_Fingerprint5beginEm>:
    1b1a:	cf 92       	push	r12
    1b1c:	df 92       	push	r13
    1b1e:	ef 92       	push	r14
    1b20:	ff 92       	push	r15
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	ec 01       	movw	r28, r24
    1b28:	6a 01       	movw	r12, r20
    1b2a:	7b 01       	movw	r14, r22
    1b2c:	68 ee       	ldi	r22, 0xE8	; 232
    1b2e:	73 e0       	ldi	r23, 0x03	; 3
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
    1b38:	8e a1       	ldd	r24, Y+38	; 0x26
    1b3a:	9f a1       	ldd	r25, Y+39	; 0x27
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <_ZN20Adafruit_Fingerprint5beginEm+0x30>
    1b40:	26 e0       	ldi	r18, 0x06	; 6
    1b42:	b7 01       	movw	r22, r14
    1b44:	a6 01       	movw	r20, r12
    1b46:	0e 94 83 07 	call	0xf06	; 0xf06 <_ZN14HardwareSerial5beginEmh>
    1b4a:	8c a1       	ldd	r24, Y+36	; 0x24
    1b4c:	9d a1       	ldd	r25, Y+37	; 0x25
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	51 f0       	breq	.+20     	; 0x1b66 <_ZN20Adafruit_Fingerprint5beginEm+0x4c>
    1b52:	b7 01       	movw	r22, r14
    1b54:	a6 01       	movw	r20, r12
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
    1b5e:	df 90       	pop	r13
    1b60:	cf 90       	pop	r12
    1b62:	0c 94 26 14 	jmp	0x284c	; 0x284c <_ZN14SoftwareSerial5beginEl>
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	08 95       	ret

00001b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>:
    1b74:	bf 92       	push	r11
    1b76:	cf 92       	push	r12
    1b78:	df 92       	push	r13
    1b7a:	ef 92       	push	r14
    1b7c:	ff 92       	push	r15
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	ec 01       	movw	r28, r24
    1b88:	8b 01       	movw	r16, r22
    1b8a:	8a a1       	ldd	r24, Y+34	; 0x22
    1b8c:	9b a1       	ldd	r25, Y+35	; 0x23
    1b8e:	db 01       	movw	r26, r22
    1b90:	11 96       	adiw	r26, 0x01	; 1
    1b92:	6c 91       	ld	r22, X
    1b94:	dc 01       	movw	r26, r24
    1b96:	ed 91       	ld	r30, X+
    1b98:	fc 91       	ld	r31, X
    1b9a:	01 90       	ld	r0, Z+
    1b9c:	f0 81       	ld	r31, Z
    1b9e:	e0 2d       	mov	r30, r0
    1ba0:	09 95       	icall
    1ba2:	8a a1       	ldd	r24, Y+34	; 0x22
    1ba4:	9b a1       	ldd	r25, Y+35	; 0x23
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	ed 91       	ld	r30, X+
    1baa:	fc 91       	ld	r31, X
    1bac:	01 90       	ld	r0, Z+
    1bae:	f0 81       	ld	r31, Z
    1bb0:	e0 2d       	mov	r30, r0
    1bb2:	d8 01       	movw	r26, r16
    1bb4:	6c 91       	ld	r22, X
    1bb6:	09 95       	icall
    1bb8:	8a a1       	ldd	r24, Y+34	; 0x22
    1bba:	9b a1       	ldd	r25, Y+35	; 0x23
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	ed 91       	ld	r30, X+
    1bc0:	fc 91       	ld	r31, X
    1bc2:	01 90       	ld	r0, Z+
    1bc4:	f0 81       	ld	r31, Z
    1bc6:	e0 2d       	mov	r30, r0
    1bc8:	d8 01       	movw	r26, r16
    1bca:	12 96       	adiw	r26, 0x02	; 2
    1bcc:	6c 91       	ld	r22, X
    1bce:	09 95       	icall
    1bd0:	8a a1       	ldd	r24, Y+34	; 0x22
    1bd2:	9b a1       	ldd	r25, Y+35	; 0x23
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	ed 91       	ld	r30, X+
    1bd8:	fc 91       	ld	r31, X
    1bda:	01 90       	ld	r0, Z+
    1bdc:	f0 81       	ld	r31, Z
    1bde:	e0 2d       	mov	r30, r0
    1be0:	d8 01       	movw	r26, r16
    1be2:	13 96       	adiw	r26, 0x03	; 3
    1be4:	6c 91       	ld	r22, X
    1be6:	09 95       	icall
    1be8:	8a a1       	ldd	r24, Y+34	; 0x22
    1bea:	9b a1       	ldd	r25, Y+35	; 0x23
    1bec:	dc 01       	movw	r26, r24
    1bee:	ed 91       	ld	r30, X+
    1bf0:	fc 91       	ld	r31, X
    1bf2:	01 90       	ld	r0, Z+
    1bf4:	f0 81       	ld	r31, Z
    1bf6:	e0 2d       	mov	r30, r0
    1bf8:	d8 01       	movw	r26, r16
    1bfa:	14 96       	adiw	r26, 0x04	; 4
    1bfc:	6c 91       	ld	r22, X
    1bfe:	09 95       	icall
    1c00:	8a a1       	ldd	r24, Y+34	; 0x22
    1c02:	9b a1       	ldd	r25, Y+35	; 0x23
    1c04:	dc 01       	movw	r26, r24
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	01 90       	ld	r0, Z+
    1c0c:	f0 81       	ld	r31, Z
    1c0e:	e0 2d       	mov	r30, r0
    1c10:	d8 01       	movw	r26, r16
    1c12:	15 96       	adiw	r26, 0x05	; 5
    1c14:	6c 91       	ld	r22, X
    1c16:	09 95       	icall
    1c18:	8a a1       	ldd	r24, Y+34	; 0x22
    1c1a:	9b a1       	ldd	r25, Y+35	; 0x23
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	ed 91       	ld	r30, X+
    1c20:	fc 91       	ld	r31, X
    1c22:	01 90       	ld	r0, Z+
    1c24:	f0 81       	ld	r31, Z
    1c26:	e0 2d       	mov	r30, r0
    1c28:	d8 01       	movw	r26, r16
    1c2a:	16 96       	adiw	r26, 0x06	; 6
    1c2c:	6c 91       	ld	r22, X
    1c2e:	09 95       	icall
    1c30:	f8 01       	movw	r30, r16
    1c32:	c7 80       	ldd	r12, Z+7	; 0x07
    1c34:	d0 84       	ldd	r13, Z+8	; 0x08
    1c36:	f2 e0       	ldi	r31, 0x02	; 2
    1c38:	cf 0e       	add	r12, r31
    1c3a:	d1 1c       	adc	r13, r1
    1c3c:	8a a1       	ldd	r24, Y+34	; 0x22
    1c3e:	9b a1       	ldd	r25, Y+35	; 0x23
    1c40:	ed 2c       	mov	r14, r13
    1c42:	ff 24       	eor	r15, r15
    1c44:	dc 01       	movw	r26, r24
    1c46:	ed 91       	ld	r30, X+
    1c48:	fc 91       	ld	r31, X
    1c4a:	01 90       	ld	r0, Z+
    1c4c:	f0 81       	ld	r31, Z
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	6e 2d       	mov	r22, r14
    1c52:	09 95       	icall
    1c54:	8a a1       	ldd	r24, Y+34	; 0x22
    1c56:	9b a1       	ldd	r25, Y+35	; 0x23
    1c58:	dc 01       	movw	r26, r24
    1c5a:	ed 91       	ld	r30, X+
    1c5c:	fc 91       	ld	r31, X
    1c5e:	01 90       	ld	r0, Z+
    1c60:	f0 81       	ld	r31, Z
    1c62:	e0 2d       	mov	r30, r0
    1c64:	6c 2d       	mov	r22, r12
    1c66:	09 95       	icall
    1c68:	ec 0c       	add	r14, r12
    1c6a:	f1 1c       	adc	r15, r1
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	86 81       	ldd	r24, Z+6	; 0x06
    1c70:	e8 0e       	add	r14, r24
    1c72:	f1 1c       	adc	r15, r1
    1c74:	b1 2c       	mov	r11, r1
    1c76:	cb 2c       	mov	r12, r11
    1c78:	d1 2c       	mov	r13, r1
    1c7a:	d8 01       	movw	r26, r16
    1c7c:	17 96       	adiw	r26, 0x07	; 7
    1c7e:	2d 91       	ld	r18, X+
    1c80:	3c 91       	ld	r19, X
    1c82:	18 97       	sbiw	r26, 0x08	; 8
    1c84:	8a a1       	ldd	r24, Y+34	; 0x22
    1c86:	9b a1       	ldd	r25, Y+35	; 0x23
    1c88:	c2 16       	cp	r12, r18
    1c8a:	d3 06       	cpc	r13, r19
    1c8c:	90 f4       	brcc	.+36     	; 0x1cb2 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet+0x13e>
    1c8e:	c0 0e       	add	r12, r16
    1c90:	d1 1e       	adc	r13, r17
    1c92:	dc 01       	movw	r26, r24
    1c94:	ed 91       	ld	r30, X+
    1c96:	fc 91       	ld	r31, X
    1c98:	01 90       	ld	r0, Z+
    1c9a:	f0 81       	ld	r31, Z
    1c9c:	e0 2d       	mov	r30, r0
    1c9e:	d6 01       	movw	r26, r12
    1ca0:	19 96       	adiw	r26, 0x09	; 9
    1ca2:	6c 91       	ld	r22, X
    1ca4:	09 95       	icall
    1ca6:	f6 01       	movw	r30, r12
    1ca8:	81 85       	ldd	r24, Z+9	; 0x09
    1caa:	e8 0e       	add	r14, r24
    1cac:	f1 1c       	adc	r15, r1
    1cae:	b3 94       	inc	r11
    1cb0:	e2 cf       	rjmp	.-60     	; 0x1c76 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet+0x102>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	fc 91       	ld	r31, X
    1cb8:	01 90       	ld	r0, Z+
    1cba:	f0 81       	ld	r31, Z
    1cbc:	e0 2d       	mov	r30, r0
    1cbe:	6f 2d       	mov	r22, r15
    1cc0:	09 95       	icall
    1cc2:	8a a1       	ldd	r24, Y+34	; 0x22
    1cc4:	9b a1       	ldd	r25, Y+35	; 0x23
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	ed 91       	ld	r30, X+
    1cca:	fc 91       	ld	r31, X
    1ccc:	01 90       	ld	r0, Z+
    1cce:	f0 81       	ld	r31, Z
    1cd0:	e0 2d       	mov	r30, r0
    1cd2:	6e 2d       	mov	r22, r14
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	bf 90       	pop	r11
    1ce6:	09 94       	ijmp

00001ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>:
    1ce8:	af 92       	push	r10
    1cea:	bf 92       	push	r11
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	6c 01       	movw	r12, r24
    1cfe:	eb 01       	movw	r28, r22
    1d00:	5a 01       	movw	r10, r20
    1d02:	e1 2c       	mov	r14, r1
    1d04:	f1 2c       	mov	r15, r1
    1d06:	00 e0       	ldi	r16, 0x00	; 0
    1d08:	10 e0       	ldi	r17, 0x00	; 0
    1d0a:	d6 01       	movw	r26, r12
    1d0c:	92 96       	adiw	r26, 0x22	; 34
    1d0e:	8d 91       	ld	r24, X+
    1d10:	9c 91       	ld	r25, X
    1d12:	93 97       	sbiw	r26, 0x23	; 35
    1d14:	dc 01       	movw	r26, r24
    1d16:	ed 91       	ld	r30, X+
    1d18:	fc 91       	ld	r31, X
    1d1a:	00 84       	ldd	r0, Z+8	; 0x08
    1d1c:	f1 85       	ldd	r31, Z+9	; 0x09
    1d1e:	e0 2d       	mov	r30, r0
    1d20:	09 95       	icall
    1d22:	89 2b       	or	r24, r25
    1d24:	71 f4       	brne	.+28     	; 0x1d42 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0x5a>
    1d26:	61 e0       	ldi	r22, 0x01	; 1
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
    1d32:	bf ef       	ldi	r27, 0xFF	; 255
    1d34:	eb 1a       	sub	r14, r27
    1d36:	fb 0a       	sbc	r15, r27
    1d38:	ea 14       	cp	r14, r10
    1d3a:	fb 04       	cpc	r15, r11
    1d3c:	30 f3       	brcs	.-52     	; 0x1d0a <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0x22>
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	45 c0       	rjmp	.+138    	; 0x1dcc <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xe4>
    1d42:	f6 01       	movw	r30, r12
    1d44:	82 a1       	ldd	r24, Z+34	; 0x22
    1d46:	93 a1       	ldd	r25, Z+35	; 0x23
    1d48:	dc 01       	movw	r26, r24
    1d4a:	ed 91       	ld	r30, X+
    1d4c:	fc 91       	ld	r31, X
    1d4e:	02 84       	ldd	r0, Z+10	; 0x0a
    1d50:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d52:	e0 2d       	mov	r30, r0
    1d54:	09 95       	icall
    1d56:	09 30       	cpi	r16, 0x09	; 9
    1d58:	11 05       	cpc	r17, r1
    1d5a:	38 f5       	brcc	.+78     	; 0x1daa <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xc2>
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	ec 5c       	subi	r30, 0xCC	; 204
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__tablejump2__>
    1d66:	8f 3e       	cpi	r24, 0xEF	; 239
    1d68:	81 f6       	brne	.-96     	; 0x1d0a <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0x22>
    1d6a:	18 82       	st	Y, r1
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	28 c0       	rjmp	.+80     	; 0x1dc0 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xd8>
    1d70:	28 81       	ld	r18, Y
    1d72:	39 81       	ldd	r19, Y+1	; 0x01
    1d74:	f9 01       	movw	r30, r18
    1d76:	e8 2b       	or	r30, r24
    1d78:	cf 01       	movw	r24, r30
    1d7a:	99 83       	std	Y+1, r25	; 0x01
    1d7c:	88 83       	st	Y, r24
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	9f 4e       	sbci	r25, 0xEF	; 239
    1d82:	f1 f0       	breq	.+60     	; 0x1dc0 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xd8>
    1d84:	20 c0       	rjmp	.+64     	; 0x1dc6 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xde>
    1d86:	fe 01       	movw	r30, r28
    1d88:	e0 0f       	add	r30, r16
    1d8a:	f1 1f       	adc	r31, r17
    1d8c:	80 83       	st	Z, r24
    1d8e:	18 c0       	rjmp	.+48     	; 0x1dc0 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xd8>
    1d90:	8e 83       	std	Y+6, r24	; 0x06
    1d92:	16 c0       	rjmp	.+44     	; 0x1dc0 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xd8>
    1d94:	1f 82       	std	Y+7, r1	; 0x07
    1d96:	88 87       	std	Y+8, r24	; 0x08
    1d98:	13 c0       	rjmp	.+38     	; 0x1dc0 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xd8>
    1d9a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d9c:	38 85       	ldd	r19, Y+8	; 0x08
    1d9e:	a9 01       	movw	r20, r18
    1da0:	48 2b       	or	r20, r24
    1da2:	ca 01       	movw	r24, r20
    1da4:	98 87       	std	Y+8, r25	; 0x08
    1da6:	8f 83       	std	Y+7, r24	; 0x07
    1da8:	0b c0       	rjmp	.+22     	; 0x1dc0 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xd8>
    1daa:	fe 01       	movw	r30, r28
    1dac:	e0 0f       	add	r30, r16
    1dae:	f1 1f       	adc	r31, r17
    1db0:	80 83       	st	Z, r24
    1db2:	2f 81       	ldd	r18, Y+7	; 0x07
    1db4:	38 85       	ldd	r19, Y+8	; 0x08
    1db6:	c8 01       	movw	r24, r16
    1db8:	08 97       	sbiw	r24, 0x08	; 8
    1dba:	82 17       	cp	r24, r18
    1dbc:	93 07       	cpc	r25, r19
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xe2>
    1dc0:	0f 5f       	subi	r16, 0xFF	; 255
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	a2 cf       	rjmp	.-188    	; 0x1d0a <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0x22>
    1dc6:	8e ef       	ldi	r24, 0xFE	; 254
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj+0xe4>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	df 90       	pop	r13
    1dda:	cf 90       	pop	r12
    1ddc:	bf 90       	pop	r11
    1dde:	af 90       	pop	r10
    1de0:	08 95       	ret

00001de2 <_ZN20Adafruit_Fingerprint13checkPasswordEv>:
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	ce 54       	subi	r28, 0x4E	; 78
    1df0:	d1 09       	sbc	r29, r1
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	8c 01       	movw	r16, r24
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e6 5b       	subi	r30, 0xB6	; 182
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	85 e0       	ldi	r24, 0x05	; 5
    1e06:	df 01       	movw	r26, r30
    1e08:	1d 92       	st	X+, r1
    1e0a:	8a 95       	dec	r24
    1e0c:	e9 f7       	brne	.-6      	; 0x1e08 <_ZN20Adafruit_Fingerprint13checkPasswordEv+0x26>
    1e0e:	83 e1       	ldi	r24, 0x13	; 19
    1e10:	80 83       	st	Z, r24
    1e12:	d8 01       	movw	r26, r16
    1e14:	16 96       	adiw	r26, 0x06	; 6
    1e16:	8c 91       	ld	r24, X
    1e18:	16 97       	sbiw	r26, 0x06	; 6
    1e1a:	17 96       	adiw	r26, 0x07	; 7
    1e1c:	9c 91       	ld	r25, X
    1e1e:	17 97       	sbiw	r26, 0x07	; 7
    1e20:	18 96       	adiw	r26, 0x08	; 8
    1e22:	2c 91       	ld	r18, X
    1e24:	18 97       	sbiw	r26, 0x08	; 8
    1e26:	19 96       	adiw	r26, 0x09	; 9
    1e28:	3c 91       	ld	r19, X
    1e2a:	31 83       	std	Z+1, r19	; 0x01
    1e2c:	22 83       	std	Z+2, r18	; 0x02
    1e2e:	93 83       	std	Z+3, r25	; 0x03
    1e30:	84 83       	std	Z+4, r24	; 0x04
    1e32:	9f 01       	movw	r18, r30
    1e34:	45 e0       	ldi	r20, 0x05	; 5
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	61 e0       	ldi	r22, 0x01	; 1
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>
    1e42:	be 01       	movw	r22, r28
    1e44:	6f 5f       	subi	r22, 0xFF	; 255
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	c8 01       	movw	r24, r16
    1e4a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>
    1e4e:	48 ee       	ldi	r20, 0xE8	; 232
    1e50:	53 e0       	ldi	r21, 0x03	; 3
    1e52:	be 01       	movw	r22, r28
    1e54:	6f 5f       	subi	r22, 0xFF	; 255
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255
    1e58:	c8 01       	movw	r24, r16
    1e5a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>
    1e5e:	81 11       	cpse	r24, r1
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <_ZN20Adafruit_Fingerprint13checkPasswordEv+0x92>
    1e62:	8f 81       	ldd	r24, Y+7	; 0x07
    1e64:	87 30       	cpi	r24, 0x07	; 7
    1e66:	31 f4       	brne	.+12     	; 0x1e74 <_ZN20Adafruit_Fingerprint13checkPasswordEv+0x92>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	91 11       	cpse	r25, r1
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <_ZN20Adafruit_Fingerprint13checkPasswordEv+0x94>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <_ZN20Adafruit_Fingerprint13checkPasswordEv+0x94>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	c2 5b       	subi	r28, 0xB2	; 178
    1e78:	df 4f       	sbci	r29, 0xFF	; 255
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	1f 91       	pop	r17
    1e8a:	0f 91       	pop	r16
    1e8c:	08 95       	ret

00001e8e <_ZN20Adafruit_Fingerprint14verifyPasswordEv>:
    1e8e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN20Adafruit_Fingerprint13checkPasswordEv>
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	81 11       	cpse	r24, r1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	89 2f       	mov	r24, r25
    1e9a:	08 95       	ret

00001e9c <_ZN20Adafruit_Fingerprint8getImageEv>:
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	ca 54       	subi	r28, 0x4A	; 74
    1eaa:	d1 09       	sbc	r29, r1
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	8c 01       	movw	r16, r24
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	2b 96       	adiw	r28, 0x0b	; 11
    1ebc:	8f af       	std	Y+63, r24	; 0x3f
    1ebe:	2b 97       	sbiw	r28, 0x0b	; 11
    1ec0:	9e 01       	movw	r18, r28
    1ec2:	26 5b       	subi	r18, 0xB6	; 182
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	ce 01       	movw	r24, r28
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>
    1ed4:	be 01       	movw	r22, r28
    1ed6:	6f 5f       	subi	r22, 0xFF	; 255
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eda:	c8 01       	movw	r24, r16
    1edc:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>
    1ee0:	48 ee       	ldi	r20, 0xE8	; 232
    1ee2:	53 e0       	ldi	r21, 0x03	; 3
    1ee4:	be 01       	movw	r22, r28
    1ee6:	6f 5f       	subi	r22, 0xFF	; 255
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	c8 01       	movw	r24, r16
    1eec:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>
    1ef0:	81 11       	cpse	r24, r1
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <_ZN20Adafruit_Fingerprint8getImageEv+0x62>
    1ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef6:	87 30       	cpi	r24, 0x07	; 7
    1ef8:	11 f4       	brne	.+4      	; 0x1efe <_ZN20Adafruit_Fingerprint8getImageEv+0x62>
    1efa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <_ZN20Adafruit_Fingerprint8getImageEv+0x64>
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	c6 5b       	subi	r28, 0xB6	; 182
    1f02:	df 4f       	sbci	r29, 0xFF	; 255
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	08 95       	ret

00001f18 <_ZN20Adafruit_Fingerprint8image2TzEh>:
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	cb 54       	subi	r28, 0x4B	; 75
    1f26:	d1 09       	sbc	r29, r1
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	8c 01       	movw	r16, r24
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	2b 96       	adiw	r28, 0x0b	; 11
    1f38:	8f af       	std	Y+63, r24	; 0x3f
    1f3a:	2b 97       	sbiw	r28, 0x0b	; 11
    1f3c:	2c 96       	adiw	r28, 0x0c	; 12
    1f3e:	6f af       	std	Y+63, r22	; 0x3f
    1f40:	2c 97       	sbiw	r28, 0x0c	; 12
    1f42:	9e 01       	movw	r18, r28
    1f44:	26 5b       	subi	r18, 0xB6	; 182
    1f46:	3f 4f       	sbci	r19, 0xFF	; 255
    1f48:	42 e0       	ldi	r20, 0x02	; 2
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	ce 01       	movw	r24, r28
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>
    1f56:	be 01       	movw	r22, r28
    1f58:	6f 5f       	subi	r22, 0xFF	; 255
    1f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>
    1f62:	48 ee       	ldi	r20, 0xE8	; 232
    1f64:	53 e0       	ldi	r21, 0x03	; 3
    1f66:	be 01       	movw	r22, r28
    1f68:	6f 5f       	subi	r22, 0xFF	; 255
    1f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>
    1f72:	81 11       	cpse	r24, r1
    1f74:	05 c0       	rjmp	.+10     	; 0x1f80 <_ZN20Adafruit_Fingerprint8image2TzEh+0x68>
    1f76:	8f 81       	ldd	r24, Y+7	; 0x07
    1f78:	87 30       	cpi	r24, 0x07	; 7
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <_ZN20Adafruit_Fingerprint8image2TzEh+0x68>
    1f7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <_ZN20Adafruit_Fingerprint8image2TzEh+0x6a>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	c5 5b       	subi	r28, 0xB5	; 181
    1f84:	df 4f       	sbci	r29, 0xFF	; 255
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	08 95       	ret

00001f9a <_ZN20Adafruit_Fingerprint11createModelEv>:
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	ca 54       	subi	r28, 0x4A	; 74
    1fa8:	d1 09       	sbc	r29, r1
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	85 e0       	ldi	r24, 0x05	; 5
    1fb8:	2b 96       	adiw	r28, 0x0b	; 11
    1fba:	8f af       	std	Y+63, r24	; 0x3f
    1fbc:	2b 97       	sbiw	r28, 0x0b	; 11
    1fbe:	9e 01       	movw	r18, r28
    1fc0:	26 5b       	subi	r18, 0xB6	; 182
    1fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	ce 01       	movw	r24, r28
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>
    1fd2:	be 01       	movw	r22, r28
    1fd4:	6f 5f       	subi	r22, 0xFF	; 255
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	c8 01       	movw	r24, r16
    1fda:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>
    1fde:	48 ee       	ldi	r20, 0xE8	; 232
    1fe0:	53 e0       	ldi	r21, 0x03	; 3
    1fe2:	be 01       	movw	r22, r28
    1fe4:	6f 5f       	subi	r22, 0xFF	; 255
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	c8 01       	movw	r24, r16
    1fea:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>
    1fee:	81 11       	cpse	r24, r1
    1ff0:	05 c0       	rjmp	.+10     	; 0x1ffc <_ZN20Adafruit_Fingerprint11createModelEv+0x62>
    1ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff4:	87 30       	cpi	r24, 0x07	; 7
    1ff6:	11 f4       	brne	.+4      	; 0x1ffc <_ZN20Adafruit_Fingerprint11createModelEv+0x62>
    1ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <_ZN20Adafruit_Fingerprint11createModelEv+0x64>
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	c6 5b       	subi	r28, 0xB6	; 182
    2000:	df 4f       	sbci	r29, 0xFF	; 255
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <_ZN20Adafruit_Fingerprint10storeModelEj>:
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	cd 54       	subi	r28, 0x4D	; 77
    2024:	d1 09       	sbc	r29, r1
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	8c 01       	movw	r16, r24
    2032:	86 e0       	ldi	r24, 0x06	; 6
    2034:	2b 96       	adiw	r28, 0x0b	; 11
    2036:	8f af       	std	Y+63, r24	; 0x3f
    2038:	2b 97       	sbiw	r28, 0x0b	; 11
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	2c 96       	adiw	r28, 0x0c	; 12
    203e:	8f af       	std	Y+63, r24	; 0x3f
    2040:	2c 97       	sbiw	r28, 0x0c	; 12
    2042:	2d 96       	adiw	r28, 0x0d	; 13
    2044:	7f af       	std	Y+63, r23	; 0x3f
    2046:	2d 97       	sbiw	r28, 0x0d	; 13
    2048:	2e 96       	adiw	r28, 0x0e	; 14
    204a:	6f af       	std	Y+63, r22	; 0x3f
    204c:	2e 97       	sbiw	r28, 0x0e	; 14
    204e:	9e 01       	movw	r18, r28
    2050:	26 5b       	subi	r18, 0xB6	; 182
    2052:	3f 4f       	sbci	r19, 0xFF	; 255
    2054:	44 e0       	ldi	r20, 0x04	; 4
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	ce 01       	movw	r24, r28
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>
    2062:	be 01       	movw	r22, r28
    2064:	6f 5f       	subi	r22, 0xFF	; 255
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	c8 01       	movw	r24, r16
    206a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>
    206e:	48 ee       	ldi	r20, 0xE8	; 232
    2070:	53 e0       	ldi	r21, 0x03	; 3
    2072:	be 01       	movw	r22, r28
    2074:	6f 5f       	subi	r22, 0xFF	; 255
    2076:	7f 4f       	sbci	r23, 0xFF	; 255
    2078:	c8 01       	movw	r24, r16
    207a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>
    207e:	81 11       	cpse	r24, r1
    2080:	05 c0       	rjmp	.+10     	; 0x208c <_ZN20Adafruit_Fingerprint10storeModelEj+0x76>
    2082:	8f 81       	ldd	r24, Y+7	; 0x07
    2084:	87 30       	cpi	r24, 0x07	; 7
    2086:	11 f4       	brne	.+4      	; 0x208c <_ZN20Adafruit_Fingerprint10storeModelEj+0x76>
    2088:	8a 85       	ldd	r24, Y+10	; 0x0a
    208a:	01 c0       	rjmp	.+2      	; 0x208e <_ZN20Adafruit_Fingerprint10storeModelEj+0x78>
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	c3 5b       	subi	r28, 0xB3	; 179
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	08 95       	ret

000020a6 <_ZN20Adafruit_Fingerprint11deleteModelEj>:
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	ce 54       	subi	r28, 0x4E	; 78
    20b4:	d1 09       	sbc	r29, r1
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	8c 01       	movw	r16, r24
    20c2:	fe 01       	movw	r30, r28
    20c4:	e6 5b       	subi	r30, 0xB6	; 182
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	85 e0       	ldi	r24, 0x05	; 5
    20ca:	df 01       	movw	r26, r30
    20cc:	1d 92       	st	X+, r1
    20ce:	8a 95       	dec	r24
    20d0:	e9 f7       	brne	.-6      	; 0x20cc <_ZN20Adafruit_Fingerprint11deleteModelEj+0x26>
    20d2:	8c e0       	ldi	r24, 0x0C	; 12
    20d4:	80 83       	st	Z, r24
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	84 83       	std	Z+4, r24	; 0x04
    20da:	71 83       	std	Z+1, r23	; 0x01
    20dc:	62 83       	std	Z+2, r22	; 0x02
    20de:	9f 01       	movw	r18, r30
    20e0:	45 e0       	ldi	r20, 0x05	; 5
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>
    20ee:	be 01       	movw	r22, r28
    20f0:	6f 5f       	subi	r22, 0xFF	; 255
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	c8 01       	movw	r24, r16
    20f6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>
    20fa:	48 ee       	ldi	r20, 0xE8	; 232
    20fc:	53 e0       	ldi	r21, 0x03	; 3
    20fe:	be 01       	movw	r22, r28
    2100:	6f 5f       	subi	r22, 0xFF	; 255
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	c8 01       	movw	r24, r16
    2106:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>
    210a:	81 11       	cpse	r24, r1
    210c:	05 c0       	rjmp	.+10     	; 0x2118 <_ZN20Adafruit_Fingerprint11deleteModelEj+0x72>
    210e:	8f 81       	ldd	r24, Y+7	; 0x07
    2110:	87 30       	cpi	r24, 0x07	; 7
    2112:	11 f4       	brne	.+4      	; 0x2118 <_ZN20Adafruit_Fingerprint11deleteModelEj+0x72>
    2114:	8a 85       	ldd	r24, Y+10	; 0x0a
    2116:	01 c0       	rjmp	.+2      	; 0x211a <_ZN20Adafruit_Fingerprint11deleteModelEj+0x74>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	c2 5b       	subi	r28, 0xB2	; 178
    211c:	df 4f       	sbci	r29, 0xFF	; 255
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	08 95       	ret

00002132 <_ZN20Adafruit_Fingerprint16fingerFastSearchEv>:
    @returns <code>FINGERPRINT_OK</code> on fingerprint match success
    @returns <code>FINGERPRINT_NOTFOUND</code> no match made
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
*/
/**************************************************************************/
uint8_t Adafruit_Fingerprint::fingerFastSearch(void) {
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	cf 54       	subi	r28, 0x4F	; 79
    2140:	d1 09       	sbc	r29, r1
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	8c 01       	movw	r16, r24
  // high speed search of slot #1 starting at page 0x0000 and page #0x00A3
  GET_CMD_PACKET(FINGERPRINT_HISPEEDSEARCH, 0x01, 0x00, 0x00, 0x00, 0xA3);
    214e:	86 e0       	ldi	r24, 0x06	; 6
    2150:	ea e0       	ldi	r30, 0x0A	; 10
    2152:	f1 e0       	ldi	r31, 0x01	; 1
    2154:	de 01       	movw	r26, r28
    2156:	a6 5b       	subi	r26, 0xB6	; 182
    2158:	bf 4f       	sbci	r27, 0xFF	; 255
    215a:	01 90       	ld	r0, Z+
    215c:	0d 92       	st	X+, r0
    215e:	8a 95       	dec	r24
    2160:	e1 f7       	brne	.-8      	; 0x215a <_ZN20Adafruit_Fingerprint16fingerFastSearchEv+0x28>
    2162:	9e 01       	movw	r18, r28
    2164:	26 5b       	subi	r18, 0xB6	; 182
    2166:	3f 4f       	sbci	r19, 0xFF	; 255
    2168:	46 e0       	ldi	r20, 0x06	; 6
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	61 e0       	ldi	r22, 0x01	; 1
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>
    2176:	be 01       	movw	r22, r28
    2178:	6f 5f       	subi	r22, 0xFF	; 255
    217a:	7f 4f       	sbci	r23, 0xFF	; 255
    217c:	c8 01       	movw	r24, r16
    217e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>
    2182:	48 ee       	ldi	r20, 0xE8	; 232
    2184:	53 e0       	ldi	r21, 0x03	; 3
    2186:	be 01       	movw	r22, r28
    2188:	6f 5f       	subi	r22, 0xFF	; 255
    218a:	7f 4f       	sbci	r23, 0xFF	; 255
    218c:	c8 01       	movw	r24, r16
    218e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>
    2192:	81 11       	cpse	r24, r1
    2194:	14 c0       	rjmp	.+40     	; 0x21be <_ZN20Adafruit_Fingerprint16fingerFastSearchEv+0x8c>
    2196:	8f 81       	ldd	r24, Y+7	; 0x07
    2198:	87 30       	cpi	r24, 0x07	; 7
    219a:	89 f4       	brne	.+34     	; 0x21be <_ZN20Adafruit_Fingerprint16fingerFastSearchEv+0x8c>
  fingerID = 0xFFFF;
  confidence = 0xFFFF;

  fingerID = packet.data[1];
  fingerID <<= 8;
  fingerID |= packet.data[2];
    219c:	8b 85       	ldd	r24, Y+11	; 0x0b
    219e:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a0:	98 27       	eor	r25, r24
    21a2:	89 27       	eor	r24, r25
    21a4:	98 27       	eor	r25, r24
    21a6:	f8 01       	movw	r30, r16
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24

  confidence = packet.data[3];
  confidence <<= 8;
  confidence |= packet.data[4];
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	98 27       	eor	r25, r24
    21b2:	89 27       	eor	r24, r25
    21b4:	98 27       	eor	r25, r24
    21b6:	93 83       	std	Z+3, r25	; 0x03
    21b8:	82 83       	std	Z+2, r24	; 0x02

  return packet.data[0];
    21ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <_ZN20Adafruit_Fingerprint16fingerFastSearchEv+0x8e>
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
*/
/**************************************************************************/
uint8_t Adafruit_Fingerprint::fingerFastSearch(void) {
  // high speed search of slot #1 starting at page 0x0000 and page #0x00A3
  GET_CMD_PACKET(FINGERPRINT_HISPEEDSEARCH, 0x01, 0x00, 0x00, 0x00, 0xA3);
    21be:	81 e0       	ldi	r24, 0x01	; 1
  confidence = packet.data[3];
  confidence <<= 8;
  confidence |= packet.data[4];

  return packet.data[0];
}
    21c0:	c1 5b       	subi	r28, 0xB1	; 177
    21c2:	df 4f       	sbci	r29, 0xFF	; 255
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

000021d8 <_ZN20Adafruit_Fingerprint16getTemplateCountEv>:
    @brief   Ask the sensor for the number of templates stored in memory. The number is stored in <b>templateCount</b> on success.
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
*/
/**************************************************************************/
uint8_t Adafruit_Fingerprint::getTemplateCount(void) {
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	ca 54       	subi	r28, 0x4A	; 74
    21e6:	d1 09       	sbc	r29, r1
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	8c 01       	movw	r16, r24
  GET_CMD_PACKET(FINGERPRINT_TEMPLATECOUNT);
    21f4:	8d e1       	ldi	r24, 0x1D	; 29
    21f6:	2b 96       	adiw	r28, 0x0b	; 11
    21f8:	8f af       	std	Y+63, r24	; 0x3f
    21fa:	2b 97       	sbiw	r28, 0x0b	; 11
    21fc:	9e 01       	movw	r18, r28
    21fe:	26 5b       	subi	r18, 0xB6	; 182
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	ce 01       	movw	r24, r28
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN27Adafruit_Fingerprint_PacketC1EhjPh>
    2210:	be 01       	movw	r22, r28
    2212:	6f 5f       	subi	r22, 0xFF	; 255
    2214:	7f 4f       	sbci	r23, 0xFF	; 255
    2216:	c8 01       	movw	r24, r16
    2218:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN20Adafruit_Fingerprint21writeStructuredPacketERK27Adafruit_Fingerprint_Packet>
    221c:	48 ee       	ldi	r20, 0xE8	; 232
    221e:	53 e0       	ldi	r21, 0x03	; 3
    2220:	be 01       	movw	r22, r28
    2222:	6f 5f       	subi	r22, 0xFF	; 255
    2224:	7f 4f       	sbci	r23, 0xFF	; 255
    2226:	c8 01       	movw	r24, r16
    2228:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN20Adafruit_Fingerprint19getStructuredPacketEP27Adafruit_Fingerprint_Packetj>
    222c:	81 11       	cpse	r24, r1
    222e:	0d c0       	rjmp	.+26     	; 0x224a <_ZN20Adafruit_Fingerprint16getTemplateCountEv+0x72>
    2230:	8f 81       	ldd	r24, Y+7	; 0x07
    2232:	87 30       	cpi	r24, 0x07	; 7
    2234:	51 f4       	brne	.+20     	; 0x224a <_ZN20Adafruit_Fingerprint16getTemplateCountEv+0x72>

  templateCount = packet.data[1];
  templateCount <<= 8;
  templateCount |= packet.data[2];
    2236:	8b 85       	ldd	r24, Y+11	; 0x0b
    2238:	9c 85       	ldd	r25, Y+12	; 0x0c
    223a:	98 27       	eor	r25, r24
    223c:	89 27       	eor	r24, r25
    223e:	98 27       	eor	r25, r24
    2240:	f8 01       	movw	r30, r16
    2242:	95 83       	std	Z+5, r25	; 0x05
    2244:	84 83       	std	Z+4, r24	; 0x04

  return packet.data[0];
    2246:	8a 85       	ldd	r24, Y+10	; 0x0a
    2248:	01 c0       	rjmp	.+2      	; 0x224c <_ZN20Adafruit_Fingerprint16getTemplateCountEv+0x74>
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
*/
/**************************************************************************/
uint8_t Adafruit_Fingerprint::getTemplateCount(void) {
  GET_CMD_PACKET(FINGERPRINT_TEMPLATECOUNT);
    224a:	81 e0       	ldi	r24, 0x01	; 1
  templateCount = packet.data[1];
  templateCount <<= 8;
  templateCount |= packet.data[2];

  return packet.data[0];
}
    224c:	c6 5b       	subi	r28, 0xB6	; 182
    224e:	df 4f       	sbci	r29, 0xFF	; 255
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret

00002264 <_ZN17LiquidCrystal_I2CC1Ehhhh>:
	expanderWrite(_data & ~En);	// En low
	delayMicroseconds(50);		// commands need > 37us to settle
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
	createChar(char_num, rows);
    2264:	0f 93       	push	r16
    2266:	fc 01       	movw	r30, r24
    2268:	13 82       	std	Z+3, r1	; 0x03
    226a:	12 82       	std	Z+2, r1	; 0x02
    226c:	82 e9       	ldi	r24, 0x92	; 146
    226e:	95 e0       	ldi	r25, 0x05	; 5
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
    2274:	64 83       	std	Z+4, r22	; 0x04
    2276:	40 87       	std	Z+8, r20	; 0x08
    2278:	21 87       	std	Z+9, r18	; 0x09
    227a:	02 87       	std	Z+10, r16	; 0x0a
    227c:	88 e0       	ldi	r24, 0x08	; 8
    227e:	83 87       	std	Z+11, r24	; 0x0b
    2280:	0f 91       	pop	r16
    2282:	08 95       	ret

00002284 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    2284:	1f 93       	push	r17
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	ec 01       	movw	r28, r24
    228c:	16 2f       	mov	r17, r22
    228e:	6c 81       	ldd	r22, Y+4	; 0x04
    2290:	82 e0       	ldi	r24, 0x02	; 2
    2292:	97 e0       	ldi	r25, 0x07	; 7
    2294:	0e 94 94 15 	call	0x2b28	; 0x2b28 <_ZN7TwoWire17beginTransmissionEh>
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	61 2b       	or	r22, r17
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	97 e0       	ldi	r25, 0x07	; 7
    22a0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZN7TwoWire5writeEh>
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	97 e0       	ldi	r25, 0x07	; 7
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <_ZN7TwoWire15endTransmissionEv>

000022b2 <_ZN17LiquidCrystal_I2C11noBacklightEv>:
    22b2:	fc 01       	movw	r30, r24
    22b4:	13 86       	std	Z+11, r1	; 0x0b
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	0c 94 42 11 	jmp	0x2284	; 0x2284 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000022bc <_ZN17LiquidCrystal_I2C9backlightEv>:
    22bc:	28 e0       	ldi	r18, 0x08	; 8
    22be:	fc 01       	movw	r30, r24
    22c0:	23 87       	std	Z+11, r18	; 0x0b
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	0c 94 42 11 	jmp	0x2284	; 0x2284 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000022c8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	8c 01       	movw	r16, r24
    22d0:	c6 2f       	mov	r28, r22
    22d2:	64 60       	ori	r22, 0x04	; 4
    22d4:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <delayMicroseconds>
    22e0:	6c 2f       	mov	r22, r28
    22e2:	6b 7f       	andi	r22, 0xFB	; 251
    22e4:	c8 01       	movw	r24, r16
    22e6:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    22ea:	82 e3       	ldi	r24, 0x32	; 50
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <delayMicroseconds>

000022f8 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	ec 01       	movw	r28, r24
    2300:	16 2f       	mov	r17, r22
    2302:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    2306:	61 2f       	mov	r22, r17
    2308:	ce 01       	movw	r24, r28
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00002314 <_ZN17LiquidCrystal_I2C4sendEhh>:
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	8c 01       	movw	r16, r24
    231e:	c6 2f       	mov	r28, r22
    2320:	d4 2f       	mov	r29, r20
    2322:	60 7f       	andi	r22, 0xF0	; 240
    2324:	64 2b       	or	r22, r20
    2326:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    232a:	80 e1       	ldi	r24, 0x10	; 16
    232c:	c8 9f       	mul	r28, r24
    232e:	b0 01       	movw	r22, r0
    2330:	11 24       	eor	r1, r1
    2332:	6d 2b       	or	r22, r29
    2334:	c8 01       	movw	r24, r16
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <_ZN17LiquidCrystal_I2C10write4bitsEh>

00002342 <_ZN17LiquidCrystal_I2C7commandEh>:
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <_ZN17LiquidCrystal_I2C4sendEhh>

00002348 <_ZN17LiquidCrystal_I2C5clearEv>:
    2348:	61 e0       	ldi	r22, 0x01	; 1
    234a:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN17LiquidCrystal_I2C7commandEh>
    234e:	80 ed       	ldi	r24, 0xD0	; 208
    2350:	97 e0       	ldi	r25, 0x07	; 7
    2352:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <delayMicroseconds>

00002356 <_ZN17LiquidCrystal_I2C4homeEv>:
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN17LiquidCrystal_I2C7commandEh>
    235c:	80 ed       	ldi	r24, 0xD0	; 208
    235e:	97 e0       	ldi	r25, 0x07	; 7
    2360:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <delayMicroseconds>

00002364 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	28 97       	sbiw	r28, 0x08	; 8
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	9c 01       	movw	r18, r24
    237a:	88 e0       	ldi	r24, 0x08	; 8
    237c:	e0 e1       	ldi	r30, 0x10	; 16
    237e:	f1 e0       	ldi	r31, 0x01	; 1
    2380:	de 01       	movw	r26, r28
    2382:	11 96       	adiw	r26, 0x01	; 1
    2384:	01 90       	ld	r0, Z+
    2386:	0d 92       	st	X+, r0
    2388:	8a 95       	dec	r24
    238a:	e1 f7       	brne	.-8      	; 0x2384 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    238c:	f9 01       	movw	r30, r18
    238e:	81 85       	ldd	r24, Z+9	; 0x09
    2390:	84 17       	cp	r24, r20
    2392:	10 f4       	brcc	.+4      	; 0x2398 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    2394:	4f ef       	ldi	r20, 0xFF	; 255
    2396:	48 0f       	add	r20, r24
    2398:	fe 01       	movw	r30, r28
    239a:	31 96       	adiw	r30, 0x01	; 1
    239c:	e4 0f       	add	r30, r20
    239e:	f1 1d       	adc	r31, r1
    23a0:	e4 0f       	add	r30, r20
    23a2:	f1 1d       	adc	r31, r1
    23a4:	90 81       	ld	r25, Z
    23a6:	69 0f       	add	r22, r25
    23a8:	60 68       	ori	r22, 0x80	; 128
    23aa:	c9 01       	movw	r24, r18
    23ac:	28 96       	adiw	r28, 0x08	; 8
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <_ZN17LiquidCrystal_I2C7commandEh>

000023c0 <_ZN17LiquidCrystal_I2C7displayEv>:
    23c0:	fc 01       	movw	r30, r24
    23c2:	66 81       	ldd	r22, Z+6	; 0x06
    23c4:	26 2f       	mov	r18, r22
    23c6:	24 60       	ori	r18, 0x04	; 4
    23c8:	26 83       	std	Z+6, r18	; 0x06
    23ca:	6c 60       	ori	r22, 0x0C	; 12
    23cc:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <_ZN17LiquidCrystal_I2C7commandEh>

000023d0 <_ZN17LiquidCrystal_I2C5writeEh>:
inline void LiquidCrystal_I2C::command(uint8_t value) {
	send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 8a 11 	call	0x2314	; 0x2314 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	08 95       	ret

000023dc <_ZN17LiquidCrystal_I2C5beginEv>:
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
}

void LiquidCrystal_I2C::begin() {
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ec 01       	movw	r28, r24
	Wire.begin();
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	97 e0       	ldi	r25, 0x07	; 7
    23e6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    23ea:	1d 82       	std	Y+5, r1	; 0x05

	if (_rows > 1) {
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	82 30       	cpi	r24, 0x02	; 2
    23f0:	10 f0       	brcs	.+4      	; 0x23f6 <_ZN17LiquidCrystal_I2C5beginEv+0x1a>
		_displayfunction |= LCD_2LINE;
    23f2:	98 e0       	ldi	r25, 0x08	; 8
    23f4:	9d 83       	std	Y+5, r25	; 0x05
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((_charsize != 0) && (_rows == 1)) {
    23f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f8:	99 23       	and	r25, r25
    23fa:	29 f0       	breq	.+10     	; 0x2406 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
    23fc:	81 30       	cpi	r24, 0x01	; 1
    23fe:	19 f4       	brne	.+6      	; 0x2406 <_ZN17LiquidCrystal_I2C5beginEv+0x2a>
		_displayfunction |= LCD_5x10DOTS;
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	84 60       	ori	r24, 0x04	; 4
    2404:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50);
    2406:	62 e3       	ldi	r22, 0x32	; 50
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    2412:	6b 85       	ldd	r22, Y+11	; 0x0b
    2414:	ce 01       	movw	r24, r28
    2416:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    241a:	68 ee       	ldi	r22, 0xE8	; 232
    241c:	73 e0       	ldi	r23, 0x03	; 3
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 0e 0b 	call	0x161c	; 0x161c <delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
    2426:	60 e3       	ldi	r22, 0x30	; 48
    2428:	ce 01       	movw	r24, r28
    242a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    242e:	84 e9       	ldi	r24, 0x94	; 148
    2430:	91 e1       	ldi	r25, 0x11	; 17
    2432:	0e 94 4a 0b 	call	0x1694	; 0x1694 <delayMicroseconds>

	// second try
	write4bits(0x03 << 4);
    2436:	60 e3       	ldi	r22, 0x30	; 48
    2438:	ce 01       	movw	r24, r28
    243a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    243e:	84 e9       	ldi	r24, 0x94	; 148
    2440:	91 e1       	ldi	r25, 0x11	; 17
    2442:	0e 94 4a 0b 	call	0x1694	; 0x1694 <delayMicroseconds>

	// third go!
	write4bits(0x03 << 4);
    2446:	60 e3       	ldi	r22, 0x30	; 48
    2448:	ce 01       	movw	r24, r28
    244a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN17LiquidCrystal_I2C10write4bitsEh>
	delayMicroseconds(150);
    244e:	86 e9       	ldi	r24, 0x96	; 150
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	0e 94 4a 0b 	call	0x1694	; 0x1694 <delayMicroseconds>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
    2456:	60 e2       	ldi	r22, 0x20	; 32
    2458:	ce 01       	movw	r24, r28
    245a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN17LiquidCrystal_I2C10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
    245e:	6d 81       	ldd	r22, Y+5	; 0x05
    2460:	60 62       	ori	r22, 0x20	; 32
    2462:	ce 01       	movw	r24, r28
    2464:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN17LiquidCrystal_I2C7commandEh>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2468:	84 e0       	ldi	r24, 0x04	; 4
    246a:	8e 83       	std	Y+6, r24	; 0x06
	display();
    246c:	ce 01       	movw	r24, r28
    246e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN17LiquidCrystal_I2C7displayEv>

	// clear it off
	clear();
    2472:	ce 01       	movw	r24, r28
    2474:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN17LiquidCrystal_I2C5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	8f 83       	std	Y+7, r24	; 0x07

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    247c:	66 e0       	ldi	r22, 0x06	; 6
    247e:	ce 01       	movw	r24, r28
    2480:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN17LiquidCrystal_I2C7commandEh>

	home();
    2484:	ce 01       	movw	r24, r28
}
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
    248a:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <_ZN17LiquidCrystal_I2C4homeEv>

0000248e <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    248e:	20 91 00 07 	lds	r18, 0x0700	; 0x800700 <_ZN14SoftwareSerial13active_objectE>
    2492:	30 91 01 07 	lds	r19, 0x0701	; 0x800701 <_ZN14SoftwareSerial13active_objectE+0x1>
    2496:	28 17       	cp	r18, r24
    2498:	39 07       	cpc	r19, r25
    249a:	b9 f4       	brne	.+46     	; 0x24ca <_ZN14SoftwareSerial4readEv+0x3c>
    249c:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    24a0:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    24a4:	98 17       	cp	r25, r24
    24a6:	89 f0       	breq	.+34     	; 0x24ca <_ZN14SoftwareSerial4readEv+0x3c>
    24a8:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	e0 54       	subi	r30, 0x40	; 64
    24b0:	f9 4f       	sbci	r31, 0xF9	; 249
    24b2:	80 81       	ld	r24, Z
    24b4:	20 91 be 06 	lds	r18, 0x06BE	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	2f 5f       	subi	r18, 0xFF	; 255
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	2f 73       	andi	r18, 0x3F	; 63
    24c0:	33 27       	eor	r19, r19
    24c2:	20 93 be 06 	sts	0x06BE, r18	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	08 95       	ret
    24ca:	8f ef       	ldi	r24, 0xFF	; 255
    24cc:	9f ef       	ldi	r25, 0xFF	; 255
    24ce:	08 95       	ret

000024d0 <_ZN14SoftwareSerial5writeEh>:
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	dc 01       	movw	r26, r24
    24d8:	5c 96       	adiw	r26, 0x1c	; 28
    24da:	8d 91       	ld	r24, X+
    24dc:	9c 91       	ld	r25, X
    24de:	5d 97       	sbiw	r26, 0x1d	; 29
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	39 f4       	brne	.+14     	; 0x24f2 <_ZN14SoftwareSerial5writeEh+0x22>
    24e4:	21 e0       	ldi	r18, 0x01	; 1
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	13 96       	adiw	r26, 0x03	; 3
    24ea:	3c 93       	st	X, r19
    24ec:	2e 93       	st	-X, r18
    24ee:	12 97       	sbiw	r26, 0x02	; 2
    24f0:	3b c0       	rjmp	.+118    	; 0x2568 <_ZN14SoftwareSerial5writeEh+0x98>
    24f2:	51 96       	adiw	r26, 0x11	; 17
    24f4:	ed 91       	ld	r30, X+
    24f6:	fc 91       	ld	r31, X
    24f8:	52 97       	sbiw	r26, 0x12	; 18
    24fa:	50 96       	adiw	r26, 0x10	; 16
    24fc:	2c 91       	ld	r18, X
    24fe:	50 97       	sbiw	r26, 0x10	; 16
    2500:	32 2f       	mov	r19, r18
    2502:	30 95       	com	r19
    2504:	1f b7       	in	r17, 0x3f	; 63
    2506:	5e 96       	adiw	r26, 0x1e	; 30
    2508:	4c 91       	ld	r20, X
    250a:	5e 97       	sbiw	r26, 0x1e	; 30
    250c:	74 2f       	mov	r23, r20
    250e:	72 70       	andi	r23, 0x02	; 2
    2510:	41 fd       	sbrc	r20, 1
    2512:	60 95       	com	r22
    2514:	f8 94       	cli
    2516:	40 81       	ld	r20, Z
    2518:	77 23       	and	r23, r23
    251a:	11 f0       	breq	.+4      	; 0x2520 <_ZN14SoftwareSerial5writeEh+0x50>
    251c:	42 2b       	or	r20, r18
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <_ZN14SoftwareSerial5writeEh+0x52>
    2520:	43 23       	and	r20, r19
    2522:	40 83       	st	Z, r20
    2524:	ec 01       	movw	r28, r24
    2526:	21 97       	sbiw	r28, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <_ZN14SoftwareSerial5writeEh+0x56>
    252a:	48 e0       	ldi	r20, 0x08	; 8
    252c:	50 81       	ld	r21, Z
    252e:	60 ff       	sbrs	r22, 0
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <_ZN14SoftwareSerial5writeEh+0x66>
    2532:	52 2b       	or	r21, r18
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <_ZN14SoftwareSerial5writeEh+0x68>
    2536:	53 23       	and	r21, r19
    2538:	50 83       	st	Z, r21
    253a:	ec 01       	movw	r28, r24
    253c:	21 97       	sbiw	r28, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <_ZN14SoftwareSerial5writeEh+0x6c>
    2540:	66 95       	lsr	r22
    2542:	41 50       	subi	r20, 0x01	; 1
    2544:	99 f7       	brne	.-26     	; 0x252c <_ZN14SoftwareSerial5writeEh+0x5c>
    2546:	80 81       	ld	r24, Z
    2548:	77 23       	and	r23, r23
    254a:	19 f0       	breq	.+6      	; 0x2552 <_ZN14SoftwareSerial5writeEh+0x82>
    254c:	83 23       	and	r24, r19
    254e:	80 83       	st	Z, r24
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <_ZN14SoftwareSerial5writeEh+0x86>
    2552:	28 2b       	or	r18, r24
    2554:	20 83       	st	Z, r18
    2556:	1f bf       	out	0x3f, r17	; 63
    2558:	5c 96       	adiw	r26, 0x1c	; 28
    255a:	8d 91       	ld	r24, X+
    255c:	9c 91       	ld	r25, X
    255e:	5d 97       	sbiw	r26, 0x1d	; 29
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <_ZN14SoftwareSerial5writeEh+0x90>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	08 95       	ret

00002570 <_ZN14SoftwareSerial5flushEv>:
    2570:	08 95       	ret

00002572 <_ZN14SoftwareSerial4peekEv>:
    2572:	20 91 00 07 	lds	r18, 0x0700	; 0x800700 <_ZN14SoftwareSerial13active_objectE>
    2576:	30 91 01 07 	lds	r19, 0x0701	; 0x800701 <_ZN14SoftwareSerial13active_objectE+0x1>
    257a:	28 17       	cp	r18, r24
    257c:	39 07       	cpc	r19, r25
    257e:	71 f4       	brne	.+28     	; 0x259c <_ZN14SoftwareSerial4peekEv+0x2a>
    2580:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    2584:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2588:	98 17       	cp	r25, r24
    258a:	41 f0       	breq	.+16     	; 0x259c <_ZN14SoftwareSerial4peekEv+0x2a>
    258c:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	e0 54       	subi	r30, 0x40	; 64
    2594:	f9 4f       	sbci	r31, 0xF9	; 249
    2596:	80 81       	ld	r24, Z
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	08 95       	ret
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	9f ef       	ldi	r25, 0xFF	; 255
    25a0:	08 95       	ret

000025a2 <_ZN14SoftwareSerial9availableEv>:
    25a2:	20 91 00 07 	lds	r18, 0x0700	; 0x800700 <_ZN14SoftwareSerial13active_objectE>
    25a6:	30 91 01 07 	lds	r19, 0x0701	; 0x800701 <_ZN14SoftwareSerial13active_objectE+0x1>
    25aa:	28 17       	cp	r18, r24
    25ac:	39 07       	cpc	r19, r25
    25ae:	71 f4       	brne	.+28     	; 0x25cc <_ZN14SoftwareSerial9availableEv+0x2a>
    25b0:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    25b4:	20 91 be 06 	lds	r18, 0x06BE	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	80 5c       	subi	r24, 0xC0	; 192
    25bc:	9f 4f       	sbci	r25, 0xFF	; 255
    25be:	82 1b       	sub	r24, r18
    25c0:	91 09       	sbc	r25, r1
    25c2:	60 e4       	ldi	r22, 0x40	; 64
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__divmodhi4>
    25ca:	08 95       	ret
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	08 95       	ret

000025d2 <_ZN14SoftwareSerial13stopListeningEv>:
    25d2:	e0 91 00 07 	lds	r30, 0x0700	; 0x800700 <_ZN14SoftwareSerial13active_objectE>
    25d6:	f0 91 01 07 	lds	r31, 0x0701	; 0x800701 <_ZN14SoftwareSerial13active_objectE+0x1>
    25da:	e8 17       	cp	r30, r24
    25dc:	f9 07       	cpc	r31, r25
    25de:	69 f4       	brne	.+26     	; 0x25fa <_ZN14SoftwareSerial13stopListeningEv+0x28>
    25e0:	a3 89       	ldd	r26, Z+19	; 0x13
    25e2:	b4 89       	ldd	r27, Z+20	; 0x14
    25e4:	9c 91       	ld	r25, X
    25e6:	85 89       	ldd	r24, Z+21	; 0x15
    25e8:	80 95       	com	r24
    25ea:	89 23       	and	r24, r25
    25ec:	8c 93       	st	X, r24
    25ee:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <_ZN14SoftwareSerial13active_objectE+0x1>
    25f2:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <_ZN14SoftwareSerial13active_objectE>
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	08 95       	ret
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	08 95       	ret

000025fe <_ZN14SoftwareSerial6listenEv>:
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	ec 01       	movw	r28, r24
    2604:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2606:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2608:	89 2b       	or	r24, r25
    260a:	f1 f0       	breq	.+60     	; 0x2648 <_ZN14SoftwareSerial6listenEv+0x4a>
    260c:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <_ZN14SoftwareSerial13active_objectE>
    2610:	90 91 01 07 	lds	r25, 0x0701	; 0x800701 <_ZN14SoftwareSerial13active_objectE+0x1>
    2614:	c8 17       	cp	r28, r24
    2616:	d9 07       	cpc	r29, r25
    2618:	b9 f0       	breq	.+46     	; 0x2648 <_ZN14SoftwareSerial6listenEv+0x4a>
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	11 f0       	breq	.+4      	; 0x2622 <_ZN14SoftwareSerial6listenEv+0x24>
    261e:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_ZN14SoftwareSerial13stopListeningEv>
    2622:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2624:	8e 7f       	andi	r24, 0xFE	; 254
    2626:	8e 8f       	std	Y+30, r24	; 0x1e
    2628:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    262c:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    2630:	d0 93 01 07 	sts	0x0701, r29	; 0x800701 <_ZN14SoftwareSerial13active_objectE+0x1>
    2634:	c0 93 00 07 	sts	0x0700, r28	; 0x800700 <_ZN14SoftwareSerial13active_objectE>
    2638:	eb 89       	ldd	r30, Y+19	; 0x13
    263a:	fc 89       	ldd	r31, Y+20	; 0x14
    263c:	90 81       	ld	r25, Z
    263e:	8d 89       	ldd	r24, Y+21	; 0x15
    2640:	89 2b       	or	r24, r25
    2642:	80 83       	st	Z, r24
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	01 c0       	rjmp	.+2      	; 0x264a <_ZN14SoftwareSerial6listenEv+0x4c>
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <__vector_3>:
    2650:	1f 92       	push	r1
    2652:	0f 92       	push	r0
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	0f 92       	push	r0
    2658:	11 24       	eor	r1, r1
    265a:	2f 93       	push	r18
    265c:	3f 93       	push	r19
    265e:	4f 93       	push	r20
    2660:	5f 93       	push	r21
    2662:	6f 93       	push	r22
    2664:	7f 93       	push	r23
    2666:	8f 93       	push	r24
    2668:	9f 93       	push	r25
    266a:	af 93       	push	r26
    266c:	bf 93       	push	r27
    266e:	ef 93       	push	r30
    2670:	ff 93       	push	r31
    2672:	e0 91 00 07 	lds	r30, 0x0700	; 0x800700 <_ZN14SoftwareSerial13active_objectE>
    2676:	f0 91 01 07 	lds	r31, 0x0701	; 0x800701 <_ZN14SoftwareSerial13active_objectE+0x1>
    267a:	30 97       	sbiw	r30, 0x00	; 0
    267c:	09 f4       	brne	.+2      	; 0x2680 <__vector_3+0x30>
    267e:	51 c0       	rjmp	.+162    	; 0x2722 <__vector_3+0xd2>
    2680:	96 8d       	ldd	r25, Z+30	; 0x1e
    2682:	a6 85       	ldd	r26, Z+14	; 0x0e
    2684:	b7 85       	ldd	r27, Z+15	; 0x0f
    2686:	85 85       	ldd	r24, Z+13	; 0x0d
    2688:	91 ff       	sbrs	r25, 1
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <__vector_3+0x44>
    268c:	9c 91       	ld	r25, X
    268e:	89 23       	and	r24, r25
    2690:	29 f4       	brne	.+10     	; 0x269c <__vector_3+0x4c>
    2692:	47 c0       	rjmp	.+142    	; 0x2722 <__vector_3+0xd2>
    2694:	9c 91       	ld	r25, X
    2696:	89 23       	and	r24, r25
    2698:	09 f0       	breq	.+2      	; 0x269c <__vector_3+0x4c>
    269a:	43 c0       	rjmp	.+134    	; 0x2722 <__vector_3+0xd2>
    269c:	a3 89       	ldd	r26, Z+19	; 0x13
    269e:	b4 89       	ldd	r27, Z+20	; 0x14
    26a0:	9c 91       	ld	r25, X
    26a2:	85 89       	ldd	r24, Z+21	; 0x15
    26a4:	80 95       	com	r24
    26a6:	89 23       	and	r24, r25
    26a8:	8c 93       	st	X, r24
    26aa:	86 89       	ldd	r24, Z+22	; 0x16
    26ac:	97 89       	ldd	r25, Z+23	; 0x17
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <__vector_3+0x5e>
    26b2:	60 8d       	ldd	r22, Z+24	; 0x18
    26b4:	71 8d       	ldd	r23, Z+25	; 0x19
    26b6:	a6 85       	ldd	r26, Z+14	; 0x0e
    26b8:	b7 85       	ldd	r27, Z+15	; 0x0f
    26ba:	55 85       	ldd	r21, Z+13	; 0x0d
    26bc:	38 e0       	ldi	r19, 0x08	; 8
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	cb 01       	movw	r24, r22
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <__vector_3+0x72>
    26c6:	82 2f       	mov	r24, r18
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	95 95       	asr	r25
    26cc:	87 95       	ror	r24
    26ce:	28 2f       	mov	r18, r24
    26d0:	4c 91       	ld	r20, X
    26d2:	45 23       	and	r20, r21
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <__vector_3+0x88>
    26d6:	20 68       	ori	r18, 0x80	; 128
    26d8:	31 50       	subi	r19, 0x01	; 1
    26da:	91 f7       	brne	.-28     	; 0x26c0 <__vector_3+0x70>
    26dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    26de:	81 fd       	sbrc	r24, 1
    26e0:	20 95       	com	r18
    26e2:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	8f 73       	andi	r24, 0x3F	; 63
    26ec:	99 27       	eor	r25, r25
    26ee:	30 91 be 06 	lds	r19, 0x06BE	; 0x8006be <_ZN14SoftwareSerial20_receive_buffer_headE>
    26f2:	38 17       	cp	r19, r24
    26f4:	49 f0       	breq	.+18     	; 0x2708 <__vector_3+0xb8>
    26f6:	a0 91 bf 06 	lds	r26, 0x06BF	; 0x8006bf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	a0 54       	subi	r26, 0x40	; 64
    26fe:	b9 4f       	sbci	r27, 0xF9	; 249
    2700:	2c 93       	st	X, r18
    2702:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2706:	03 c0       	rjmp	.+6      	; 0x270e <__vector_3+0xbe>
    2708:	86 8d       	ldd	r24, Z+30	; 0x1e
    270a:	81 60       	ori	r24, 0x01	; 1
    270c:	86 8f       	std	Z+30, r24	; 0x1e
    270e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2710:	93 8d       	ldd	r25, Z+27	; 0x1b
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <__vector_3+0xc2>
    2716:	a3 89       	ldd	r26, Z+19	; 0x13
    2718:	b4 89       	ldd	r27, Z+20	; 0x14
    271a:	9c 91       	ld	r25, X
    271c:	85 89       	ldd	r24, Z+21	; 0x15
    271e:	89 2b       	or	r24, r25
    2720:	8c 93       	st	X, r24
    2722:	ff 91       	pop	r31
    2724:	ef 91       	pop	r30
    2726:	bf 91       	pop	r27
    2728:	af 91       	pop	r26
    272a:	9f 91       	pop	r25
    272c:	8f 91       	pop	r24
    272e:	7f 91       	pop	r23
    2730:	6f 91       	pop	r22
    2732:	5f 91       	pop	r21
    2734:	4f 91       	pop	r20
    2736:	3f 91       	pop	r19
    2738:	2f 91       	pop	r18
    273a:	0f 90       	pop	r0
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	0f 90       	pop	r0
    2740:	1f 90       	pop	r1
    2742:	18 95       	reti

00002744 <_ZN14SoftwareSerialD1Ev>:
    2744:	2e e9       	ldi	r18, 0x9E	; 158
    2746:	35 e0       	ldi	r19, 0x05	; 5
    2748:	fc 01       	movw	r30, r24
    274a:	31 83       	std	Z+1, r19	; 0x01
    274c:	20 83       	st	Z, r18
    274e:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <_ZN14SoftwareSerial13stopListeningEv>

00002752 <_ZN14SoftwareSerial5setTXEh>:
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	ec 01       	movw	r28, r24
    275a:	16 2f       	mov	r17, r22
    275c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    275e:	66 95       	lsr	r22
    2760:	61 70       	andi	r22, 0x01	; 1
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	68 27       	eor	r22, r24
    2766:	81 2f       	mov	r24, r17
    2768:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	81 2f       	mov	r24, r17
    2770:	0e 94 b9 0b 	call	0x1772	; 0x1772 <pinMode>
    2774:	81 2f       	mov	r24, r17
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	fc 01       	movw	r30, r24
    277a:	e2 57       	subi	r30, 0x72	; 114
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	e4 91       	lpm	r30, Z
    2780:	e8 8b       	std	Y+16, r30	; 0x10
    2782:	fc 01       	movw	r30, r24
    2784:	ee 55       	subi	r30, 0x5E	; 94
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	e4 91       	lpm	r30, Z
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	ee 0f       	add	r30, r30
    278e:	ff 1f       	adc	r31, r31
    2790:	e0 54       	subi	r30, 0x40	; 64
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	85 91       	lpm	r24, Z+
    2796:	94 91       	lpm	r25, Z
    2798:	9a 8b       	std	Y+18, r25	; 0x12
    279a:	89 8b       	std	Y+17, r24	; 0x11
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	08 95       	ret

000027a4 <_ZN14SoftwareSerial5setRXEh>:
    27a4:	1f 93       	push	r17
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	ec 01       	movw	r28, r24
    27ac:	16 2f       	mov	r17, r22
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	81 2f       	mov	r24, r17
    27b2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <pinMode>
    27b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27b8:	81 fd       	sbrc	r24, 1
    27ba:	04 c0       	rjmp	.+8      	; 0x27c4 <_ZN14SoftwareSerial5setRXEh+0x20>
    27bc:	61 e0       	ldi	r22, 0x01	; 1
    27be:	81 2f       	mov	r24, r17
    27c0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
    27c4:	1c 87       	std	Y+12, r17	; 0x0c
    27c6:	81 2f       	mov	r24, r17
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	fc 01       	movw	r30, r24
    27cc:	e2 57       	subi	r30, 0x72	; 114
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	e4 91       	lpm	r30, Z
    27d2:	ed 87       	std	Y+13, r30	; 0x0d
    27d4:	fc 01       	movw	r30, r24
    27d6:	ee 55       	subi	r30, 0x5E	; 94
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	e4 91       	lpm	r30, Z
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	ee 0f       	add	r30, r30
    27e0:	ff 1f       	adc	r31, r31
    27e2:	ea 54       	subi	r30, 0x4A	; 74
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	85 91       	lpm	r24, Z+
    27e8:	94 91       	lpm	r25, Z
    27ea:	9f 87       	std	Y+15, r25	; 0x0f
    27ec:	8e 87       	std	Y+14, r24	; 0x0e
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	08 95       	ret

000027f6 <_ZN14SoftwareSerialC1Ehhb>:
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	ec 01       	movw	r28, r24
    27fe:	16 2f       	mov	r17, r22
    2800:	1b 82       	std	Y+3, r1	; 0x03
    2802:	1a 82       	std	Y+2, r1	; 0x02
    2804:	88 ee       	ldi	r24, 0xE8	; 232
    2806:	93 e0       	ldi	r25, 0x03	; 3
    2808:	a0 e0       	ldi	r26, 0x00	; 0
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	8c 83       	std	Y+4, r24	; 0x04
    280e:	9d 83       	std	Y+5, r25	; 0x05
    2810:	ae 83       	std	Y+6, r26	; 0x06
    2812:	bf 83       	std	Y+7, r27	; 0x07
    2814:	8e e9       	ldi	r24, 0x9E	; 158
    2816:	95 e0       	ldi	r25, 0x05	; 5
    2818:	99 83       	std	Y+1, r25	; 0x01
    281a:	88 83       	st	Y, r24
    281c:	1f 8a       	std	Y+23, r1	; 0x17
    281e:	1e 8a       	std	Y+22, r1	; 0x16
    2820:	19 8e       	std	Y+25, r1	; 0x19
    2822:	18 8e       	std	Y+24, r1	; 0x18
    2824:	1b 8e       	std	Y+27, r1	; 0x1b
    2826:	1a 8e       	std	Y+26, r1	; 0x1a
    2828:	1d 8e       	std	Y+29, r1	; 0x1d
    282a:	1c 8e       	std	Y+28, r1	; 0x1c
    282c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    282e:	8e 7f       	andi	r24, 0xFE	; 254
    2830:	20 fb       	bst	r18, 0
    2832:	81 f9       	bld	r24, 1
    2834:	8e 8f       	std	Y+30, r24	; 0x1e
    2836:	64 2f       	mov	r22, r20
    2838:	ce 01       	movw	r24, r28
    283a:	0e 94 a9 13 	call	0x2752	; 0x2752 <_ZN14SoftwareSerial5setTXEh>
    283e:	61 2f       	mov	r22, r17
    2840:	ce 01       	movw	r24, r28
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <_ZN14SoftwareSerial5setRXEh>

0000284c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	ec 01       	movw	r28, r24
    2852:	9a 01       	movw	r18, r20
    2854:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2856:	1b 8e       	std	Y+27, r1	; 0x1b
    2858:	1a 8e       	std	Y+26, r1	; 0x1a
    285a:	19 8e       	std	Y+25, r1	; 0x19
    285c:	18 8e       	std	Y+24, r1	; 0x18
    285e:	1f 8a       	std	Y+23, r1	; 0x17
    2860:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	79 e0       	ldi	r23, 0x09	; 9
    2866:	8d e3       	ldi	r24, 0x3D	; 61
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <__divmodsi4>
    286e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2870:	24 30       	cpi	r18, 0x04	; 4
    2872:	31 05       	cpc	r19, r1
    2874:	18 f0       	brcs	.+6      	; 0x287c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2876:	c9 01       	movw	r24, r18
    2878:	03 97       	sbiw	r24, 0x03	; 3
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2880:	9d 8f       	std	Y+29, r25	; 0x1d
    2882:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2884:	6c 85       	ldd	r22, Y+12	; 0x0c
    2886:	66 31       	cpi	r22, 0x16	; 22
    2888:	08 f0       	brcs	.+2      	; 0x288c <_ZN14SoftwareSerial5beginEl+0x40>
    288a:	69 c0       	rjmp	.+210    	; 0x295e <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    288c:	c9 01       	movw	r24, r18
    288e:	96 95       	lsr	r25
    2890:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2892:	84 31       	cpi	r24, 0x14	; 20
    2894:	91 05       	cpc	r25, r1
    2896:	10 f0       	brcs	.+4      	; 0x289c <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    2898:	43 97       	sbiw	r24, 0x13	; 19
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    28a0:	9f 8b       	std	Y+23, r25	; 0x17
    28a2:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    28a4:	36 97       	sbiw	r30, 0x06	; 6
    28a6:	18 f0       	brcs	.+6      	; 0x28ae <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    28a8:	c9 01       	movw	r24, r18
    28aa:	05 97       	sbiw	r24, 0x05	; 5
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    28b2:	99 8f       	std	Y+25, r25	; 0x19
    28b4:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    28b6:	c9 01       	movw	r24, r18
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	28 0f       	add	r18, r24
    28be:	39 1f       	adc	r19, r25
    28c0:	36 95       	lsr	r19
    28c2:	27 95       	ror	r18
    28c4:	36 95       	lsr	r19
    28c6:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    28c8:	2d 30       	cpi	r18, 0x0D	; 13
    28ca:	31 05       	cpc	r19, r1
    28cc:	18 f0       	brcs	.+6      	; 0x28d4 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    28ce:	2c 50       	subi	r18, 0x0C	; 12
    28d0:	31 09       	sbc	r19, r1
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    28d4:	21 e0       	ldi	r18, 0x01	; 1
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    28d8:	3b 8f       	std	Y+27, r19	; 0x1b
    28da:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    28dc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    28e0:	68 30       	cpi	r22, 0x08	; 8
    28e2:	50 f0       	brcs	.+20     	; 0x28f8 <_ZN14SoftwareSerial5beginEl+0xac>
    28e4:	21 e0       	ldi	r18, 0x01	; 1
    28e6:	6e 30       	cpi	r22, 0x0E	; 14
    28e8:	08 f4       	brcc	.+2      	; 0x28ec <_ZN14SoftwareSerial5beginEl+0xa0>
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <_ZN14SoftwareSerial5beginEl+0xa6>
    28f0:	88 0f       	add	r24, r24
    28f2:	2a 95       	dec	r18
    28f4:	ea f7       	brpl	.-6      	; 0x28f0 <_ZN14SoftwareSerial5beginEl+0xa4>
    28f6:	01 c0       	rjmp	.+2      	; 0x28fa <_ZN14SoftwareSerial5beginEl+0xae>
    28f8:	84 e0       	ldi	r24, 0x04	; 4
    28fa:	89 2b       	or	r24, r25
    28fc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2900:	9c 85       	ldd	r25, Y+12	; 0x0c
    2902:	98 30       	cpi	r25, 0x08	; 8
    2904:	38 f0       	brcs	.+14     	; 0x2914 <_ZN14SoftwareSerial5beginEl+0xc8>
    2906:	9e 30       	cpi	r25, 0x0E	; 14
    2908:	40 f0       	brcs	.+16     	; 0x291a <_ZN14SoftwareSerial5beginEl+0xce>
    290a:	96 31       	cpi	r25, 0x16	; 22
    290c:	48 f0       	brcs	.+18     	; 0x2920 <_ZN14SoftwareSerial5beginEl+0xd4>
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <_ZN14SoftwareSerial5beginEl+0xd8>
    2914:	2d e6       	ldi	r18, 0x6D	; 109
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <_ZN14SoftwareSerial5beginEl+0xd8>
    291a:	2b e6       	ldi	r18, 0x6B	; 107
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <_ZN14SoftwareSerial5beginEl+0xd8>
    2920:	2c e6       	ldi	r18, 0x6C	; 108
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	3c 8b       	std	Y+20, r19	; 0x14
    2926:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2928:	98 30       	cpi	r25, 0x08	; 8
    292a:	30 f4       	brcc	.+12     	; 0x2938 <_ZN14SoftwareSerial5beginEl+0xec>
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <_ZN14SoftwareSerial5beginEl+0xe6>
    2930:	88 0f       	add	r24, r24
    2932:	9a 95       	dec	r25
    2934:	ea f7       	brpl	.-6      	; 0x2930 <_ZN14SoftwareSerial5beginEl+0xe4>
    2936:	0e c0       	rjmp	.+28     	; 0x2954 <_ZN14SoftwareSerial5beginEl+0x108>
    2938:	29 2f       	mov	r18, r25
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	9e 30       	cpi	r25, 0x0E	; 14
    293e:	18 f4       	brcc	.+6      	; 0x2946 <_ZN14SoftwareSerial5beginEl+0xfa>
    2940:	28 50       	subi	r18, 0x08	; 8
    2942:	31 09       	sbc	r19, r1
    2944:	02 c0       	rjmp	.+4      	; 0x294a <_ZN14SoftwareSerial5beginEl+0xfe>
    2946:	2e 50       	subi	r18, 0x0E	; 14
    2948:	31 09       	sbc	r19, r1
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	01 c0       	rjmp	.+2      	; 0x2950 <_ZN14SoftwareSerial5beginEl+0x104>
    294e:	88 0f       	add	r24, r24
    2950:	2a 95       	dec	r18
    2952:	ea f7       	brpl	.-6      	; 0x294e <_ZN14SoftwareSerial5beginEl+0x102>
    2954:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2956:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2958:	9d 8d       	ldd	r25, Y+29	; 0x1d
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    295e:	ce 01       	movw	r24, r28
}
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2964:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_ZN14SoftwareSerial6listenEv>

00002968 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2968:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <_ZN7TwoWire14rxBufferLengthE>
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	20 91 37 07 	lds	r18, 0x0737	; 0x800737 <_ZN7TwoWire13rxBufferIndexE>
    2972:	82 1b       	sub	r24, r18
    2974:	91 09       	sbc	r25, r1
    2976:	08 95       	ret

00002978 <_ZN7TwoWire4readEv>:
    2978:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <_ZN7TwoWire13rxBufferIndexE>
    297c:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <_ZN7TwoWire14rxBufferLengthE>
    2980:	98 17       	cp	r25, r24
    2982:	50 f4       	brcc	.+20     	; 0x2998 <_ZN7TwoWire4readEv+0x20>
    2984:	e9 2f       	mov	r30, r25
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	e8 5c       	subi	r30, 0xC8	; 200
    298a:	f8 4f       	sbci	r31, 0xF8	; 248
    298c:	20 81       	ld	r18, Z
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	9f 5f       	subi	r25, 0xFF	; 255
    2992:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <_ZN7TwoWire13rxBufferIndexE>
    2996:	02 c0       	rjmp	.+4      	; 0x299c <_ZN7TwoWire4readEv+0x24>
    2998:	2f ef       	ldi	r18, 0xFF	; 255
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	c9 01       	movw	r24, r18
    299e:	08 95       	ret

000029a0 <_ZN7TwoWire4peekEv>:
    29a0:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <_ZN7TwoWire13rxBufferIndexE>
    29a4:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <_ZN7TwoWire14rxBufferLengthE>
    29a8:	e8 17       	cp	r30, r24
    29aa:	30 f4       	brcc	.+12     	; 0x29b8 <_ZN7TwoWire4peekEv+0x18>
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	e8 5c       	subi	r30, 0xC8	; 200
    29b0:	f8 4f       	sbci	r31, 0xF8	; 248
    29b2:	80 81       	ld	r24, Z
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	08 95       	ret
    29b8:	8f ef       	ldi	r24, 0xFF	; 255
    29ba:	9f ef       	ldi	r25, 0xFF	; 255
    29bc:	08 95       	ret

000029be <_ZN7TwoWire5flushEv>:
    29be:	08 95       	ret

000029c0 <_ZN7TwoWire16onReceiveServiceEPhi>:
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	ec 01       	movw	r28, r24
    29c6:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <_ZN7TwoWire14user_onReceiveE>
    29ca:	f0 91 0f 07 	lds	r31, 0x070F	; 0x80070f <_ZN7TwoWire14user_onReceiveE+0x1>
    29ce:	30 97       	sbiw	r30, 0x00	; 0
    29d0:	f1 f0       	breq	.+60     	; 0x2a0e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    29d2:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <_ZN7TwoWire13rxBufferIndexE>
    29d6:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <_ZN7TwoWire14rxBufferLengthE>
    29da:	98 17       	cp	r25, r24
    29dc:	c0 f0       	brcs	.+48     	; 0x2a0e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	29 2f       	mov	r18, r25
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	26 17       	cp	r18, r22
    29e6:	37 07       	cpc	r19, r23
    29e8:	54 f4       	brge	.+20     	; 0x29fe <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    29ea:	de 01       	movw	r26, r28
    29ec:	a2 0f       	add	r26, r18
    29ee:	b3 1f       	adc	r27, r19
    29f0:	4c 91       	ld	r20, X
    29f2:	d9 01       	movw	r26, r18
    29f4:	a8 5c       	subi	r26, 0xC8	; 200
    29f6:	b8 4f       	sbci	r27, 0xF8	; 248
    29f8:	4c 93       	st	X, r20
    29fa:	9f 5f       	subi	r25, 0xFF	; 255
    29fc:	f1 cf       	rjmp	.-30     	; 0x29e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    29fe:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <_ZN7TwoWire13rxBufferIndexE>
    2a02:	60 93 36 07 	sts	0x0736, r22	; 0x800736 <_ZN7TwoWire14rxBufferLengthE>
    2a06:	cb 01       	movw	r24, r22
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	09 94       	ijmp
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	08 95       	ret

00002a14 <_ZN7TwoWire16onRequestServiceEv>:
    2a14:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <_ZN7TwoWire14user_onRequestE>
    2a18:	f0 91 11 07 	lds	r31, 0x0711	; 0x800711 <_ZN7TwoWire14user_onRequestE+0x1>
    2a1c:	30 97       	sbiw	r30, 0x00	; 0
    2a1e:	29 f0       	breq	.+10     	; 0x2a2a <_ZN7TwoWire16onRequestServiceEv+0x16>
    2a20:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <_ZN7TwoWire13txBufferIndexE>
    2a24:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <_ZN7TwoWire14txBufferLengthE>
    2a28:	09 94       	ijmp
    2a2a:	08 95       	ret

00002a2c <_ZN7TwoWire5writeEPKhj>:
    2a2c:	cf 92       	push	r12
    2a2e:	df 92       	push	r13
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	7c 01       	movw	r14, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8a 01       	movw	r16, r20
    2a42:	20 91 12 07 	lds	r18, 0x0712	; 0x800712 <_ZN7TwoWire12transmittingE>
    2a46:	22 23       	and	r18, r18
    2a48:	89 f0       	breq	.+34     	; 0x2a6c <_ZN7TwoWire5writeEPKhj+0x40>
    2a4a:	eb 01       	movw	r28, r22
    2a4c:	6b 01       	movw	r12, r22
    2a4e:	c4 0e       	add	r12, r20
    2a50:	d5 1e       	adc	r13, r21
    2a52:	cc 15       	cp	r28, r12
    2a54:	dd 05       	cpc	r29, r13
    2a56:	69 f0       	breq	.+26     	; 0x2a72 <_ZN7TwoWire5writeEPKhj+0x46>
    2a58:	69 91       	ld	r22, Y+
    2a5a:	d7 01       	movw	r26, r14
    2a5c:	ed 91       	ld	r30, X+
    2a5e:	fc 91       	ld	r31, X
    2a60:	01 90       	ld	r0, Z+
    2a62:	f0 81       	ld	r31, Z
    2a64:	e0 2d       	mov	r30, r0
    2a66:	c7 01       	movw	r24, r14
    2a68:	09 95       	icall
    2a6a:	f3 cf       	rjmp	.-26     	; 0x2a52 <_ZN7TwoWire5writeEPKhj+0x26>
    2a6c:	64 2f       	mov	r22, r20
    2a6e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <twi_transmit>
    2a72:	c8 01       	movw	r24, r16
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	08 95       	ret

00002a86 <_ZN7TwoWire5writeEh>:
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	1f 92       	push	r1
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	69 83       	std	Y+1, r22	; 0x01
    2a92:	20 91 12 07 	lds	r18, 0x0712	; 0x800712 <_ZN7TwoWire12transmittingE>
    2a96:	22 23       	and	r18, r18
    2a98:	d1 f0       	breq	.+52     	; 0x2ace <_ZN7TwoWire5writeEh+0x48>
    2a9a:	20 91 13 07 	lds	r18, 0x0713	; 0x800713 <_ZN7TwoWire14txBufferLengthE>
    2a9e:	20 32       	cpi	r18, 0x20	; 32
    2aa0:	40 f0       	brcs	.+16     	; 0x2ab2 <_ZN7TwoWire5writeEh+0x2c>
    2aa2:	21 e0       	ldi	r18, 0x01	; 1
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	33 83       	std	Z+3, r19	; 0x03
    2aaa:	22 83       	std	Z+2, r18	; 0x02
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	15 c0       	rjmp	.+42     	; 0x2adc <_ZN7TwoWire5writeEh+0x56>
    2ab2:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <_ZN7TwoWire13txBufferIndexE>
    2ab6:	e8 2f       	mov	r30, r24
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	eb 5e       	subi	r30, 0xEB	; 235
    2abc:	f8 4f       	sbci	r31, 0xF8	; 248
    2abe:	99 81       	ldd	r25, Y+1	; 0x01
    2ac0:	90 83       	st	Z, r25
    2ac2:	8f 5f       	subi	r24, 0xFF	; 255
    2ac4:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <_ZN7TwoWire13txBufferIndexE>
    2ac8:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <_ZN7TwoWire14txBufferLengthE>
    2acc:	05 c0       	rjmp	.+10     	; 0x2ad8 <_ZN7TwoWire5writeEh+0x52>
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <twi_transmit>
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0f 90       	pop	r0
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	08 95       	ret

00002ae4 <_ZN7TwoWireC1Ev>:
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	13 82       	std	Z+3, r1	; 0x03
    2ae8:	12 82       	std	Z+2, r1	; 0x02
    2aea:	88 ee       	ldi	r24, 0xE8	; 232
    2aec:	93 e0       	ldi	r25, 0x03	; 3
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	84 83       	std	Z+4, r24	; 0x04
    2af4:	95 83       	std	Z+5, r25	; 0x05
    2af6:	a6 83       	std	Z+6, r26	; 0x06
    2af8:	b7 83       	std	Z+7, r27	; 0x07
    2afa:	80 eb       	ldi	r24, 0xB0	; 176
    2afc:	95 e0       	ldi	r25, 0x05	; 5
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
    2b02:	08 95       	ret

00002b04 <_ZN7TwoWire5beginEv>:
    2b04:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <_ZN7TwoWire13rxBufferIndexE>
    2b08:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <_ZN7TwoWire14rxBufferLengthE>
    2b0c:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <_ZN7TwoWire13txBufferIndexE>
    2b10:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <_ZN7TwoWire14txBufferLengthE>
    2b14:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <twi_init>
    2b18:	8a e0       	ldi	r24, 0x0A	; 10
    2b1a:	95 e1       	ldi	r25, 0x15	; 21
    2b1c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <twi_attachSlaveTxEvent>
    2b20:	80 ee       	ldi	r24, 0xE0	; 224
    2b22:	94 e1       	ldi	r25, 0x14	; 20
    2b24:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <twi_attachSlaveRxEvent>

00002b28 <_ZN7TwoWire17beginTransmissionEh>:
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <_ZN7TwoWire12transmittingE>
    2b2e:	60 93 35 07 	sts	0x0735, r22	; 0x800735 <_ZN7TwoWire9txAddressE>
    2b32:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <_ZN7TwoWire13txBufferIndexE>
    2b36:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <_ZN7TwoWire14txBufferLengthE>
    2b3a:	08 95       	ret

00002b3c <_ZN7TwoWire15endTransmissionEh>:
    2b3c:	0f 93       	push	r16
    2b3e:	06 2f       	mov	r16, r22
    2b40:	21 e0       	ldi	r18, 0x01	; 1
    2b42:	40 91 13 07 	lds	r20, 0x0713	; 0x800713 <_ZN7TwoWire14txBufferLengthE>
    2b46:	65 e1       	ldi	r22, 0x15	; 21
    2b48:	77 e0       	ldi	r23, 0x07	; 7
    2b4a:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <_ZN7TwoWire9txAddressE>
    2b4e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <twi_writeTo>
    2b52:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <_ZN7TwoWire13txBufferIndexE>
    2b56:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <_ZN7TwoWire14txBufferLengthE>
    2b5a:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <_ZN7TwoWire12transmittingE>
    2b5e:	0f 91       	pop	r16
    2b60:	08 95       	ret

00002b62 <_ZN7TwoWire15endTransmissionEv>:
    2b62:	61 e0       	ldi	r22, 0x01	; 1
    2b64:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <_ZN7TwoWire15endTransmissionEh>

00002b68 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	97 e0       	ldi	r25, 0x07	; 7
    2b6c:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <_ZN7TwoWireC1Ev>

00002b70 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2b70:	08 95       	ret

00002b72 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2b72:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <twi_state>
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <twi_sendStop>
    2b7c:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <twi_inRepStart>
    2b80:	61 e0       	ldi	r22, 0x01	; 1
    2b82:	82 e1       	ldi	r24, 0x12	; 18
    2b84:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	83 e1       	ldi	r24, 0x13	; 19
    2b8c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <digitalWrite>
    2b90:	e9 eb       	ldi	r30, 0xB9	; 185
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	8e 7f       	andi	r24, 0xFE	; 254
    2b98:	80 83       	st	Z, r24
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8d 7f       	andi	r24, 0xFD	; 253
    2b9e:	80 83       	st	Z, r24
    2ba0:	88 e4       	ldi	r24, 0x48	; 72
    2ba2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2ba6:	85 e4       	ldi	r24, 0x45	; 69
    2ba8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2bac:	08 95       	ret

00002bae <twi_writeTo>:
    2bae:	0f 93       	push	r16
    2bb0:	41 32       	cpi	r20, 0x21	; 33
    2bb2:	08 f0       	brcs	.+2      	; 0x2bb6 <twi_writeTo+0x8>
    2bb4:	4a c0       	rjmp	.+148    	; 0x2c4a <twi_writeTo+0x9c>
    2bb6:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <twi_state>
    2bba:	91 11       	cpse	r25, r1
    2bbc:	fc cf       	rjmp	.-8      	; 0x2bb6 <twi_writeTo+0x8>
    2bbe:	32 e0       	ldi	r19, 0x02	; 2
    2bc0:	30 93 c5 07 	sts	0x07C5, r19	; 0x8007c5 <twi_state>
    2bc4:	00 93 c3 07 	sts	0x07C3, r16	; 0x8007c3 <twi_sendStop>
    2bc8:	3f ef       	ldi	r19, 0xFF	; 255
    2bca:	30 93 58 07 	sts	0x0758, r19	; 0x800758 <twi_error>
    2bce:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <twi_masterBufferIndex>
    2bd2:	40 93 9c 07 	sts	0x079C, r20	; 0x80079c <twi_masterBufferLength>
    2bd6:	56 2f       	mov	r21, r22
    2bd8:	ae e9       	ldi	r26, 0x9E	; 158
    2bda:	b7 e0       	ldi	r27, 0x07	; 7
    2bdc:	fb 01       	movw	r30, r22
    2bde:	3e 2f       	mov	r19, r30
    2be0:	35 1b       	sub	r19, r21
    2be2:	34 17       	cp	r19, r20
    2be4:	18 f4       	brcc	.+6      	; 0x2bec <twi_writeTo+0x3e>
    2be6:	31 91       	ld	r19, Z+
    2be8:	3d 93       	st	X+, r19
    2bea:	f9 cf       	rjmp	.-14     	; 0x2bde <twi_writeTo+0x30>
    2bec:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <twi_slarw>
    2bf0:	30 91 c4 07 	lds	r19, 0x07C4	; 0x8007c4 <twi_slarw>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	83 2b       	or	r24, r19
    2bf8:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <twi_slarw>
    2bfc:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <twi_inRepStart>
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	61 f4       	brne	.+24     	; 0x2c1c <twi_writeTo+0x6e>
    2c04:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <twi_inRepStart>
    2c08:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <twi_slarw>
    2c0c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c10:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c14:	83 fd       	sbrc	r24, 3
    2c16:	f8 cf       	rjmp	.-16     	; 0x2c08 <twi_writeTo+0x5a>
    2c18:	85 ec       	ldi	r24, 0xC5	; 197
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <twi_writeTo+0x70>
    2c1c:	85 ee       	ldi	r24, 0xE5	; 229
    2c1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c22:	22 23       	and	r18, r18
    2c24:	21 f0       	breq	.+8      	; 0x2c2e <twi_writeTo+0x80>
    2c26:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <twi_state>
    2c2a:	82 30       	cpi	r24, 0x02	; 2
    2c2c:	d1 f3       	breq	.-12     	; 0x2c22 <twi_writeTo+0x74>
    2c2e:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <twi_error>
    2c32:	8f 3f       	cpi	r24, 0xFF	; 255
    2c34:	79 f0       	breq	.+30     	; 0x2c54 <twi_writeTo+0xa6>
    2c36:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <twi_error>
    2c3a:	80 32       	cpi	r24, 0x20	; 32
    2c3c:	41 f0       	breq	.+16     	; 0x2c4e <twi_writeTo+0xa0>
    2c3e:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <twi_error>
    2c42:	80 33       	cpi	r24, 0x30	; 48
    2c44:	31 f0       	breq	.+12     	; 0x2c52 <twi_writeTo+0xa4>
    2c46:	94 e0       	ldi	r25, 0x04	; 4
    2c48:	05 c0       	rjmp	.+10     	; 0x2c54 <twi_writeTo+0xa6>
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	03 c0       	rjmp	.+6      	; 0x2c54 <twi_writeTo+0xa6>
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	01 c0       	rjmp	.+2      	; 0x2c54 <twi_writeTo+0xa6>
    2c52:	93 e0       	ldi	r25, 0x03	; 3
    2c54:	89 2f       	mov	r24, r25
    2c56:	0f 91       	pop	r16
    2c58:	08 95       	ret

00002c5a <twi_transmit>:
    2c5a:	40 91 7a 07 	lds	r20, 0x077A	; 0x80077a <twi_txBufferLength>
    2c5e:	26 2f       	mov	r18, r22
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	24 0f       	add	r18, r20
    2c64:	31 1d       	adc	r19, r1
    2c66:	21 32       	cpi	r18, 0x21	; 33
    2c68:	31 05       	cpc	r19, r1
    2c6a:	dc f4       	brge	.+54     	; 0x2ca2 <twi_transmit+0x48>
    2c6c:	20 91 c5 07 	lds	r18, 0x07C5	; 0x8007c5 <twi_state>
    2c70:	24 30       	cpi	r18, 0x04	; 4
    2c72:	c9 f4       	brne	.+50     	; 0x2ca6 <twi_transmit+0x4c>
    2c74:	fc 01       	movw	r30, r24
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	86 17       	cp	r24, r22
    2c7c:	58 f4       	brcc	.+22     	; 0x2c94 <twi_transmit+0x3a>
    2c7e:	30 91 7a 07 	lds	r19, 0x077A	; 0x80077a <twi_txBufferLength>
    2c82:	21 91       	ld	r18, Z+
    2c84:	dc 01       	movw	r26, r24
    2c86:	a4 58       	subi	r26, 0x84	; 132
    2c88:	b8 4f       	sbci	r27, 0xF8	; 248
    2c8a:	a3 0f       	add	r26, r19
    2c8c:	b1 1d       	adc	r27, r1
    2c8e:	2c 93       	st	X, r18
    2c90:	01 96       	adiw	r24, 0x01	; 1
    2c92:	f3 cf       	rjmp	.-26     	; 0x2c7a <twi_transmit+0x20>
    2c94:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <twi_txBufferLength>
    2c98:	68 0f       	add	r22, r24
    2c9a:	60 93 7a 07 	sts	0x077A, r22	; 0x80077a <twi_txBufferLength>
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	08 95       	ret
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	08 95       	ret
    2ca6:	82 e0       	ldi	r24, 0x02	; 2
    2ca8:	08 95       	ret

00002caa <twi_attachSlaveRxEvent>:
    2caa:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <twi_onSlaveReceive+0x1>
    2cae:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <twi_onSlaveReceive>
    2cb2:	08 95       	ret

00002cb4 <twi_attachSlaveTxEvent>:
    2cb4:	90 93 c1 07 	sts	0x07C1, r25	; 0x8007c1 <twi_onSlaveTransmit+0x1>
    2cb8:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <twi_onSlaveTransmit>
    2cbc:	08 95       	ret

00002cbe <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2cbe:	85 ed       	ldi	r24, 0xD5	; 213
    2cc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2cc4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2cc8:	84 fd       	sbrc	r24, 4
    2cca:	fc cf       	rjmp	.-8      	; 0x2cc4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ccc:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <twi_state>
    2cd0:	08 95       	ret

00002cd2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2cd2:	85 ec       	ldi	r24, 0xC5	; 197
    2cd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2cd8:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <twi_state>
    2cdc:	08 95       	ret

00002cde <__vector_24>:
}

ISR(TWI_vect)
{
    2cde:	1f 92       	push	r1
    2ce0:	0f 92       	push	r0
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	0f 92       	push	r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	2f 93       	push	r18
    2cea:	3f 93       	push	r19
    2cec:	4f 93       	push	r20
    2cee:	5f 93       	push	r21
    2cf0:	6f 93       	push	r22
    2cf2:	7f 93       	push	r23
    2cf4:	8f 93       	push	r24
    2cf6:	9f 93       	push	r25
    2cf8:	af 93       	push	r26
    2cfa:	bf 93       	push	r27
    2cfc:	ef 93       	push	r30
    2cfe:	ff 93       	push	r31
  switch(TW_STATUS){
    2d00:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2d04:	88 7f       	andi	r24, 0xF8	; 248
    2d06:	80 36       	cpi	r24, 0x60	; 96
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <__vector_24+0x2e>
    2d0a:	9e c0       	rjmp	.+316    	; 0x2e48 <__vector_24+0x16a>
    2d0c:	78 f5       	brcc	.+94     	; 0x2d6c <__vector_24+0x8e>
    2d0e:	88 32       	cpi	r24, 0x28	; 40
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <__vector_24+0x36>
    2d12:	5d c0       	rjmp	.+186    	; 0x2dce <__vector_24+0xf0>
    2d14:	90 f4       	brcc	.+36     	; 0x2d3a <__vector_24+0x5c>
    2d16:	80 31       	cpi	r24, 0x10	; 16
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <__vector_24+0x3e>
    2d1a:	56 c0       	rjmp	.+172    	; 0x2dc8 <__vector_24+0xea>
    2d1c:	38 f4       	brcc	.+14     	; 0x2d2c <__vector_24+0x4e>
    2d1e:	88 23       	and	r24, r24
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <__vector_24+0x46>
    2d22:	f5 c0       	rjmp	.+490    	; 0x2f0e <__vector_24+0x230>
    2d24:	88 30       	cpi	r24, 0x08	; 8
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <__vector_24+0x4c>
    2d28:	4f c0       	rjmp	.+158    	; 0x2dc8 <__vector_24+0xea>
    2d2a:	f5 c0       	rjmp	.+490    	; 0x2f16 <__vector_24+0x238>
    2d2c:	88 31       	cpi	r24, 0x18	; 24
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <__vector_24+0x54>
    2d30:	4e c0       	rjmp	.+156    	; 0x2dce <__vector_24+0xf0>
    2d32:	80 32       	cpi	r24, 0x20	; 32
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <__vector_24+0x5a>
    2d36:	5f c0       	rjmp	.+190    	; 0x2df6 <__vector_24+0x118>
    2d38:	ee c0       	rjmp	.+476    	; 0x2f16 <__vector_24+0x238>
    2d3a:	80 34       	cpi	r24, 0x40	; 64
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <__vector_24+0x62>
    2d3e:	6a c0       	rjmp	.+212    	; 0x2e14 <__vector_24+0x136>
    2d40:	58 f4       	brcc	.+22     	; 0x2d58 <__vector_24+0x7a>
    2d42:	80 33       	cpi	r24, 0x30	; 48
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <__vector_24+0x6a>
    2d46:	57 c0       	rjmp	.+174    	; 0x2df6 <__vector_24+0x118>
    2d48:	88 33       	cpi	r24, 0x38	; 56
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <__vector_24+0x70>
    2d4c:	e4 c0       	rjmp	.+456    	; 0x2f16 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2d4e:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <twi_error>
      twi_releaseBus();
    2d52:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <twi_releaseBus>
      break;
    2d56:	df c0       	rjmp	.+446    	; 0x2f16 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2d58:	80 35       	cpi	r24, 0x50	; 80
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <__vector_24+0x80>
    2d5c:	4f c0       	rjmp	.+158    	; 0x2dfc <__vector_24+0x11e>
    2d5e:	88 35       	cpi	r24, 0x58	; 88
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <__vector_24+0x86>
    2d62:	5d c0       	rjmp	.+186    	; 0x2e1e <__vector_24+0x140>
    2d64:	88 34       	cpi	r24, 0x48	; 72
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <__vector_24+0x8c>
    2d68:	d6 c0       	rjmp	.+428    	; 0x2f16 <__vector_24+0x238>
    2d6a:	d3 c0       	rjmp	.+422    	; 0x2f12 <__vector_24+0x234>
    2d6c:	88 39       	cpi	r24, 0x98	; 152
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <__vector_24+0x94>
    2d70:	c4 c0       	rjmp	.+392    	; 0x2efa <__vector_24+0x21c>
    2d72:	a8 f4       	brcc	.+42     	; 0x2d9e <__vector_24+0xc0>
    2d74:	88 37       	cpi	r24, 0x78	; 120
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <__vector_24+0x9c>
    2d78:	67 c0       	rjmp	.+206    	; 0x2e48 <__vector_24+0x16a>
    2d7a:	38 f4       	brcc	.+14     	; 0x2d8a <__vector_24+0xac>
    2d7c:	88 36       	cpi	r24, 0x68	; 104
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <__vector_24+0xa4>
    2d80:	63 c0       	rjmp	.+198    	; 0x2e48 <__vector_24+0x16a>
    2d82:	80 37       	cpi	r24, 0x70	; 112
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <__vector_24+0xaa>
    2d86:	60 c0       	rjmp	.+192    	; 0x2e48 <__vector_24+0x16a>
    2d88:	c6 c0       	rjmp	.+396    	; 0x2f16 <__vector_24+0x238>
    2d8a:	88 38       	cpi	r24, 0x88	; 136
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <__vector_24+0xb2>
    2d8e:	b5 c0       	rjmp	.+362    	; 0x2efa <__vector_24+0x21c>
    2d90:	80 39       	cpi	r24, 0x90	; 144
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <__vector_24+0xb8>
    2d94:	5f c0       	rjmp	.+190    	; 0x2e54 <__vector_24+0x176>
    2d96:	80 38       	cpi	r24, 0x80	; 128
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <__vector_24+0xbe>
    2d9a:	bd c0       	rjmp	.+378    	; 0x2f16 <__vector_24+0x238>
    2d9c:	5b c0       	rjmp	.+182    	; 0x2e54 <__vector_24+0x176>
    2d9e:	80 3b       	cpi	r24, 0xB0	; 176
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <__vector_24+0xc6>
    2da2:	83 c0       	rjmp	.+262    	; 0x2eaa <__vector_24+0x1cc>
    2da4:	38 f4       	brcc	.+14     	; 0x2db4 <__vector_24+0xd6>
    2da6:	80 3a       	cpi	r24, 0xA0	; 160
    2da8:	09 f4       	brne	.+2      	; 0x2dac <__vector_24+0xce>
    2daa:	66 c0       	rjmp	.+204    	; 0x2e78 <__vector_24+0x19a>
    2dac:	88 3a       	cpi	r24, 0xA8	; 168
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <__vector_24+0xd4>
    2db0:	7c c0       	rjmp	.+248    	; 0x2eaa <__vector_24+0x1cc>
    2db2:	b1 c0       	rjmp	.+354    	; 0x2f16 <__vector_24+0x238>
    2db4:	80 3c       	cpi	r24, 0xC0	; 192
    2db6:	09 f4       	brne	.+2      	; 0x2dba <__vector_24+0xdc>
    2db8:	a4 c0       	rjmp	.+328    	; 0x2f02 <__vector_24+0x224>
    2dba:	88 3c       	cpi	r24, 0xC8	; 200
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <__vector_24+0xe2>
    2dbe:	a1 c0       	rjmp	.+322    	; 0x2f02 <__vector_24+0x224>
    2dc0:	88 3b       	cpi	r24, 0xB8	; 184
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <__vector_24+0xe8>
    2dc4:	87 c0       	rjmp	.+270    	; 0x2ed4 <__vector_24+0x1f6>
    2dc6:	a7 c0       	rjmp	.+334    	; 0x2f16 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2dc8:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <twi_slarw>
    2dcc:	10 c0       	rjmp	.+32     	; 0x2dee <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2dce:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <twi_masterBufferIndex>
    2dd2:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <twi_masterBufferLength>
    2dd6:	98 17       	cp	r25, r24
    2dd8:	70 f5       	brcc	.+92     	; 0x2e36 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2dda:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <twi_masterBufferIndex>
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	8e 0f       	add	r24, r30
    2de2:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <twi_masterBufferIndex>
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	e2 56       	subi	r30, 0x62	; 98
    2dea:	f8 4f       	sbci	r31, 0xF8	; 248
    2dec:	80 81       	ld	r24, Z
    2dee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2df2:	85 ec       	ldi	r24, 0xC5	; 197
    2df4:	83 c0       	rjmp	.+262    	; 0x2efc <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2df6:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <twi_error>
    2dfa:	8b c0       	rjmp	.+278    	; 0x2f12 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2dfc:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <twi_masterBufferIndex>
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	8e 0f       	add	r24, r30
    2e04:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <twi_masterBufferIndex>
    2e08:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	e2 56       	subi	r30, 0x62	; 98
    2e10:	f8 4f       	sbci	r31, 0xF8	; 248
    2e12:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2e14:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <twi_masterBufferIndex>
    2e18:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <twi_masterBufferLength>
    2e1c:	6b c0       	rjmp	.+214    	; 0x2ef4 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e1e:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <twi_masterBufferIndex>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	8e 0f       	add	r24, r30
    2e26:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <twi_masterBufferIndex>
    2e2a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	e2 56       	subi	r30, 0x62	; 98
    2e32:	f8 4f       	sbci	r31, 0xF8	; 248
    2e34:	80 83       	st	Z, r24
	if (twi_sendStop)
    2e36:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <twi_sendStop>
    2e3a:	81 11       	cpse	r24, r1
    2e3c:	6a c0       	rjmp	.+212    	; 0x2f12 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2e44:	84 ea       	ldi	r24, 0xA4	; 164
    2e46:	5e c0       	rjmp	.+188    	; 0x2f04 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2e48:	83 e0       	ldi	r24, 0x03	; 3
    2e4a:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2e4e:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <twi_rxBufferIndex>
    2e52:	cf cf       	rjmp	.-98     	; 0x2df2 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e54:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <twi_rxBufferIndex>
    2e58:	80 32       	cpi	r24, 0x20	; 32
    2e5a:	08 f0       	brcs	.+2      	; 0x2e5e <__vector_24+0x180>
    2e5c:	4e c0       	rjmp	.+156    	; 0x2efa <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2e5e:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <twi_rxBufferIndex>
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	8e 0f       	add	r24, r30
    2e66:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <twi_rxBufferIndex>
    2e6a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	e6 5a       	subi	r30, 0xA6	; 166
    2e72:	f8 4f       	sbci	r31, 0xF8	; 248
    2e74:	80 83       	st	Z, r24
    2e76:	bd cf       	rjmp	.-134    	; 0x2df2 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2e78:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2e7c:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <twi_rxBufferIndex>
    2e80:	80 32       	cpi	r24, 0x20	; 32
    2e82:	30 f4       	brcc	.+12     	; 0x2e90 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2e84:	e0 91 59 07 	lds	r30, 0x0759	; 0x800759 <twi_rxBufferIndex>
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	e6 5a       	subi	r30, 0xA6	; 166
    2e8c:	f8 4f       	sbci	r31, 0xF8	; 248
    2e8e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2e90:	60 91 59 07 	lds	r22, 0x0759	; 0x800759 <twi_rxBufferIndex>
    2e94:	70 e0       	ldi	r23, 0x00	; 0
    2e96:	e0 91 be 07 	lds	r30, 0x07BE	; 0x8007be <twi_onSlaveReceive>
    2e9a:	f0 91 bf 07 	lds	r31, 0x07BF	; 0x8007bf <twi_onSlaveReceive+0x1>
    2e9e:	8a e5       	ldi	r24, 0x5A	; 90
    2ea0:	97 e0       	ldi	r25, 0x07	; 7
    2ea2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2ea4:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <twi_rxBufferIndex>
      break;
    2ea8:	36 c0       	rjmp	.+108    	; 0x2f16 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2eaa:	84 e0       	ldi	r24, 0x04	; 4
    2eac:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2eb0:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2eb4:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2eb8:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <twi_onSlaveTransmit>
    2ebc:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <twi_onSlaveTransmit+0x1>
    2ec0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2ec2:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <twi_txBufferLength>
    2ec6:	81 11       	cpse	r24, r1
    2ec8:	05 c0       	rjmp	.+10     	; 0x2ed4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2ed0:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2ed4:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <twi_txBufferIndex>
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	8e 0f       	add	r24, r30
    2edc:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <twi_txBufferIndex>
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	e4 58       	subi	r30, 0x84	; 132
    2ee4:	f8 4f       	sbci	r31, 0xF8	; 248
    2ee6:	80 81       	ld	r24, Z
    2ee8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2eec:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <twi_txBufferIndex>
    2ef0:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <twi_txBufferLength>
    2ef4:	98 17       	cp	r25, r24
    2ef6:	08 f4       	brcc	.+2      	; 0x2efa <__vector_24+0x21c>
    2ef8:	7c cf       	rjmp	.-264    	; 0x2df2 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2efa:	85 e8       	ldi	r24, 0x85	; 133
    2efc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f00:	0a c0       	rjmp	.+20     	; 0x2f16 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f02:	85 ec       	ldi	r24, 0xC5	; 197
    2f04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2f08:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <twi_state>
      break;
    2f0c:	04 c0       	rjmp	.+8      	; 0x2f16 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2f0e:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <twi_error>
      twi_stop();
    2f12:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <twi_stop>
      break;
  }
}
    2f16:	ff 91       	pop	r31
    2f18:	ef 91       	pop	r30
    2f1a:	bf 91       	pop	r27
    2f1c:	af 91       	pop	r26
    2f1e:	9f 91       	pop	r25
    2f20:	8f 91       	pop	r24
    2f22:	7f 91       	pop	r23
    2f24:	6f 91       	pop	r22
    2f26:	5f 91       	pop	r21
    2f28:	4f 91       	pop	r20
    2f2a:	3f 91       	pop	r19
    2f2c:	2f 91       	pop	r18
    2f2e:	0f 90       	pop	r0
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	0f 90       	pop	r0
    2f34:	1f 90       	pop	r1
    2f36:	18 95       	reti

00002f38 <__divmodhi4>:
    2f38:	97 fb       	bst	r25, 7
    2f3a:	07 2e       	mov	r0, r23
    2f3c:	16 f4       	brtc	.+4      	; 0x2f42 <__divmodhi4+0xa>
    2f3e:	00 94       	com	r0
    2f40:	07 d0       	rcall	.+14     	; 0x2f50 <__divmodhi4_neg1>
    2f42:	77 fd       	sbrc	r23, 7
    2f44:	09 d0       	rcall	.+18     	; 0x2f58 <__divmodhi4_neg2>
    2f46:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    2f4a:	07 fc       	sbrc	r0, 7
    2f4c:	05 d0       	rcall	.+10     	; 0x2f58 <__divmodhi4_neg2>
    2f4e:	3e f4       	brtc	.+14     	; 0x2f5e <__divmodhi4_exit>

00002f50 <__divmodhi4_neg1>:
    2f50:	90 95       	com	r25
    2f52:	81 95       	neg	r24
    2f54:	9f 4f       	sbci	r25, 0xFF	; 255
    2f56:	08 95       	ret

00002f58 <__divmodhi4_neg2>:
    2f58:	70 95       	com	r23
    2f5a:	61 95       	neg	r22
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255

00002f5e <__divmodhi4_exit>:
    2f5e:	08 95       	ret

00002f60 <__udivmodsi4>:
    2f60:	a1 e2       	ldi	r26, 0x21	; 33
    2f62:	1a 2e       	mov	r1, r26
    2f64:	aa 1b       	sub	r26, r26
    2f66:	bb 1b       	sub	r27, r27
    2f68:	fd 01       	movw	r30, r26
    2f6a:	0d c0       	rjmp	.+26     	; 0x2f86 <__udivmodsi4_ep>

00002f6c <__udivmodsi4_loop>:
    2f6c:	aa 1f       	adc	r26, r26
    2f6e:	bb 1f       	adc	r27, r27
    2f70:	ee 1f       	adc	r30, r30
    2f72:	ff 1f       	adc	r31, r31
    2f74:	a2 17       	cp	r26, r18
    2f76:	b3 07       	cpc	r27, r19
    2f78:	e4 07       	cpc	r30, r20
    2f7a:	f5 07       	cpc	r31, r21
    2f7c:	20 f0       	brcs	.+8      	; 0x2f86 <__udivmodsi4_ep>
    2f7e:	a2 1b       	sub	r26, r18
    2f80:	b3 0b       	sbc	r27, r19
    2f82:	e4 0b       	sbc	r30, r20
    2f84:	f5 0b       	sbc	r31, r21

00002f86 <__udivmodsi4_ep>:
    2f86:	66 1f       	adc	r22, r22
    2f88:	77 1f       	adc	r23, r23
    2f8a:	88 1f       	adc	r24, r24
    2f8c:	99 1f       	adc	r25, r25
    2f8e:	1a 94       	dec	r1
    2f90:	69 f7       	brne	.-38     	; 0x2f6c <__udivmodsi4_loop>
    2f92:	60 95       	com	r22
    2f94:	70 95       	com	r23
    2f96:	80 95       	com	r24
    2f98:	90 95       	com	r25
    2f9a:	9b 01       	movw	r18, r22
    2f9c:	ac 01       	movw	r20, r24
    2f9e:	bd 01       	movw	r22, r26
    2fa0:	cf 01       	movw	r24, r30
    2fa2:	08 95       	ret

00002fa4 <__divmodsi4>:
    2fa4:	05 2e       	mov	r0, r21
    2fa6:	97 fb       	bst	r25, 7
    2fa8:	1e f4       	brtc	.+6      	; 0x2fb0 <__divmodsi4+0xc>
    2faa:	00 94       	com	r0
    2fac:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__negsi2>
    2fb0:	57 fd       	sbrc	r21, 7
    2fb2:	07 d0       	rcall	.+14     	; 0x2fc2 <__divmodsi4_neg2>
    2fb4:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__udivmodsi4>
    2fb8:	07 fc       	sbrc	r0, 7
    2fba:	03 d0       	rcall	.+6      	; 0x2fc2 <__divmodsi4_neg2>
    2fbc:	4e f4       	brtc	.+18     	; 0x2fd0 <__divmodsi4_exit>
    2fbe:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__negsi2>

00002fc2 <__divmodsi4_neg2>:
    2fc2:	50 95       	com	r21
    2fc4:	40 95       	com	r20
    2fc6:	30 95       	com	r19
    2fc8:	21 95       	neg	r18
    2fca:	3f 4f       	sbci	r19, 0xFF	; 255
    2fcc:	4f 4f       	sbci	r20, 0xFF	; 255
    2fce:	5f 4f       	sbci	r21, 0xFF	; 255

00002fd0 <__divmodsi4_exit>:
    2fd0:	08 95       	ret

00002fd2 <__negsi2>:
    2fd2:	90 95       	com	r25
    2fd4:	80 95       	com	r24
    2fd6:	70 95       	com	r23
    2fd8:	61 95       	neg	r22
    2fda:	7f 4f       	sbci	r23, 0xFF	; 255
    2fdc:	8f 4f       	sbci	r24, 0xFF	; 255
    2fde:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe0:	08 95       	ret

00002fe2 <__tablejump2__>:
    2fe2:	ee 0f       	add	r30, r30
    2fe4:	ff 1f       	adc	r31, r31
    2fe6:	05 90       	lpm	r0, Z+
    2fe8:	f4 91       	lpm	r31, Z
    2fea:	e0 2d       	mov	r30, r0
    2fec:	09 94       	ijmp

00002fee <__muluhisi3>:
    2fee:	0e 94 16 18 	call	0x302c	; 0x302c <__umulhisi3>
    2ff2:	a5 9f       	mul	r26, r21
    2ff4:	90 0d       	add	r25, r0
    2ff6:	b4 9f       	mul	r27, r20
    2ff8:	90 0d       	add	r25, r0
    2ffa:	a4 9f       	mul	r26, r20
    2ffc:	80 0d       	add	r24, r0
    2ffe:	91 1d       	adc	r25, r1
    3000:	11 24       	eor	r1, r1
    3002:	08 95       	ret

00003004 <__udivmodhi4>:
    3004:	aa 1b       	sub	r26, r26
    3006:	bb 1b       	sub	r27, r27
    3008:	51 e1       	ldi	r21, 0x11	; 17
    300a:	07 c0       	rjmp	.+14     	; 0x301a <__udivmodhi4_ep>

0000300c <__udivmodhi4_loop>:
    300c:	aa 1f       	adc	r26, r26
    300e:	bb 1f       	adc	r27, r27
    3010:	a6 17       	cp	r26, r22
    3012:	b7 07       	cpc	r27, r23
    3014:	10 f0       	brcs	.+4      	; 0x301a <__udivmodhi4_ep>
    3016:	a6 1b       	sub	r26, r22
    3018:	b7 0b       	sbc	r27, r23

0000301a <__udivmodhi4_ep>:
    301a:	88 1f       	adc	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	5a 95       	dec	r21
    3020:	a9 f7       	brne	.-22     	; 0x300c <__udivmodhi4_loop>
    3022:	80 95       	com	r24
    3024:	90 95       	com	r25
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	08 95       	ret

0000302c <__umulhisi3>:
    302c:	a2 9f       	mul	r26, r18
    302e:	b0 01       	movw	r22, r0
    3030:	b3 9f       	mul	r27, r19
    3032:	c0 01       	movw	r24, r0
    3034:	a3 9f       	mul	r26, r19
    3036:	70 0d       	add	r23, r0
    3038:	81 1d       	adc	r24, r1
    303a:	11 24       	eor	r1, r1
    303c:	91 1d       	adc	r25, r1
    303e:	b2 9f       	mul	r27, r18
    3040:	70 0d       	add	r23, r0
    3042:	81 1d       	adc	r24, r1
    3044:	11 24       	eor	r1, r1
    3046:	91 1d       	adc	r25, r1
    3048:	08 95       	ret

0000304a <malloc>:
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	82 30       	cpi	r24, 0x02	; 2
    3054:	91 05       	cpc	r25, r1
    3056:	10 f4       	brcc	.+4      	; 0x305c <malloc+0x12>
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	e0 91 c8 07 	lds	r30, 0x07C8	; 0x8007c8 <__flp>
    3060:	f0 91 c9 07 	lds	r31, 0x07C9	; 0x8007c9 <__flp+0x1>
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	a0 e0       	ldi	r26, 0x00	; 0
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	30 97       	sbiw	r30, 0x00	; 0
    306e:	19 f1       	breq	.+70     	; 0x30b6 <malloc+0x6c>
    3070:	40 81       	ld	r20, Z
    3072:	51 81       	ldd	r21, Z+1	; 0x01
    3074:	02 81       	ldd	r16, Z+2	; 0x02
    3076:	13 81       	ldd	r17, Z+3	; 0x03
    3078:	48 17       	cp	r20, r24
    307a:	59 07       	cpc	r21, r25
    307c:	c8 f0       	brcs	.+50     	; 0x30b0 <malloc+0x66>
    307e:	84 17       	cp	r24, r20
    3080:	95 07       	cpc	r25, r21
    3082:	69 f4       	brne	.+26     	; 0x309e <malloc+0x54>
    3084:	10 97       	sbiw	r26, 0x00	; 0
    3086:	31 f0       	breq	.+12     	; 0x3094 <malloc+0x4a>
    3088:	12 96       	adiw	r26, 0x02	; 2
    308a:	0c 93       	st	X, r16
    308c:	12 97       	sbiw	r26, 0x02	; 2
    308e:	13 96       	adiw	r26, 0x03	; 3
    3090:	1c 93       	st	X, r17
    3092:	27 c0       	rjmp	.+78     	; 0x30e2 <malloc+0x98>
    3094:	00 93 c8 07 	sts	0x07C8, r16	; 0x8007c8 <__flp>
    3098:	10 93 c9 07 	sts	0x07C9, r17	; 0x8007c9 <__flp+0x1>
    309c:	22 c0       	rjmp	.+68     	; 0x30e2 <malloc+0x98>
    309e:	21 15       	cp	r18, r1
    30a0:	31 05       	cpc	r19, r1
    30a2:	19 f0       	breq	.+6      	; 0x30aa <malloc+0x60>
    30a4:	42 17       	cp	r20, r18
    30a6:	53 07       	cpc	r21, r19
    30a8:	18 f4       	brcc	.+6      	; 0x30b0 <malloc+0x66>
    30aa:	9a 01       	movw	r18, r20
    30ac:	bd 01       	movw	r22, r26
    30ae:	ef 01       	movw	r28, r30
    30b0:	df 01       	movw	r26, r30
    30b2:	f8 01       	movw	r30, r16
    30b4:	db cf       	rjmp	.-74     	; 0x306c <malloc+0x22>
    30b6:	21 15       	cp	r18, r1
    30b8:	31 05       	cpc	r19, r1
    30ba:	f9 f0       	breq	.+62     	; 0x30fa <malloc+0xb0>
    30bc:	28 1b       	sub	r18, r24
    30be:	39 0b       	sbc	r19, r25
    30c0:	24 30       	cpi	r18, 0x04	; 4
    30c2:	31 05       	cpc	r19, r1
    30c4:	80 f4       	brcc	.+32     	; 0x30e6 <malloc+0x9c>
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	61 15       	cp	r22, r1
    30cc:	71 05       	cpc	r23, r1
    30ce:	21 f0       	breq	.+8      	; 0x30d8 <malloc+0x8e>
    30d0:	fb 01       	movw	r30, r22
    30d2:	93 83       	std	Z+3, r25	; 0x03
    30d4:	82 83       	std	Z+2, r24	; 0x02
    30d6:	04 c0       	rjmp	.+8      	; 0x30e0 <malloc+0x96>
    30d8:	90 93 c9 07 	sts	0x07C9, r25	; 0x8007c9 <__flp+0x1>
    30dc:	80 93 c8 07 	sts	0x07C8, r24	; 0x8007c8 <__flp>
    30e0:	fe 01       	movw	r30, r28
    30e2:	32 96       	adiw	r30, 0x02	; 2
    30e4:	44 c0       	rjmp	.+136    	; 0x316e <malloc+0x124>
    30e6:	fe 01       	movw	r30, r28
    30e8:	e2 0f       	add	r30, r18
    30ea:	f3 1f       	adc	r31, r19
    30ec:	81 93       	st	Z+, r24
    30ee:	91 93       	st	Z+, r25
    30f0:	22 50       	subi	r18, 0x02	; 2
    30f2:	31 09       	sbc	r19, r1
    30f4:	39 83       	std	Y+1, r19	; 0x01
    30f6:	28 83       	st	Y, r18
    30f8:	3a c0       	rjmp	.+116    	; 0x316e <malloc+0x124>
    30fa:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <__brkval>
    30fe:	30 91 c7 07 	lds	r19, 0x07C7	; 0x8007c7 <__brkval+0x1>
    3102:	23 2b       	or	r18, r19
    3104:	41 f4       	brne	.+16     	; 0x3116 <malloc+0xcc>
    3106:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    310a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    310e:	30 93 c7 07 	sts	0x07C7, r19	; 0x8007c7 <__brkval+0x1>
    3112:	20 93 c6 07 	sts	0x07C6, r18	; 0x8007c6 <__brkval>
    3116:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    311a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    311e:	21 15       	cp	r18, r1
    3120:	31 05       	cpc	r19, r1
    3122:	41 f4       	brne	.+16     	; 0x3134 <malloc+0xea>
    3124:	2d b7       	in	r18, 0x3d	; 61
    3126:	3e b7       	in	r19, 0x3e	; 62
    3128:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    312c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3130:	24 1b       	sub	r18, r20
    3132:	35 0b       	sbc	r19, r21
    3134:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <__brkval>
    3138:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <__brkval+0x1>
    313c:	e2 17       	cp	r30, r18
    313e:	f3 07       	cpc	r31, r19
    3140:	a0 f4       	brcc	.+40     	; 0x316a <malloc+0x120>
    3142:	2e 1b       	sub	r18, r30
    3144:	3f 0b       	sbc	r19, r31
    3146:	28 17       	cp	r18, r24
    3148:	39 07       	cpc	r19, r25
    314a:	78 f0       	brcs	.+30     	; 0x316a <malloc+0x120>
    314c:	ac 01       	movw	r20, r24
    314e:	4e 5f       	subi	r20, 0xFE	; 254
    3150:	5f 4f       	sbci	r21, 0xFF	; 255
    3152:	24 17       	cp	r18, r20
    3154:	35 07       	cpc	r19, r21
    3156:	48 f0       	brcs	.+18     	; 0x316a <malloc+0x120>
    3158:	4e 0f       	add	r20, r30
    315a:	5f 1f       	adc	r21, r31
    315c:	50 93 c7 07 	sts	0x07C7, r21	; 0x8007c7 <__brkval+0x1>
    3160:	40 93 c6 07 	sts	0x07C6, r20	; 0x8007c6 <__brkval>
    3164:	81 93       	st	Z+, r24
    3166:	91 93       	st	Z+, r25
    3168:	02 c0       	rjmp	.+4      	; 0x316e <malloc+0x124>
    316a:	e0 e0       	ldi	r30, 0x00	; 0
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	cf 01       	movw	r24, r30
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	08 95       	ret

0000317a <free>:
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	09 f4       	brne	.+2      	; 0x3184 <free+0xa>
    3182:	81 c0       	rjmp	.+258    	; 0x3286 <free+0x10c>
    3184:	fc 01       	movw	r30, r24
    3186:	32 97       	sbiw	r30, 0x02	; 2
    3188:	13 82       	std	Z+3, r1	; 0x03
    318a:	12 82       	std	Z+2, r1	; 0x02
    318c:	a0 91 c8 07 	lds	r26, 0x07C8	; 0x8007c8 <__flp>
    3190:	b0 91 c9 07 	lds	r27, 0x07C9	; 0x8007c9 <__flp+0x1>
    3194:	10 97       	sbiw	r26, 0x00	; 0
    3196:	81 f4       	brne	.+32     	; 0x31b8 <free+0x3e>
    3198:	20 81       	ld	r18, Z
    319a:	31 81       	ldd	r19, Z+1	; 0x01
    319c:	82 0f       	add	r24, r18
    319e:	93 1f       	adc	r25, r19
    31a0:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <__brkval>
    31a4:	30 91 c7 07 	lds	r19, 0x07C7	; 0x8007c7 <__brkval+0x1>
    31a8:	28 17       	cp	r18, r24
    31aa:	39 07       	cpc	r19, r25
    31ac:	51 f5       	brne	.+84     	; 0x3202 <free+0x88>
    31ae:	f0 93 c7 07 	sts	0x07C7, r31	; 0x8007c7 <__brkval+0x1>
    31b2:	e0 93 c6 07 	sts	0x07C6, r30	; 0x8007c6 <__brkval>
    31b6:	67 c0       	rjmp	.+206    	; 0x3286 <free+0x10c>
    31b8:	ed 01       	movw	r28, r26
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	ce 17       	cp	r28, r30
    31c0:	df 07       	cpc	r29, r31
    31c2:	40 f4       	brcc	.+16     	; 0x31d4 <free+0x5a>
    31c4:	4a 81       	ldd	r20, Y+2	; 0x02
    31c6:	5b 81       	ldd	r21, Y+3	; 0x03
    31c8:	9e 01       	movw	r18, r28
    31ca:	41 15       	cp	r20, r1
    31cc:	51 05       	cpc	r21, r1
    31ce:	f1 f0       	breq	.+60     	; 0x320c <free+0x92>
    31d0:	ea 01       	movw	r28, r20
    31d2:	f5 cf       	rjmp	.-22     	; 0x31be <free+0x44>
    31d4:	d3 83       	std	Z+3, r29	; 0x03
    31d6:	c2 83       	std	Z+2, r28	; 0x02
    31d8:	40 81       	ld	r20, Z
    31da:	51 81       	ldd	r21, Z+1	; 0x01
    31dc:	84 0f       	add	r24, r20
    31de:	95 1f       	adc	r25, r21
    31e0:	c8 17       	cp	r28, r24
    31e2:	d9 07       	cpc	r29, r25
    31e4:	59 f4       	brne	.+22     	; 0x31fc <free+0x82>
    31e6:	88 81       	ld	r24, Y
    31e8:	99 81       	ldd	r25, Y+1	; 0x01
    31ea:	84 0f       	add	r24, r20
    31ec:	95 1f       	adc	r25, r21
    31ee:	02 96       	adiw	r24, 0x02	; 2
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	80 83       	st	Z, r24
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	9b 81       	ldd	r25, Y+3	; 0x03
    31f8:	93 83       	std	Z+3, r25	; 0x03
    31fa:	82 83       	std	Z+2, r24	; 0x02
    31fc:	21 15       	cp	r18, r1
    31fe:	31 05       	cpc	r19, r1
    3200:	29 f4       	brne	.+10     	; 0x320c <free+0x92>
    3202:	f0 93 c9 07 	sts	0x07C9, r31	; 0x8007c9 <__flp+0x1>
    3206:	e0 93 c8 07 	sts	0x07C8, r30	; 0x8007c8 <__flp>
    320a:	3d c0       	rjmp	.+122    	; 0x3286 <free+0x10c>
    320c:	e9 01       	movw	r28, r18
    320e:	fb 83       	std	Y+3, r31	; 0x03
    3210:	ea 83       	std	Y+2, r30	; 0x02
    3212:	49 91       	ld	r20, Y+
    3214:	59 91       	ld	r21, Y+
    3216:	c4 0f       	add	r28, r20
    3218:	d5 1f       	adc	r29, r21
    321a:	ec 17       	cp	r30, r28
    321c:	fd 07       	cpc	r31, r29
    321e:	61 f4       	brne	.+24     	; 0x3238 <free+0xbe>
    3220:	80 81       	ld	r24, Z
    3222:	91 81       	ldd	r25, Z+1	; 0x01
    3224:	84 0f       	add	r24, r20
    3226:	95 1f       	adc	r25, r21
    3228:	02 96       	adiw	r24, 0x02	; 2
    322a:	e9 01       	movw	r28, r18
    322c:	99 83       	std	Y+1, r25	; 0x01
    322e:	88 83       	st	Y, r24
    3230:	82 81       	ldd	r24, Z+2	; 0x02
    3232:	93 81       	ldd	r25, Z+3	; 0x03
    3234:	9b 83       	std	Y+3, r25	; 0x03
    3236:	8a 83       	std	Y+2, r24	; 0x02
    3238:	e0 e0       	ldi	r30, 0x00	; 0
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	12 96       	adiw	r26, 0x02	; 2
    323e:	8d 91       	ld	r24, X+
    3240:	9c 91       	ld	r25, X
    3242:	13 97       	sbiw	r26, 0x03	; 3
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	19 f0       	breq	.+6      	; 0x324e <free+0xd4>
    3248:	fd 01       	movw	r30, r26
    324a:	dc 01       	movw	r26, r24
    324c:	f7 cf       	rjmp	.-18     	; 0x323c <free+0xc2>
    324e:	8d 91       	ld	r24, X+
    3250:	9c 91       	ld	r25, X
    3252:	11 97       	sbiw	r26, 0x01	; 1
    3254:	9d 01       	movw	r18, r26
    3256:	2e 5f       	subi	r18, 0xFE	; 254
    3258:	3f 4f       	sbci	r19, 0xFF	; 255
    325a:	82 0f       	add	r24, r18
    325c:	93 1f       	adc	r25, r19
    325e:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <__brkval>
    3262:	30 91 c7 07 	lds	r19, 0x07C7	; 0x8007c7 <__brkval+0x1>
    3266:	28 17       	cp	r18, r24
    3268:	39 07       	cpc	r19, r25
    326a:	69 f4       	brne	.+26     	; 0x3286 <free+0x10c>
    326c:	30 97       	sbiw	r30, 0x00	; 0
    326e:	29 f4       	brne	.+10     	; 0x327a <free+0x100>
    3270:	10 92 c9 07 	sts	0x07C9, r1	; 0x8007c9 <__flp+0x1>
    3274:	10 92 c8 07 	sts	0x07C8, r1	; 0x8007c8 <__flp>
    3278:	02 c0       	rjmp	.+4      	; 0x327e <free+0x104>
    327a:	13 82       	std	Z+3, r1	; 0x03
    327c:	12 82       	std	Z+2, r1	; 0x02
    327e:	b0 93 c7 07 	sts	0x07C7, r27	; 0x8007c7 <__brkval+0x1>
    3282:	a0 93 c6 07 	sts	0x07C6, r26	; 0x8007c6 <__brkval>
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	08 95       	ret

0000328c <realloc>:
    328c:	a0 e0       	ldi	r26, 0x00	; 0
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	ec e4       	ldi	r30, 0x4C	; 76
    3292:	f9 e1       	ldi	r31, 0x19	; 25
    3294:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__prologue_saves__+0x8>
    3298:	ec 01       	movw	r28, r24
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	21 f4       	brne	.+8      	; 0x32a6 <realloc+0x1a>
    329e:	cb 01       	movw	r24, r22
    32a0:	0e 94 25 18 	call	0x304a	; 0x304a <malloc>
    32a4:	b4 c0       	rjmp	.+360    	; 0x340e <realloc+0x182>
    32a6:	fc 01       	movw	r30, r24
    32a8:	e6 0f       	add	r30, r22
    32aa:	f7 1f       	adc	r31, r23
    32ac:	9c 01       	movw	r18, r24
    32ae:	22 50       	subi	r18, 0x02	; 2
    32b0:	31 09       	sbc	r19, r1
    32b2:	e2 17       	cp	r30, r18
    32b4:	f3 07       	cpc	r31, r19
    32b6:	08 f4       	brcc	.+2      	; 0x32ba <realloc+0x2e>
    32b8:	a8 c0       	rjmp	.+336    	; 0x340a <realloc+0x17e>
    32ba:	d9 01       	movw	r26, r18
    32bc:	0d 91       	ld	r16, X+
    32be:	1c 91       	ld	r17, X
    32c0:	11 97       	sbiw	r26, 0x01	; 1
    32c2:	06 17       	cp	r16, r22
    32c4:	17 07       	cpc	r17, r23
    32c6:	b0 f0       	brcs	.+44     	; 0x32f4 <realloc+0x68>
    32c8:	05 30       	cpi	r16, 0x05	; 5
    32ca:	11 05       	cpc	r17, r1
    32cc:	08 f4       	brcc	.+2      	; 0x32d0 <realloc+0x44>
    32ce:	9b c0       	rjmp	.+310    	; 0x3406 <realloc+0x17a>
    32d0:	c8 01       	movw	r24, r16
    32d2:	04 97       	sbiw	r24, 0x04	; 4
    32d4:	86 17       	cp	r24, r22
    32d6:	97 07       	cpc	r25, r23
    32d8:	08 f4       	brcc	.+2      	; 0x32dc <realloc+0x50>
    32da:	95 c0       	rjmp	.+298    	; 0x3406 <realloc+0x17a>
    32dc:	02 50       	subi	r16, 0x02	; 2
    32de:	11 09       	sbc	r17, r1
    32e0:	06 1b       	sub	r16, r22
    32e2:	17 0b       	sbc	r17, r23
    32e4:	01 93       	st	Z+, r16
    32e6:	11 93       	st	Z+, r17
    32e8:	6d 93       	st	X+, r22
    32ea:	7c 93       	st	X, r23
    32ec:	cf 01       	movw	r24, r30
    32ee:	0e 94 bd 18 	call	0x317a	; 0x317a <free>
    32f2:	89 c0       	rjmp	.+274    	; 0x3406 <realloc+0x17a>
    32f4:	5b 01       	movw	r10, r22
    32f6:	a0 1a       	sub	r10, r16
    32f8:	b1 0a       	sbc	r11, r17
    32fa:	4c 01       	movw	r8, r24
    32fc:	80 0e       	add	r8, r16
    32fe:	91 1e       	adc	r9, r17
    3300:	a0 91 c8 07 	lds	r26, 0x07C8	; 0x8007c8 <__flp>
    3304:	b0 91 c9 07 	lds	r27, 0x07C9	; 0x8007c9 <__flp+0x1>
    3308:	61 2c       	mov	r6, r1
    330a:	71 2c       	mov	r7, r1
    330c:	e1 2c       	mov	r14, r1
    330e:	f1 2c       	mov	r15, r1
    3310:	10 97       	sbiw	r26, 0x00	; 0
    3312:	09 f4       	brne	.+2      	; 0x3316 <realloc+0x8a>
    3314:	46 c0       	rjmp	.+140    	; 0x33a2 <realloc+0x116>
    3316:	8d 91       	ld	r24, X+
    3318:	9c 91       	ld	r25, X
    331a:	11 97       	sbiw	r26, 0x01	; 1
    331c:	a8 15       	cp	r26, r8
    331e:	b9 05       	cpc	r27, r9
    3320:	b1 f5       	brne	.+108    	; 0x338e <realloc+0x102>
    3322:	6c 01       	movw	r12, r24
    3324:	42 e0       	ldi	r20, 0x02	; 2
    3326:	c4 0e       	add	r12, r20
    3328:	d1 1c       	adc	r13, r1
    332a:	ca 14       	cp	r12, r10
    332c:	db 04       	cpc	r13, r11
    332e:	78 f1       	brcs	.+94     	; 0x338e <realloc+0x102>
    3330:	4c 01       	movw	r8, r24
    3332:	8a 18       	sub	r8, r10
    3334:	9b 08       	sbc	r9, r11
    3336:	64 01       	movw	r12, r8
    3338:	42 e0       	ldi	r20, 0x02	; 2
    333a:	c4 0e       	add	r12, r20
    333c:	d1 1c       	adc	r13, r1
    333e:	12 96       	adiw	r26, 0x02	; 2
    3340:	bc 90       	ld	r11, X
    3342:	12 97       	sbiw	r26, 0x02	; 2
    3344:	13 96       	adiw	r26, 0x03	; 3
    3346:	ac 91       	ld	r26, X
    3348:	b5 e0       	ldi	r27, 0x05	; 5
    334a:	cb 16       	cp	r12, r27
    334c:	d1 04       	cpc	r13, r1
    334e:	40 f0       	brcs	.+16     	; 0x3360 <realloc+0xd4>
    3350:	b2 82       	std	Z+2, r11	; 0x02
    3352:	a3 83       	std	Z+3, r26	; 0x03
    3354:	91 82       	std	Z+1, r9	; 0x01
    3356:	80 82       	st	Z, r8
    3358:	d9 01       	movw	r26, r18
    335a:	6d 93       	st	X+, r22
    335c:	7c 93       	st	X, r23
    335e:	09 c0       	rjmp	.+18     	; 0x3372 <realloc+0xe6>
    3360:	0e 5f       	subi	r16, 0xFE	; 254
    3362:	1f 4f       	sbci	r17, 0xFF	; 255
    3364:	80 0f       	add	r24, r16
    3366:	91 1f       	adc	r25, r17
    3368:	f9 01       	movw	r30, r18
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
    336e:	eb 2d       	mov	r30, r11
    3370:	fa 2f       	mov	r31, r26
    3372:	e1 14       	cp	r14, r1
    3374:	f1 04       	cpc	r15, r1
    3376:	31 f0       	breq	.+12     	; 0x3384 <realloc+0xf8>
    3378:	d7 01       	movw	r26, r14
    337a:	13 96       	adiw	r26, 0x03	; 3
    337c:	fc 93       	st	X, r31
    337e:	ee 93       	st	-X, r30
    3380:	12 97       	sbiw	r26, 0x02	; 2
    3382:	41 c0       	rjmp	.+130    	; 0x3406 <realloc+0x17a>
    3384:	f0 93 c9 07 	sts	0x07C9, r31	; 0x8007c9 <__flp+0x1>
    3388:	e0 93 c8 07 	sts	0x07C8, r30	; 0x8007c8 <__flp>
    338c:	3c c0       	rjmp	.+120    	; 0x3406 <realloc+0x17a>
    338e:	68 16       	cp	r6, r24
    3390:	79 06       	cpc	r7, r25
    3392:	08 f4       	brcc	.+2      	; 0x3396 <realloc+0x10a>
    3394:	3c 01       	movw	r6, r24
    3396:	7d 01       	movw	r14, r26
    3398:	12 96       	adiw	r26, 0x02	; 2
    339a:	0d 90       	ld	r0, X+
    339c:	bc 91       	ld	r27, X
    339e:	a0 2d       	mov	r26, r0
    33a0:	b7 cf       	rjmp	.-146    	; 0x3310 <realloc+0x84>
    33a2:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <__brkval>
    33a6:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <__brkval+0x1>
    33aa:	88 16       	cp	r8, r24
    33ac:	99 06       	cpc	r9, r25
    33ae:	e1 f4       	brne	.+56     	; 0x33e8 <realloc+0x15c>
    33b0:	66 16       	cp	r6, r22
    33b2:	77 06       	cpc	r7, r23
    33b4:	c8 f4       	brcc	.+50     	; 0x33e8 <realloc+0x15c>
    33b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    33ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	41 f4       	brne	.+16     	; 0x33d2 <realloc+0x146>
    33c2:	8d b7       	in	r24, 0x3d	; 61
    33c4:	9e b7       	in	r25, 0x3e	; 62
    33c6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    33ca:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    33ce:	84 1b       	sub	r24, r20
    33d0:	95 0b       	sbc	r25, r21
    33d2:	e8 17       	cp	r30, r24
    33d4:	f9 07       	cpc	r31, r25
    33d6:	c8 f4       	brcc	.+50     	; 0x340a <realloc+0x17e>
    33d8:	f0 93 c7 07 	sts	0x07C7, r31	; 0x8007c7 <__brkval+0x1>
    33dc:	e0 93 c6 07 	sts	0x07C6, r30	; 0x8007c6 <__brkval>
    33e0:	f9 01       	movw	r30, r18
    33e2:	71 83       	std	Z+1, r23	; 0x01
    33e4:	60 83       	st	Z, r22
    33e6:	0f c0       	rjmp	.+30     	; 0x3406 <realloc+0x17a>
    33e8:	cb 01       	movw	r24, r22
    33ea:	0e 94 25 18 	call	0x304a	; 0x304a <malloc>
    33ee:	7c 01       	movw	r14, r24
    33f0:	00 97       	sbiw	r24, 0x00	; 0
    33f2:	59 f0       	breq	.+22     	; 0x340a <realloc+0x17e>
    33f4:	a8 01       	movw	r20, r16
    33f6:	be 01       	movw	r22, r28
    33f8:	0e 94 0c 1a 	call	0x3418	; 0x3418 <memcpy>
    33fc:	ce 01       	movw	r24, r28
    33fe:	0e 94 bd 18 	call	0x317a	; 0x317a <free>
    3402:	c7 01       	movw	r24, r14
    3404:	04 c0       	rjmp	.+8      	; 0x340e <realloc+0x182>
    3406:	ce 01       	movw	r24, r28
    3408:	02 c0       	rjmp	.+4      	; 0x340e <realloc+0x182>
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	ee e0       	ldi	r30, 0x0E	; 14
    3414:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__epilogue_restores__+0x8>

00003418 <memcpy>:
    3418:	fb 01       	movw	r30, r22
    341a:	dc 01       	movw	r26, r24
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <memcpy+0xa>
    341e:	01 90       	ld	r0, Z+
    3420:	0d 92       	st	X+, r0
    3422:	41 50       	subi	r20, 0x01	; 1
    3424:	50 40       	sbci	r21, 0x00	; 0
    3426:	d8 f7       	brcc	.-10     	; 0x341e <memcpy+0x6>
    3428:	08 95       	ret

0000342a <strcmp>:
    342a:	fb 01       	movw	r30, r22
    342c:	dc 01       	movw	r26, r24
    342e:	8d 91       	ld	r24, X+
    3430:	01 90       	ld	r0, Z+
    3432:	80 19       	sub	r24, r0
    3434:	01 10       	cpse	r0, r1
    3436:	d9 f3       	breq	.-10     	; 0x342e <strcmp+0x4>
    3438:	99 0b       	sbc	r25, r25
    343a:	08 95       	ret

0000343c <strcpy>:
    343c:	fb 01       	movw	r30, r22
    343e:	dc 01       	movw	r26, r24
    3440:	01 90       	ld	r0, Z+
    3442:	0d 92       	st	X+, r0
    3444:	00 20       	and	r0, r0
    3446:	e1 f7       	brne	.-8      	; 0x3440 <strcpy+0x4>
    3448:	08 95       	ret

0000344a <__prologue_saves__>:
    344a:	2f 92       	push	r2
    344c:	3f 92       	push	r3
    344e:	4f 92       	push	r4
    3450:	5f 92       	push	r5
    3452:	6f 92       	push	r6
    3454:	7f 92       	push	r7
    3456:	8f 92       	push	r8
    3458:	9f 92       	push	r9
    345a:	af 92       	push	r10
    345c:	bf 92       	push	r11
    345e:	cf 92       	push	r12
    3460:	df 92       	push	r13
    3462:	ef 92       	push	r14
    3464:	ff 92       	push	r15
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	ca 1b       	sub	r28, r26
    3474:	db 0b       	sbc	r29, r27
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	09 94       	ijmp

00003482 <__epilogue_restores__>:
    3482:	2a 88       	ldd	r2, Y+18	; 0x12
    3484:	39 88       	ldd	r3, Y+17	; 0x11
    3486:	48 88       	ldd	r4, Y+16	; 0x10
    3488:	5f 84       	ldd	r5, Y+15	; 0x0f
    348a:	6e 84       	ldd	r6, Y+14	; 0x0e
    348c:	7d 84       	ldd	r7, Y+13	; 0x0d
    348e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3490:	9b 84       	ldd	r9, Y+11	; 0x0b
    3492:	aa 84       	ldd	r10, Y+10	; 0x0a
    3494:	b9 84       	ldd	r11, Y+9	; 0x09
    3496:	c8 84       	ldd	r12, Y+8	; 0x08
    3498:	df 80       	ldd	r13, Y+7	; 0x07
    349a:	ee 80       	ldd	r14, Y+6	; 0x06
    349c:	fd 80       	ldd	r15, Y+5	; 0x05
    349e:	0c 81       	ldd	r16, Y+4	; 0x04
    34a0:	1b 81       	ldd	r17, Y+3	; 0x03
    34a2:	aa 81       	ldd	r26, Y+2	; 0x02
    34a4:	b9 81       	ldd	r27, Y+1	; 0x01
    34a6:	ce 0f       	add	r28, r30
    34a8:	d1 1d       	adc	r29, r1
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	ed 01       	movw	r28, r26
    34b6:	08 95       	ret

000034b8 <__do_global_dtors>:
    34b8:	10 e0       	ldi	r17, 0x00	; 0
    34ba:	cd e6       	ldi	r28, 0x6D	; 109
    34bc:	d0 e0       	ldi	r29, 0x00	; 0
    34be:	04 c0       	rjmp	.+8      	; 0x34c8 <__do_global_dtors+0x10>
    34c0:	fe 01       	movw	r30, r28
    34c2:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__tablejump2__>
    34c6:	21 96       	adiw	r28, 0x01	; 1
    34c8:	ce 36       	cpi	r28, 0x6E	; 110
    34ca:	d1 07       	cpc	r29, r17
    34cc:	c9 f7       	brne	.-14     	; 0x34c0 <__do_global_dtors+0x8>
    34ce:	f8 94       	cli

000034d0 <__stop_program>:
    34d0:	ff cf       	rjmp	.-2      	; 0x34d0 <__stop_program>
